"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-reconciler";
exports.ids = ["vendor-chunks/react-reconciler"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-reconciler/cjs/react-reconciler-constants.development.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/react-reconciler/cjs/react-reconciler-constants.development.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @license React\n * react-reconciler-constants.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar NoLane =\n/*                          */\n0;\nvar SyncLane =\n/*                        */\n2;\nvar InputContinuousLane =\n/*             */\n8;\nvar DefaultLane =\n/*                     */\n32;\nvar IdleLane =\n/*                        */\n268435456;\n\nvar NoEventPriority = NoLane;\nvar DiscreteEventPriority = SyncLane;\nvar ContinuousEventPriority = InputContinuousLane;\nvar DefaultEventPriority = DefaultLane;\nvar IdleEventPriority = IdleLane;\n\nvar LegacyRoot = 0;\nvar ConcurrentRoot = 1;\n\nexports.ConcurrentRoot = ConcurrentRoot;\nexports.ContinuousEventPriority = ContinuousEventPriority;\nexports.DefaultEventPriority = DefaultEventPriority;\nexports.DiscreteEventPriority = DiscreteEventPriority;\nexports.IdleEventPriority = IdleEventPriority;\nexports.LegacyRoot = LegacyRoot;\nexports.NoEventPriority = NoEventPriority;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVjb25jaWxlci9janMvcmVhY3QtcmVjb25jaWxlci1jb25zdGFudHMuZGV2ZWxvcG1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViLElBQUksSUFBcUM7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHNCQUFzQjtBQUN0QiwrQkFBK0I7QUFDL0IsNEJBQTRCO0FBQzVCLDZCQUE2QjtBQUM3Qix5QkFBeUI7QUFDekIsa0JBQWtCO0FBQ2xCLHVCQUF1QjtBQUN2QixHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIi9Vc2Vycy9zb3VsZW1hbmVzb3cvRG93bmxvYWRzL0NvZGUvM2QgR2xhc3Nlcy9ub2RlX21vZHVsZXMvcmVhY3QtcmVjb25jaWxlci9janMvcmVhY3QtcmVjb25jaWxlci1jb25zdGFudHMuZGV2ZWxvcG1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtcmVjb25jaWxlci1jb25zdGFudHMuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBOb0xhbmUgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICAgICovXG4wO1xudmFyIFN5bmNMYW5lID1cbi8qICAgICAgICAgICAgICAgICAgICAgICAgKi9cbjI7XG52YXIgSW5wdXRDb250aW51b3VzTGFuZSA9XG4vKiAgICAgICAgICAgICAqL1xuODtcbnZhciBEZWZhdWx0TGFuZSA9XG4vKiAgICAgICAgICAgICAgICAgICAgICovXG4zMjtcbnZhciBJZGxlTGFuZSA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgICovXG4yNjg0MzU0NTY7XG5cbnZhciBOb0V2ZW50UHJpb3JpdHkgPSBOb0xhbmU7XG52YXIgRGlzY3JldGVFdmVudFByaW9yaXR5ID0gU3luY0xhbmU7XG52YXIgQ29udGludW91c0V2ZW50UHJpb3JpdHkgPSBJbnB1dENvbnRpbnVvdXNMYW5lO1xudmFyIERlZmF1bHRFdmVudFByaW9yaXR5ID0gRGVmYXVsdExhbmU7XG52YXIgSWRsZUV2ZW50UHJpb3JpdHkgPSBJZGxlTGFuZTtcblxudmFyIExlZ2FjeVJvb3QgPSAwO1xudmFyIENvbmN1cnJlbnRSb290ID0gMTtcblxuZXhwb3J0cy5Db25jdXJyZW50Um9vdCA9IENvbmN1cnJlbnRSb290O1xuZXhwb3J0cy5Db250aW51b3VzRXZlbnRQcmlvcml0eSA9IENvbnRpbnVvdXNFdmVudFByaW9yaXR5O1xuZXhwb3J0cy5EZWZhdWx0RXZlbnRQcmlvcml0eSA9IERlZmF1bHRFdmVudFByaW9yaXR5O1xuZXhwb3J0cy5EaXNjcmV0ZUV2ZW50UHJpb3JpdHkgPSBEaXNjcmV0ZUV2ZW50UHJpb3JpdHk7XG5leHBvcnRzLklkbGVFdmVudFByaW9yaXR5ID0gSWRsZUV2ZW50UHJpb3JpdHk7XG5leHBvcnRzLkxlZ2FjeVJvb3QgPSBMZWdhY3lSb290O1xuZXhwb3J0cy5Ob0V2ZW50UHJpb3JpdHkgPSBOb0V2ZW50UHJpb3JpdHk7XG4gIH0pKCk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-reconciler/cjs/react-reconciler-constants.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-reconciler/cjs/react-reconciler.development.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-reconciler/cjs/react-reconciler.development.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @license React\n * react-reconciler.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    module.exports = function $$$reconciler($$$config) {\n        var exports = {};\n        'use strict';\n        var React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n        var Scheduler = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/scheduler/index.js\");\n        var ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;\n        // -----------------------------------------------------------------------------\n        // Killswitch\n        //\n        // Flags that exist solely to turn off a change in case it causes a regression\n        // when it rolls out to prod. We should remove these as soon as possible.\n        // -----------------------------------------------------------------------------\n        // -----------------------------------------------------------------------------\n        // Land or remove (moderate effort)\n        //\n        // Flags that can be probably deleted or landed, but might require extra effort\n        // like migrating internal callers or performance testing.\n        // -----------------------------------------------------------------------------\n        // TODO: Finish rolling out in www\n        var favorSafetyOverHydrationPerf = true;\n        var enableAsyncActions = true; // Need to remove didTimeout argument from Scheduler before landing\n        var disableDefaultPropsExceptForClasses = true; // -----------------------------------------------------------------------------\n        // Slated for removal in the future (significant effort)\n        //\n        // These are experiments that didn't work out, and never shipped, but we can't\n        // delete from the codebase until we migrate internal callers.\n        // -----------------------------------------------------------------------------\n        // Add a callback property to suspense to notify which promises are currently\n        // in the update queue. This allows reporting and tracing of what is causing\n        // the user to see a loading state.\n        //\n        // Also allows hydration callbacks to fire when a dehydrated boundary gets\n        // hydrated or deleted.\n        //\n        // This will eventually be replaced by the Transition Tracing proposal.\n        var enableSuspenseCallback = false; // Experimental Scope support.\n        var enableAsyncIterableChildren = false;\n        var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        var alwaysThrottleRetries = true;\n        var passChildrenWhenCloningPersistedNodes = false;\n        var enableOwnerStacks = false;\n        var syncLaneExpirationMs = 250;\n        var transitionLaneExpirationMs = 5000; // -----------------------------------------------------------------------------\n        // This allows us to land breaking changes to remove legacy mode APIs in experimental builds\n        // before removing them in stable in the next Major\n        var disableLegacyMode = true; // Make <Context> equivalent to <Context.Provider> instead of <Context.Consumer>\n        // Debugging and DevTools\n        // -----------------------------------------------------------------------------\n        // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n        // for an experimental timeline tool.\n        var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\n        var enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n        var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n        var enableProfilerNestedUpdatePhase = true; // Adds verbose console logging for e.g. state updates, suspense, and work loop\n        var suppressWarning = false;\n        function setSuppressWarning(newSuppressWarning) {\n            {\n                suppressWarning = newSuppressWarning;\n            }\n        } // In DEV, calls to console.warn and console.error get replaced\n        // by calls to these methods by a Babel plugin.\n        //\n        // In PROD (or in packages without access to React internals),\n        // they are left as they are instead.\n        function warn(format) {\n            {\n                if (!suppressWarning) {\n                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    printWarning('warn', format, args);\n                }\n            }\n        }\n        function error(format) {\n            {\n                if (!suppressWarning) {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning('error', format, args);\n                }\n            }\n        } // eslint-disable-next-line react-internal/no-production-logging\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var isErrorLogger = format === '%s\\n\\n%s\\n' || format === '%o\\n\\n%s\\n\\n%s\\n';\n                if (ReactSharedInternals.getCurrentStack) {\n                    // We only add the current stack to the console when createTask is not supported.\n                    // Since createTask requires DevTools to be open to work, this means that stacks\n                    // can be lost while DevTools isn't open but we can't detect this.\n                    var stack = ReactSharedInternals.getCurrentStack();\n                    if (stack !== '') {\n                        format += '%s';\n                        args = args.concat([\n                            stack\n                        ]);\n                    }\n                }\n                if (isErrorLogger) {\n                    // Don't prefix our default logging formatting in ReactFiberErrorLoggger.\n                    // Don't toString the arguments.\n                    args.unshift(format);\n                } else {\n                    // TODO: Remove this prefix and stop toStringing in the wrapper and\n                    // instead do it at each callsite as needed.\n                    // Careful: RN currently depends on this prefix\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    args = args.map(function(item) {\n                        return String(item);\n                    });\n                    args.unshift('Warning: ' + format);\n                } // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, args);\n            }\n        }\n        var assign = Object.assign;\n        var LegacyRoot = 0;\n        var ConcurrentRoot = 1;\n        /**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */ function get(key) {\n            return key._reactInternals;\n        }\n        function set(key, value) {\n            key._reactInternals = value;\n        }\n        var FunctionComponent = 0;\n        var ClassComponent = 1;\n        var HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n        var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n        var HostComponent = 5;\n        var HostText = 6;\n        var Fragment = 7;\n        var Mode = 8;\n        var ContextConsumer = 9;\n        var ContextProvider = 10;\n        var ForwardRef = 11;\n        var Profiler = 12;\n        var SuspenseComponent = 13;\n        var MemoComponent = 14;\n        var SimpleMemoComponent = 15;\n        var LazyComponent = 16;\n        var IncompleteClassComponent = 17;\n        var DehydratedFragment = 18;\n        var SuspenseListComponent = 19;\n        var ScopeComponent = 21;\n        var OffscreenComponent = 22;\n        var LegacyHiddenComponent = 23;\n        var CacheComponent = 24;\n        var TracingMarkerComponent = 25;\n        var HostHoistable = 26;\n        var HostSingleton = 27;\n        var IncompleteFunctionComponent = 28;\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_LEGACY_ELEMENT_TYPE = Symbol.for('react.element');\n        var REACT_ELEMENT_TYPE = Symbol.for('react.transitional.element');\n        var REACT_PORTAL_TYPE = Symbol.for('react.portal');\n        var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n        var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\n        var REACT_PROFILER_TYPE = Symbol.for('react.profiler');\n        var REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n        var REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\n        var REACT_CONTEXT_TYPE = Symbol.for('react.context');\n        var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\n        var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\n        var REACT_MEMO_TYPE = Symbol.for('react.memo');\n        var REACT_LAZY_TYPE = Symbol.for('react.lazy');\n        var REACT_SCOPE_TYPE = Symbol.for('react.scope');\n        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\n        var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\n        var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\n        var REACT_MEMO_CACHE_SENTINEL = Symbol.for('react.memo_cache_sentinel');\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = '@@iterator';\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== 'object') {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === 'function') {\n                return maybeIterator;\n            }\n            return null;\n        }\n        function getWrappedName$1(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || '';\n            return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName$1(type) {\n            return type.displayName || 'Context';\n        }\n        var REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === 'function') {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === 'string') {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return 'Fragment';\n                case REACT_PORTAL_TYPE:\n                    return 'Portal';\n                case REACT_PROFILER_TYPE:\n                    return 'Profiler';\n                case REACT_STRICT_MODE_TYPE:\n                    return 'StrictMode';\n                case REACT_SUSPENSE_TYPE:\n                    return 'Suspense';\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return 'SuspenseList';\n            }\n            if (typeof type === 'object') {\n                {\n                    if (typeof type.tag === 'number') {\n                        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_PROVIDER_TYPE:\n                        {\n                            return null;\n                        }\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        {\n                            return getContextName$1(context) + '.Provider';\n                        }\n                    case REACT_CONSUMER_TYPE:\n                        {\n                            var consumer = type;\n                            return getContextName$1(consumer._context) + '.Consumer';\n                        }\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName$1(type, type.render, 'ForwardRef');\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || 'Memo';\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var functionName = innerType.displayName || innerType.name || '';\n            return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n        } // Keep in sync with shared/getComponentNameFromType\n        function getContextName(type) {\n            return type.displayName || 'Context';\n        }\n        function getComponentNameFromOwner(owner) {\n            if (typeof owner.tag === 'number') {\n                return getComponentNameFromFiber(owner);\n            }\n            if (typeof owner.name === 'string') {\n                return owner.name;\n            }\n            return null;\n        }\n        function getComponentNameFromFiber(fiber) {\n            var tag = fiber.tag, type = fiber.type;\n            switch(tag){\n                case CacheComponent:\n                    return 'Cache';\n                case ContextConsumer:\n                    {\n                        var consumer = type;\n                        return getContextName(consumer._context) + '.Consumer';\n                    }\n                case ContextProvider:\n                    {\n                        var _context = type;\n                        return getContextName(_context) + '.Provider';\n                    }\n                case DehydratedFragment:\n                    return 'DehydratedFragment';\n                case ForwardRef:\n                    return getWrappedName(type, type.render, 'ForwardRef');\n                case Fragment:\n                    return 'Fragment';\n                case HostHoistable:\n                case HostSingleton:\n                case HostComponent:\n                    // Host component type is the display name (e.g. \"div\", \"View\")\n                    return type;\n                case HostPortal:\n                    return 'Portal';\n                case HostRoot:\n                    return 'Root';\n                case HostText:\n                    return 'Text';\n                case LazyComponent:\n                    // Name comes from the type in this case; we don't have a tag.\n                    return getComponentNameFromType(type);\n                case Mode:\n                    if (type === REACT_STRICT_MODE_TYPE) {\n                        // Don't be less specific than shared/getComponentNameFromType\n                        return 'StrictMode';\n                    }\n                    return 'Mode';\n                case OffscreenComponent:\n                    return 'Offscreen';\n                case Profiler:\n                    return 'Profiler';\n                case ScopeComponent:\n                    return 'Scope';\n                case SuspenseComponent:\n                    return 'Suspense';\n                case SuspenseListComponent:\n                    return 'SuspenseList';\n                case TracingMarkerComponent:\n                    return 'TracingMarker';\n                // The display name for these tags come from the user-provided type:\n                case IncompleteClassComponent:\n                case IncompleteFunctionComponent:\n                    {\n                        break;\n                    }\n                // Fallthrough\n                case ClassComponent:\n                case FunctionComponent:\n                case MemoComponent:\n                case SimpleMemoComponent:\n                    if (typeof type === 'function') {\n                        return type.displayName || type.name || null;\n                    }\n                    if (typeof type === 'string') {\n                        return type;\n                    }\n                    break;\n            }\n            return null;\n        }\n        var NoFlags$1 = /*                      */ 0;\n        var PerformedWork = /*                */ 1;\n        var Placement = /*                    */ 2;\n        var DidCapture = /*                   */ 128;\n        var Hydrating = /*                    */ 4096; // You can change the rest (and add more).\n        var Update = /*                       */ 4;\n        /* Skipped value:                                 0b0000000000000000000000001000; */ var ChildDeletion = /*                */ 16;\n        var ContentReset = /*                 */ 32;\n        var Callback = /*                     */ 64;\n        /* Used by DidCapture:                            0b0000000000000000000010000000; */ var ForceClientRender = /*            */ 256;\n        var Ref = /*                          */ 512;\n        var Snapshot = /*                     */ 1024;\n        var Passive$1 = /*                      */ 2048;\n        /* Used by Hydrating:                             0b0000000000000001000000000000; */ var Visibility = /*                   */ 8192;\n        var StoreConsistency = /*             */ 16384; // It's OK to reuse these bits because these flags are mutually exclusive for\n        // different fiber types. We should really be doing this for as many flags as\n        // possible, because we're about to run out of bits.\n        var ScheduleRetry = StoreConsistency;\n        var ShouldSuspendCommit = Visibility;\n        var DidDefer = ContentReset;\n        var FormReset = Snapshot;\n        var HostEffectMask = /*               */ 32767; // These are not really side effects, but we still reuse this field.\n        var Incomplete = /*                   */ 32768;\n        var ShouldCapture = /*                */ 65536;\n        var ForceUpdateForLegacySuspense = /* */ 131072;\n        var Forked = /*                       */ 1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n        // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n        // This enables us to defer more work in the unmount case,\n        // since we can defer traversing the tree during layout to look for Passive effects,\n        // and instead rely on the static flag as a signal that there may be cleanup work.\n        var RefStatic = /*                    */ 2097152;\n        var LayoutStatic = /*                 */ 4194304;\n        var PassiveStatic = /*                */ 8388608;\n        var MaySuspendCommit = /*             */ 16777216; // Flag used to identify newly inserted fibers. It isn't reset after commit unlike `Placement`.\n        var PlacementDEV = /*                 */ 33554432;\n        var MountLayoutDev = /*               */ 67108864;\n        var MountPassiveDev = /*              */ 134217728; // Groups of flags that are used in the commit phase to skip over trees that\n        // don't contain effects, by checking subtreeFlags.\n        var BeforeMutationMask = // flag logic (see #20043)\n        Update | Snapshot | 0;\n        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility | FormReset;\n        var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n        var PassiveMask = Passive$1 | Visibility | ChildDeletion; // Union of tags that don't get reset on clones.\n        // This allows certain concepts to persist without recalculating them,\n        // e.g. whether a subtree contains passive effects or portals.\n        var StaticMask = LayoutStatic | PassiveStatic | RefStatic | MaySuspendCommit;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n                }\n            }\n        }\n        var prefix;\n        function describeBuiltInComponentFrame(name) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || '';\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return '\\n' + prefix + name;\n            }\n        }\n        function describeDebugInfoFrame(name, env) {\n            return describeBuiltInComponentFrame(name + (env ? ' (' + env + ')' : ''));\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap$1();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return '';\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher = null;\n            {\n                previousDispatcher = ReactSharedInternals.H; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactSharedInternals.H = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, 'props', {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === 'object' && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === 'function') {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === 'string') {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                'name', {\n                    value: 'DetermineComponentFrameRoot'\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split('\\n');\n                    var controlLines = controlStack.split('\\n');\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes('<anonymous>')) {\n                                            _frame = _frame.replace('<anonymous>', fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === 'function') {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactSharedInternals.H = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : '';\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n            {\n                if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeClassComponentFrame(ctor) {\n            {\n                return describeNativeComponentFrame(ctor, true);\n            }\n        }\n        function describeFunctionComponentFrame(fn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        // TODO: Consider marking the whole bundle instead of these boundaries.\n        /** @noinline */ function callComponentInDEV(Component, props, secondArg) {\n            setIsRendering(true);\n            var result = Component(props, secondArg);\n            setIsRendering(false);\n            return result;\n        }\n        /** @noinline */ function callRenderInDEV(instance) {\n            setIsRendering(true);\n            var result = instance.render();\n            setIsRendering(false);\n            return result;\n        }\n        /** @noinline */ function callLazyInitInDEV(lazy) {\n            var payload = lazy._payload;\n            var init = lazy._init;\n            return init(payload);\n        }\n        function describeFiber(fiber) {\n            switch(fiber.tag){\n                case HostHoistable:\n                case HostSingleton:\n                case HostComponent:\n                    return describeBuiltInComponentFrame(fiber.type);\n                case LazyComponent:\n                    return describeBuiltInComponentFrame('Lazy');\n                case SuspenseComponent:\n                    return describeBuiltInComponentFrame('Suspense');\n                case SuspenseListComponent:\n                    return describeBuiltInComponentFrame('SuspenseList');\n                case FunctionComponent:\n                case SimpleMemoComponent:\n                    return describeFunctionComponentFrame(fiber.type);\n                case ForwardRef:\n                    return describeFunctionComponentFrame(fiber.type.render);\n                case ClassComponent:\n                    return describeClassComponentFrame(fiber.type);\n                default:\n                    return '';\n            }\n        }\n        function getStackByFiberInDevAndProd(workInProgress) {\n            try {\n                var info = '';\n                var node = workInProgress;\n                do {\n                    info += describeFiber(node);\n                    if (true) {\n                        // Add any Server Component stack frames in reverse order.\n                        var debugInfo = node._debugInfo;\n                        if (debugInfo) {\n                            for(var i = debugInfo.length - 1; i >= 0; i--){\n                                var entry = debugInfo[i];\n                                if (typeof entry.name === 'string') {\n                                    info += describeDebugInfoFrame(entry.name, entry.env);\n                                }\n                            }\n                        }\n                    } // $FlowFixMe[incompatible-type] we bail out when we get a null\n                    node = node.return;\n                }while (node);\n                return info;\n            } catch (x) {\n                return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n            }\n        }\n        var current = null;\n        var isRendering = false;\n        function getCurrentFiberStackInDev() {\n            {\n                if (current === null) {\n                    return '';\n                } // Safe because if current fiber exists, we are reconciling,\n                return getStackByFiberInDevAndProd(current);\n            }\n        }\n        function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {\n            {\n                var previousFiber = current;\n                setCurrentFiber(fiber);\n                try {\n                    if (enableOwnerStacks) ;\n                    return callback(arg0, arg1, arg2, arg3, arg4);\n                } finally{\n                    current = previousFiber;\n                }\n            }\n            // eslint-disable-next-line react-internal/prod-error-codes\n            throw new Error('runWithFiberInDEV should never be called in production. This is a bug in React.');\n        }\n        function resetCurrentFiber() {\n            {\n                ReactSharedInternals.getCurrentStack = null;\n                isRendering = false;\n            }\n            current = null;\n        }\n        function setCurrentFiber(fiber) {\n            {\n                ReactSharedInternals.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\n                isRendering = false;\n            }\n            current = fiber;\n        }\n        function setIsRendering(rendering) {\n            {\n                isRendering = rendering;\n            }\n        }\n        function getNearestMountedFiber(fiber) {\n            var node = fiber;\n            var nearestMounted = fiber;\n            if (!fiber.alternate) {\n                // If there is no alternate, this might be a new tree that isn't inserted\n                // yet. If it is, then it will have a pending insertion effect on it.\n                var nextNode = node;\n                do {\n                    node = nextNode;\n                    if ((node.flags & (Placement | Hydrating)) !== NoFlags$1) {\n                        // This is an insertion or in-progress hydration. The nearest possible\n                        // mounted fiber is the parent but we need to continue to figure out\n                        // if that one is still mounted.\n                        nearestMounted = node.return;\n                    } // $FlowFixMe[incompatible-type] we bail out when we get a null\n                    nextNode = node.return;\n                }while (nextNode);\n            } else {\n                while(node.return){\n                    node = node.return;\n                }\n            }\n            if (node.tag === HostRoot) {\n                // TODO: Check if this was a nested HostRoot when used with\n                // renderContainerIntoSubtree.\n                return nearestMounted;\n            } // If we didn't hit the root, that means that we're in an disconnected tree\n            // that has been unmounted.\n            return null;\n        }\n        function isMounted(component) {\n            {\n                var owner = current;\n                if (owner !== null && isRendering && owner.tag === ClassComponent) {\n                    var ownerFiber = owner;\n                    var instance = ownerFiber.stateNode;\n                    if (!instance._warnedAboutRefsInRender) {\n                        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n                    }\n                    instance._warnedAboutRefsInRender = true;\n                }\n            }\n            var fiber = get(component);\n            if (!fiber) {\n                return false;\n            }\n            return getNearestMountedFiber(fiber) === fiber;\n        }\n        function assertIsMounted(fiber) {\n            if (getNearestMountedFiber(fiber) !== fiber) {\n                throw new Error('Unable to find node on an unmounted component.');\n            }\n        }\n        function findCurrentFiberUsingSlowPath(fiber) {\n            var alternate = fiber.alternate;\n            if (!alternate) {\n                // If there is no alternate, then we only need to check if it is mounted.\n                var nearestMounted = getNearestMountedFiber(fiber);\n                if (nearestMounted === null) {\n                    throw new Error('Unable to find node on an unmounted component.');\n                }\n                if (nearestMounted !== fiber) {\n                    return null;\n                }\n                return fiber;\n            } // If we have two possible branches, we'll walk backwards up to the root\n            // to see what path the root points to. On the way we may hit one of the\n            // special cases and we'll deal with them.\n            var a = fiber;\n            var b = alternate;\n            while(true){\n                var parentA = a.return;\n                if (parentA === null) {\n                    break;\n                }\n                var parentB = parentA.alternate;\n                if (parentB === null) {\n                    // There is no alternate. This is an unusual case. Currently, it only\n                    // happens when a Suspense component is hidden. An extra fragment fiber\n                    // is inserted in between the Suspense fiber and its children. Skip\n                    // over this extra fragment fiber and proceed to the next parent.\n                    var nextParent = parentA.return;\n                    if (nextParent !== null) {\n                        a = b = nextParent;\n                        continue;\n                    } // If there's no parent, we're at the root.\n                    break;\n                } // If both copies of the parent fiber point to the same child, we can\n                // assume that the child is current. This happens when we bailout on low\n                // priority: the bailed out fiber's child reuses the current child.\n                if (parentA.child === parentB.child) {\n                    var child = parentA.child;\n                    while(child){\n                        if (child === a) {\n                            // We've determined that A is the current branch.\n                            assertIsMounted(parentA);\n                            return fiber;\n                        }\n                        if (child === b) {\n                            // We've determined that B is the current branch.\n                            assertIsMounted(parentA);\n                            return alternate;\n                        }\n                        child = child.sibling;\n                    } // We should never have an alternate for any mounting node. So the only\n                    // way this could possibly happen is if this was unmounted, if at all.\n                    throw new Error('Unable to find node on an unmounted component.');\n                }\n                if (a.return !== b.return) {\n                    // The return pointer of A and the return pointer of B point to different\n                    // fibers. We assume that return pointers never criss-cross, so A must\n                    // belong to the child set of A.return, and B must belong to the child\n                    // set of B.return.\n                    a = parentA;\n                    b = parentB;\n                } else {\n                    // The return pointers point to the same fiber. We'll have to use the\n                    // default, slow path: scan the child sets of each parent alternate to see\n                    // which child belongs to which set.\n                    //\n                    // Search parent A's child set\n                    var didFindChild = false;\n                    var _child = parentA.child;\n                    while(_child){\n                        if (_child === a) {\n                            didFindChild = true;\n                            a = parentA;\n                            b = parentB;\n                            break;\n                        }\n                        if (_child === b) {\n                            didFindChild = true;\n                            b = parentA;\n                            a = parentB;\n                            break;\n                        }\n                        _child = _child.sibling;\n                    }\n                    if (!didFindChild) {\n                        // Search parent B's child set\n                        _child = parentB.child;\n                        while(_child){\n                            if (_child === a) {\n                                didFindChild = true;\n                                a = parentB;\n                                b = parentA;\n                                break;\n                            }\n                            if (_child === b) {\n                                didFindChild = true;\n                                b = parentB;\n                                a = parentA;\n                                break;\n                            }\n                            _child = _child.sibling;\n                        }\n                        if (!didFindChild) {\n                            throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n                        }\n                    }\n                }\n                if (a.alternate !== b) {\n                    throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n                }\n            } // If the root is not a host container, we're in a disconnected tree. I.e.\n            // unmounted.\n            if (a.tag !== HostRoot) {\n                throw new Error('Unable to find node on an unmounted component.');\n            }\n            if (a.stateNode.current === a) {\n                // We've determined that A is the current branch.\n                return fiber;\n            } // Otherwise B has to be current branch.\n            return alternate;\n        }\n        function findCurrentHostFiber(parent) {\n            var currentParent = findCurrentFiberUsingSlowPath(parent);\n            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n        }\n        function findCurrentHostFiberImpl(node) {\n            // Next we'll drill down this component to find the first HostComponent/Text.\n            var tag = node.tag;\n            if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {\n                return node;\n            }\n            var child = node.child;\n            while(child !== null){\n                var match = findCurrentHostFiberImpl(child);\n                if (match !== null) {\n                    return match;\n                }\n                child = child.sibling;\n            }\n            return null;\n        }\n        function findCurrentHostFiberWithNoPortals(parent) {\n            var currentParent = findCurrentFiberUsingSlowPath(parent);\n            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\n        }\n        function findCurrentHostFiberWithNoPortalsImpl(node) {\n            // Next we'll drill down this component to find the first HostComponent/Text.\n            var tag = node.tag;\n            if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {\n                return node;\n            }\n            var child = node.child;\n            while(child !== null){\n                if (child.tag !== HostPortal) {\n                    var match = findCurrentHostFiberWithNoPortalsImpl(child);\n                    if (match !== null) {\n                        return match;\n                    }\n                }\n                child = child.sibling;\n            }\n            return null;\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        // This is a host config that's used for the `react-reconciler` package on npm.\n        // It is only used by third-party renderers.\n        //\n        // Its API lets you pass the host config as an argument.\n        // However, inside the `react-reconciler` we treat host config as a module.\n        // This file is a shim between two worlds.\n        //\n        // It works because the `react-reconciler` bundle is wrapped in something like:\n        //\n        // module.exports = function ($$$config) {\n        //   /* reconciler code */\n        // }\n        //\n        // So `$$$config` looks like a global variable, but it's\n        // really an argument to a top-level wrapping function.\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        var getPublicInstance = $$$config.getPublicInstance;\n        var getRootHostContext = $$$config.getRootHostContext;\n        var getChildHostContext = $$$config.getChildHostContext;\n        var prepareForCommit = $$$config.prepareForCommit;\n        var resetAfterCommit = $$$config.resetAfterCommit;\n        var createInstance = $$$config.createInstance;\n        var appendInitialChild = $$$config.appendInitialChild;\n        var finalizeInitialChildren = $$$config.finalizeInitialChildren;\n        var shouldSetTextContent = $$$config.shouldSetTextContent;\n        var createTextInstance = $$$config.createTextInstance;\n        var scheduleTimeout = $$$config.scheduleTimeout;\n        var cancelTimeout = $$$config.cancelTimeout;\n        var noTimeout = $$$config.noTimeout;\n        var isPrimaryRenderer = $$$config.isPrimaryRenderer;\n        $$$config.warnsIfNotActing;\n        var supportsMutation = $$$config.supportsMutation;\n        var supportsPersistence = $$$config.supportsPersistence;\n        var supportsHydration = $$$config.supportsHydration;\n        var getInstanceFromNode = $$$config.getInstanceFromNode;\n        $$$config.beforeActiveInstanceBlur;\n        $$$config.afterActiveInstanceBlur;\n        var preparePortalMount = $$$config.preparePortalMount;\n        $$$config.prepareScopeUpdate;\n        $$$config.getInstanceFromScope;\n        var setCurrentUpdatePriority = $$$config.setCurrentUpdatePriority;\n        var getCurrentUpdatePriority = $$$config.getCurrentUpdatePriority;\n        var resolveUpdatePriority = $$$config.resolveUpdatePriority;\n        var shouldAttemptEagerTransition = $$$config.shouldAttemptEagerTransition;\n        var detachDeletedInstance = $$$config.detachDeletedInstance;\n        $$$config.requestPostPaintCallback;\n        var maySuspendCommit = $$$config.maySuspendCommit;\n        var preloadInstance = $$$config.preloadInstance;\n        var startSuspendingCommit = $$$config.startSuspendingCommit;\n        var suspendInstance = $$$config.suspendInstance;\n        var waitForCommitToBeReady = $$$config.waitForCommitToBeReady;\n        var NotPendingTransition = $$$config.NotPendingTransition;\n        var resetFormInstance = $$$config.resetFormInstance; // -------------------\n        //      Microtasks\n        //     (optional)\n        // -------------------\n        var supportsMicrotasks = $$$config.supportsMicrotasks;\n        var scheduleMicrotask = $$$config.scheduleMicrotask; // -------------------\n        //      Test selectors\n        //     (optional)\n        // -------------------\n        var supportsTestSelectors = $$$config.supportsTestSelectors;\n        var findFiberRoot = $$$config.findFiberRoot;\n        var getBoundingRect = $$$config.getBoundingRect;\n        var getTextContent = $$$config.getTextContent;\n        var isHiddenSubtree = $$$config.isHiddenSubtree;\n        var matchAccessibilityRole = $$$config.matchAccessibilityRole;\n        var setFocusIfFocusable = $$$config.setFocusIfFocusable;\n        var setupIntersectionObserver = $$$config.setupIntersectionObserver; // -------------------\n        //      Mutation\n        //     (optional)\n        // -------------------\n        var appendChild = $$$config.appendChild;\n        var appendChildToContainer = $$$config.appendChildToContainer;\n        var commitTextUpdate = $$$config.commitTextUpdate;\n        var commitMount = $$$config.commitMount;\n        var commitUpdate = $$$config.commitUpdate;\n        var insertBefore = $$$config.insertBefore;\n        var insertInContainerBefore = $$$config.insertInContainerBefore;\n        var removeChild = $$$config.removeChild;\n        var removeChildFromContainer = $$$config.removeChildFromContainer;\n        var resetTextContent = $$$config.resetTextContent;\n        var hideInstance = $$$config.hideInstance;\n        var hideTextInstance = $$$config.hideTextInstance;\n        var unhideInstance = $$$config.unhideInstance;\n        var unhideTextInstance = $$$config.unhideTextInstance;\n        var clearContainer = $$$config.clearContainer; // -------------------\n        //     Persistence\n        //     (optional)\n        // -------------------\n        var cloneInstance = $$$config.cloneInstance;\n        var createContainerChildSet = $$$config.createContainerChildSet;\n        var appendChildToContainerChildSet = $$$config.appendChildToContainerChildSet;\n        var finalizeContainerChildren = $$$config.finalizeContainerChildren;\n        var replaceContainerChildren = $$$config.replaceContainerChildren;\n        var cloneHiddenInstance = $$$config.cloneHiddenInstance;\n        var cloneHiddenTextInstance = $$$config.cloneHiddenTextInstance; // -------------------\n        //     Hydration\n        //     (optional)\n        // -------------------\n        var isSuspenseInstancePending = $$$config.isSuspenseInstancePending;\n        var isSuspenseInstanceFallback = $$$config.isSuspenseInstanceFallback;\n        var getSuspenseInstanceFallbackErrorDetails = $$$config.getSuspenseInstanceFallbackErrorDetails;\n        var registerSuspenseInstanceRetry = $$$config.registerSuspenseInstanceRetry;\n        var canHydrateFormStateMarker = $$$config.canHydrateFormStateMarker;\n        var isFormStateMarkerMatching = $$$config.isFormStateMarkerMatching;\n        var getNextHydratableSibling = $$$config.getNextHydratableSibling;\n        var getFirstHydratableChild = $$$config.getFirstHydratableChild;\n        var getFirstHydratableChildWithinContainer = $$$config.getFirstHydratableChildWithinContainer;\n        var getFirstHydratableChildWithinSuspenseInstance = $$$config.getFirstHydratableChildWithinSuspenseInstance;\n        var canHydrateInstance = $$$config.canHydrateInstance;\n        var canHydrateTextInstance = $$$config.canHydrateTextInstance;\n        var canHydrateSuspenseInstance = $$$config.canHydrateSuspenseInstance;\n        var hydrateInstance = $$$config.hydrateInstance;\n        var hydrateTextInstance = $$$config.hydrateTextInstance;\n        var hydrateSuspenseInstance = $$$config.hydrateSuspenseInstance;\n        var getNextHydratableInstanceAfterSuspenseInstance = $$$config.getNextHydratableInstanceAfterSuspenseInstance;\n        var commitHydratedContainer = $$$config.commitHydratedContainer;\n        var commitHydratedSuspenseInstance = $$$config.commitHydratedSuspenseInstance;\n        var clearSuspenseBoundary = $$$config.clearSuspenseBoundary;\n        var clearSuspenseBoundaryFromContainer = $$$config.clearSuspenseBoundaryFromContainer;\n        var shouldDeleteUnhydratedTailInstances = $$$config.shouldDeleteUnhydratedTailInstances;\n        var diffHydratedPropsForDevWarnings = $$$config.diffHydratedPropsForDevWarnings;\n        var diffHydratedTextForDevWarnings = $$$config.diffHydratedTextForDevWarnings;\n        var describeHydratableInstanceForDevWarnings = $$$config.describeHydratableInstanceForDevWarnings;\n        var validateHydratableInstance = $$$config.validateHydratableInstance;\n        var validateHydratableTextInstance = $$$config.validateHydratableTextInstance; // -------------------\n        //     Resources\n        //     (optional)\n        // -------------------\n        // eslint-disable-line no-undef\n        var supportsResources = $$$config.supportsResources;\n        var isHostHoistableType = $$$config.isHostHoistableType;\n        var getHoistableRoot = $$$config.getHoistableRoot;\n        var getResource = $$$config.getResource;\n        var acquireResource = $$$config.acquireResource;\n        var releaseResource = $$$config.releaseResource;\n        var hydrateHoistable = $$$config.hydrateHoistable;\n        var mountHoistable = $$$config.mountHoistable;\n        var unmountHoistable = $$$config.unmountHoistable;\n        var createHoistableInstance = $$$config.createHoistableInstance;\n        var prepareToCommitHoistables = $$$config.prepareToCommitHoistables;\n        var mayResourceSuspendCommit = $$$config.mayResourceSuspendCommit;\n        var preloadResource = $$$config.preloadResource;\n        var suspendResource = $$$config.suspendResource; // -------------------\n        //     Singletons\n        //     (optional)\n        // -------------------\n        var supportsSingletons = $$$config.supportsSingletons;\n        var resolveSingletonInstance = $$$config.resolveSingletonInstance;\n        var clearSingleton = $$$config.clearSingleton;\n        var acquireSingletonInstance = $$$config.acquireSingletonInstance;\n        var releaseSingletonInstance = $$$config.releaseSingletonInstance;\n        var isHostSingletonType = $$$config.isHostSingletonType;\n        var valueStack = [];\n        var fiberStack;\n        {\n            fiberStack = [];\n        }\n        var index = -1;\n        function createCursor(defaultValue) {\n            return {\n                current: defaultValue\n            };\n        }\n        function pop(cursor, fiber) {\n            if (index < 0) {\n                {\n                    error('Unexpected pop.');\n                }\n                return;\n            }\n            {\n                if (fiber !== fiberStack[index]) {\n                    error('Unexpected Fiber popped.');\n                }\n            }\n            cursor.current = valueStack[index];\n            valueStack[index] = null;\n            {\n                fiberStack[index] = null;\n            }\n            index--;\n        }\n        function push(cursor, value, fiber) {\n            index++;\n            valueStack[index] = cursor.current;\n            {\n                fiberStack[index] = fiber;\n            }\n            cursor.current = value;\n        }\n        var emptyContextObject = {};\n        {\n            Object.freeze(emptyContextObject);\n        }\n        function hasContextChanged() {\n            {\n                return false;\n            }\n        }\n        function isContextProvider(type) {\n            {\n                return false;\n            }\n        }\n        function processChildContext(fiber, type, parentContext) {\n            {\n                return parentContext;\n            }\n        }\n        function findCurrentUnmaskedContext(fiber) {\n            {\n                return emptyContextObject;\n            }\n        }\n        // We use the existence of the state object as an indicator that the component\n        // is hidden.\n        var OffscreenVisible = /*                     */ 1;\n        var OffscreenDetached = /*                    */ 2;\n        var OffscreenPassiveEffectsConnected = /*     */ 4;\n        function isOffscreenManual(offscreenFiber) {\n            return offscreenFiber.memoizedProps !== null && offscreenFiber.memoizedProps.mode === 'manual';\n        }\n        var NoMode = /*                         */ 0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n        var ConcurrentMode = /*                 */ 1;\n        var ProfileMode = /*                    */ 2;\n        var StrictLegacyMode = /*               */ 8;\n        var StrictEffectsMode = /*              */ 16;\n        var NoStrictPassiveEffectsMode = /*     */ 64;\n        // TODO: This is pretty well supported by browsers. Maybe we can drop it.\n        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n        // Based on:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n        var log$1 = Math.log;\n        var LN2 = Math.LN2;\n        function clz32Fallback(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log$1(asUint) / LN2 | 0) | 0;\n        }\n        // If those values are changed that package should be rebuilt and redeployed.\n        var TotalLanes = 31;\n        var NoLanes = /*                        */ 0;\n        var NoLane = /*                          */ 0;\n        var SyncHydrationLane = /*               */ 1;\n        var SyncLane = /*                        */ 2;\n        var SyncLaneIndex = 1;\n        var InputContinuousHydrationLane = /*    */ 4;\n        var InputContinuousLane = /*             */ 8;\n        var DefaultHydrationLane = /*            */ 16;\n        var DefaultLane = /*                     */ 32;\n        var SyncUpdateLanes = SyncLane | InputContinuousLane | DefaultLane;\n        var TransitionHydrationLane = /*                */ 64;\n        var TransitionLanes = /*                       */ 4194176;\n        var TransitionLane1 = /*                        */ 128;\n        var TransitionLane2 = /*                        */ 256;\n        var TransitionLane3 = /*                        */ 512;\n        var TransitionLane4 = /*                        */ 1024;\n        var TransitionLane5 = /*                        */ 2048;\n        var TransitionLane6 = /*                        */ 4096;\n        var TransitionLane7 = /*                        */ 8192;\n        var TransitionLane8 = /*                        */ 16384;\n        var TransitionLane9 = /*                        */ 32768;\n        var TransitionLane10 = /*                       */ 65536;\n        var TransitionLane11 = /*                       */ 131072;\n        var TransitionLane12 = /*                       */ 262144;\n        var TransitionLane13 = /*                       */ 524288;\n        var TransitionLane14 = /*                       */ 1048576;\n        var TransitionLane15 = /*                       */ 2097152;\n        var RetryLanes = /*                            */ 62914560;\n        var RetryLane1 = /*                             */ 4194304;\n        var RetryLane2 = /*                             */ 8388608;\n        var RetryLane3 = /*                             */ 16777216;\n        var RetryLane4 = /*                             */ 33554432;\n        var SomeRetryLane = RetryLane1;\n        var SelectiveHydrationLane = /*          */ 67108864;\n        var NonIdleLanes = /*                          */ 134217727;\n        var IdleHydrationLane = /*               */ 134217728;\n        var IdleLane = /*                        */ 268435456;\n        var OffscreenLane = /*                   */ 536870912;\n        var DeferredLane = /*                    */ 1073741824; // Any lane that might schedule an update. This is used to detect infinite\n        // update loops, so it doesn't include hydration lanes or retries.\n        var UpdateLanes = SyncLane | InputContinuousLane | DefaultLane | TransitionLanes; // This function is used for the experimental timeline (react-devtools-timeline)\n        // It should be kept in sync with the Lanes values above.\n        function getLabelForLane(lane) {\n            {\n                if (lane & SyncHydrationLane) {\n                    return 'SyncHydrationLane';\n                }\n                if (lane & SyncLane) {\n                    return 'Sync';\n                }\n                if (lane & InputContinuousHydrationLane) {\n                    return 'InputContinuousHydration';\n                }\n                if (lane & InputContinuousLane) {\n                    return 'InputContinuous';\n                }\n                if (lane & DefaultHydrationLane) {\n                    return 'DefaultHydration';\n                }\n                if (lane & DefaultLane) {\n                    return 'Default';\n                }\n                if (lane & TransitionHydrationLane) {\n                    return 'TransitionHydration';\n                }\n                if (lane & TransitionLanes) {\n                    return 'Transition';\n                }\n                if (lane & RetryLanes) {\n                    return 'Retry';\n                }\n                if (lane & SelectiveHydrationLane) {\n                    return 'SelectiveHydration';\n                }\n                if (lane & IdleHydrationLane) {\n                    return 'IdleHydration';\n                }\n                if (lane & IdleLane) {\n                    return 'Idle';\n                }\n                if (lane & OffscreenLane) {\n                    return 'Offscreen';\n                }\n                if (lane & DeferredLane) {\n                    return 'Deferred';\n                }\n            }\n        }\n        var NoTimestamp = -1;\n        var nextTransitionLane = TransitionLane1;\n        var nextRetryLane = RetryLane1;\n        function getHighestPriorityLanes(lanes) {\n            {\n                var pendingSyncLanes = lanes & SyncUpdateLanes;\n                if (pendingSyncLanes !== 0) {\n                    return pendingSyncLanes;\n                }\n            }\n            switch(getHighestPriorityLane(lanes)){\n                case SyncHydrationLane:\n                    return SyncHydrationLane;\n                case SyncLane:\n                    return SyncLane;\n                case InputContinuousHydrationLane:\n                    return InputContinuousHydrationLane;\n                case InputContinuousLane:\n                    return InputContinuousLane;\n                case DefaultHydrationLane:\n                    return DefaultHydrationLane;\n                case DefaultLane:\n                    return DefaultLane;\n                case TransitionHydrationLane:\n                    return TransitionHydrationLane;\n                case TransitionLane1:\n                case TransitionLane2:\n                case TransitionLane3:\n                case TransitionLane4:\n                case TransitionLane5:\n                case TransitionLane6:\n                case TransitionLane7:\n                case TransitionLane8:\n                case TransitionLane9:\n                case TransitionLane10:\n                case TransitionLane11:\n                case TransitionLane12:\n                case TransitionLane13:\n                case TransitionLane14:\n                case TransitionLane15:\n                    return lanes & TransitionLanes;\n                case RetryLane1:\n                case RetryLane2:\n                case RetryLane3:\n                case RetryLane4:\n                    return lanes & RetryLanes;\n                case SelectiveHydrationLane:\n                    return SelectiveHydrationLane;\n                case IdleHydrationLane:\n                    return IdleHydrationLane;\n                case IdleLane:\n                    return IdleLane;\n                case OffscreenLane:\n                    return OffscreenLane;\n                case DeferredLane:\n                    // This shouldn't be reachable because deferred work is always entangled\n                    // with something else.\n                    return NoLanes;\n                default:\n                    {\n                        error('Should have found matching lanes. This is a bug in React.');\n                    }\n                    return lanes;\n            }\n        }\n        function getNextLanes(root, wipLanes) {\n            // Early bailout if there's no pending work left.\n            var pendingLanes = root.pendingLanes;\n            if (pendingLanes === NoLanes) {\n                return NoLanes;\n            }\n            var nextLanes = NoLanes;\n            var suspendedLanes = root.suspendedLanes;\n            var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n            // even if the work is suspended.\n            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n            if (nonIdlePendingLanes !== NoLanes) {\n                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n                if (nonIdleUnblockedLanes !== NoLanes) {\n                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n                } else {\n                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n                    if (nonIdlePingedLanes !== NoLanes) {\n                        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n                    }\n                }\n            } else {\n                // The only remaining work is Idle.\n                var unblockedLanes = pendingLanes & ~suspendedLanes;\n                if (unblockedLanes !== NoLanes) {\n                    nextLanes = getHighestPriorityLanes(unblockedLanes);\n                } else {\n                    if (pingedLanes !== NoLanes) {\n                        nextLanes = getHighestPriorityLanes(pingedLanes);\n                    }\n                }\n            }\n            if (nextLanes === NoLanes) {\n                // This should only be reachable if we're suspended\n                // TODO: Consider warning in this path if a fallback timer is not scheduled.\n                return NoLanes;\n            } // If we're already in the middle of a render, switching lanes will interrupt\n            // it and we'll lose our progress. We should only do this if the new lanes are\n            // higher priority.\n            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n            // bother waiting until the root is complete.\n            (wipLanes & suspendedLanes) === NoLanes) {\n                var nextLane = getHighestPriorityLane(nextLanes);\n                var wipLane = getHighestPriorityLane(wipLanes);\n                if (// one. This works because the bits decrease in priority as you go left.\n                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n                // only difference between default updates and transition updates is that\n                // default updates do not support refresh transitions.\n                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n                    // Keep working on the existing in-progress tree. Do not interrupt.\n                    return wipLanes;\n                }\n            }\n            return nextLanes;\n        }\n        function getEntangledLanes(root, renderLanes) {\n            var entangledLanes = renderLanes;\n            if ((entangledLanes & InputContinuousLane) !== NoLanes) {\n                // When updates are sync by default, we entangle continuous priority updates\n                // and default updates, so they render in the same batch. The only reason\n                // they use separate lanes is because continuous updates should interrupt\n                // transitions, but default updates should not.\n                entangledLanes |= entangledLanes & DefaultLane;\n            } // Check for entangled lanes and add them to the batch.\n            //\n            // A lane is said to be entangled with another when it's not allowed to render\n            // in a batch that does not also include the other lane. Typically we do this\n            // when multiple updates have the same source, and we only want to respond to\n            // the most recent event from that source.\n            //\n            // Note that we apply entanglements *after* checking for partial work above.\n            // This means that if a lane is entangled during an interleaved event while\n            // it's already rendering, we won't interrupt it. This is intentional, since\n            // entanglement is usually \"best effort\": we'll try our best to render the\n            // lanes in the same batch, but it's not worth throwing out partially\n            // completed work in order to do it.\n            // TODO: Reconsider this. The counter-argument is that the partial work\n            // represents an intermediate state, which we don't want to show to the user.\n            // And by spending extra time finishing it, we're increasing the amount of\n            // time it takes to show the final state, which is what they are actually\n            // waiting for.\n            //\n            // For those exceptions where entanglement is semantically important,\n            // we should ensure that there is no partial work at the\n            // time we apply the entanglement.\n            var allEntangledLanes = root.entangledLanes;\n            if (allEntangledLanes !== NoLanes) {\n                var entanglements = root.entanglements;\n                var lanes = entangledLanes & allEntangledLanes;\n                while(lanes > 0){\n                    var index = pickArbitraryLaneIndex(lanes);\n                    var lane = 1 << index;\n                    entangledLanes |= entanglements[index];\n                    lanes &= ~lane;\n                }\n            }\n            return entangledLanes;\n        }\n        function computeExpirationTime(lane, currentTime) {\n            switch(lane){\n                case SyncHydrationLane:\n                case SyncLane:\n                case InputContinuousHydrationLane:\n                case InputContinuousLane:\n                    // User interactions should expire slightly more quickly.\n                    //\n                    // NOTE: This is set to the corresponding constant as in Scheduler.js.\n                    // When we made it larger, a product metric in www regressed, suggesting\n                    // there's a user interaction that's being starved by a series of\n                    // synchronous updates. If that theory is correct, the proper solution is\n                    // to fix the starvation. However, this scenario supports the idea that\n                    // expiration times are an important safeguard when starvation\n                    // does happen.\n                    return currentTime + syncLaneExpirationMs;\n                case DefaultHydrationLane:\n                case DefaultLane:\n                case TransitionHydrationLane:\n                case TransitionLane1:\n                case TransitionLane2:\n                case TransitionLane3:\n                case TransitionLane4:\n                case TransitionLane5:\n                case TransitionLane6:\n                case TransitionLane7:\n                case TransitionLane8:\n                case TransitionLane9:\n                case TransitionLane10:\n                case TransitionLane11:\n                case TransitionLane12:\n                case TransitionLane13:\n                case TransitionLane14:\n                case TransitionLane15:\n                    return currentTime + transitionLaneExpirationMs;\n                case RetryLane1:\n                case RetryLane2:\n                case RetryLane3:\n                case RetryLane4:\n                    // TODO: Retries should be allowed to expire if they are CPU bound for\n                    // too long, but when I made this change it caused a spike in browser\n                    // crashes. There must be some other underlying bug; not super urgent but\n                    // ideally should figure out why and fix it. Unfortunately we don't have\n                    // a repro for the crashes, only detected via production metrics.\n                    return NoTimestamp;\n                case SelectiveHydrationLane:\n                case IdleHydrationLane:\n                case IdleLane:\n                case OffscreenLane:\n                case DeferredLane:\n                    // Anything idle priority or lower should never expire.\n                    return NoTimestamp;\n                default:\n                    {\n                        error('Should have found matching lanes. This is a bug in React.');\n                    }\n                    return NoTimestamp;\n            }\n        }\n        function markStarvedLanesAsExpired(root, currentTime) {\n            // TODO: This gets called every time we yield. We can optimize by storing\n            // the earliest expiration time on the root. Then use that to quickly bail out\n            // of this function.\n            var pendingLanes = root.pendingLanes;\n            var suspendedLanes = root.suspendedLanes;\n            var pingedLanes = root.pingedLanes;\n            var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n            // expiration time. If so, we'll assume the update is being starved and mark\n            // it as expired to force it to finish.\n            // TODO: We should be able to replace this with upgradePendingLanesToSync\n            //\n            // We exclude retry lanes because those must always be time sliced, in order\n            // to unwrap uncached promises.\n            // TODO: Write a test for this\n            var lanes = pendingLanes & ~RetryLanes;\n            while(lanes > 0){\n                var index = pickArbitraryLaneIndex(lanes);\n                var lane = 1 << index;\n                var expirationTime = expirationTimes[index];\n                if (expirationTime === NoTimestamp) {\n                    // Found a pending lane with no expiration time. If it's not suspended, or\n                    // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n                    // using the current time.\n                    if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n                        // Assumes timestamps are monotonically increasing.\n                        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n                    }\n                } else if (expirationTime <= currentTime) {\n                    // This lane expired\n                    root.expiredLanes |= lane;\n                }\n                lanes &= ~lane;\n            }\n        } // This returns the highest priority pending lanes regardless of whether they\n        // are suspended.\n        function getHighestPriorityPendingLanes(root) {\n            return getHighestPriorityLanes(root.pendingLanes);\n        }\n        function getLanesToRetrySynchronouslyOnError(root, originallyAttemptedLanes) {\n            if (root.errorRecoveryDisabledLanes & originallyAttemptedLanes) {\n                // The error recovery mechanism is disabled until these lanes are cleared.\n                return NoLanes;\n            }\n            var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n            if (everythingButOffscreen !== NoLanes) {\n                return everythingButOffscreen;\n            }\n            if (everythingButOffscreen & OffscreenLane) {\n                return OffscreenLane;\n            }\n            return NoLanes;\n        }\n        function includesSyncLane(lanes) {\n            return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;\n        }\n        function includesNonIdleWork(lanes) {\n            return (lanes & NonIdleLanes) !== NoLanes;\n        }\n        function includesOnlyRetries(lanes) {\n            return (lanes & RetryLanes) === lanes;\n        }\n        function includesOnlyNonUrgentLanes(lanes) {\n            // TODO: Should hydration lanes be included here? This function is only\n            // used in `updateDeferredValueImpl`.\n            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n            return (lanes & UrgentLanes) === NoLanes;\n        }\n        function includesOnlyTransitions(lanes) {\n            return (lanes & TransitionLanes) === lanes;\n        }\n        function includesBlockingLane(root, lanes) {\n            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n            return (lanes & SyncDefaultLanes) !== NoLanes;\n        }\n        function includesExpiredLane(root, lanes) {\n            // This is a separate check from includesBlockingLane because a lane can\n            // expire after a render has already started.\n            return (lanes & root.expiredLanes) !== NoLanes;\n        }\n        function isTransitionLane(lane) {\n            return (lane & TransitionLanes) !== NoLanes;\n        }\n        function claimNextTransitionLane() {\n            // Cycle through the lanes, assigning each new transition to the next lane.\n            // In most cases, this means every transition gets its own lane, until we\n            // run out of lanes and cycle back to the beginning.\n            var lane = nextTransitionLane;\n            nextTransitionLane <<= 1;\n            if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n                nextTransitionLane = TransitionLane1;\n            }\n            return lane;\n        }\n        function claimNextRetryLane() {\n            var lane = nextRetryLane;\n            nextRetryLane <<= 1;\n            if ((nextRetryLane & RetryLanes) === NoLanes) {\n                nextRetryLane = RetryLane1;\n            }\n            return lane;\n        }\n        function getHighestPriorityLane(lanes) {\n            return lanes & -lanes;\n        }\n        function pickArbitraryLane(lanes) {\n            // This wrapper function gets inlined. Only exists so to communicate that it\n            // doesn't matter which bit is selected; you can pick any bit without\n            // affecting the algorithms where its used. Here I'm using\n            // getHighestPriorityLane because it requires the fewest operations.\n            return getHighestPriorityLane(lanes);\n        }\n        function pickArbitraryLaneIndex(lanes) {\n            return 31 - clz32(lanes);\n        }\n        function laneToIndex(lane) {\n            return pickArbitraryLaneIndex(lane);\n        }\n        function includesSomeLane(a, b) {\n            return (a & b) !== NoLanes;\n        }\n        function isSubsetOfLanes(set, subset) {\n            return (set & subset) === subset;\n        }\n        function mergeLanes(a, b) {\n            return a | b;\n        }\n        function removeLanes(set, subset) {\n            return set & ~subset;\n        }\n        function intersectLanes(a, b) {\n            return a & b;\n        } // Seems redundant, but it changes the type from a single lane (used for\n        // updates) to a group of lanes (used for flushing work).\n        function laneToLanes(lane) {\n            return lane;\n        }\n        function higherPriorityLane(a, b) {\n            // This works because the bit ranges decrease in priority as you go left.\n            return a !== NoLane && a < b ? a : b;\n        }\n        function createLaneMap(initial) {\n            // Intentionally pushing one by one.\n            // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n            var laneMap = [];\n            for(var i = 0; i < TotalLanes; i++){\n                laneMap.push(initial);\n            }\n            return laneMap;\n        }\n        function markRootUpdated$1(root, updateLane) {\n            root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n            // could unblock them. Clear the suspended lanes so that we can try rendering\n            // them again.\n            //\n            // TODO: We really only need to unsuspend only lanes that are in the\n            // `subtreeLanes` of the updated fiber, or the update lanes of the return\n            // path. This would exclude suspended updates in an unrelated sibling tree,\n            // since there's no way for this update to unblock it.\n            //\n            // We don't do this if the incoming update is idle, because we never process\n            // idle updates until after all the regular updates have finished; there's no\n            // way it could unblock a transition.\n            if (updateLane !== IdleLane) {\n                root.suspendedLanes = NoLanes;\n                root.pingedLanes = NoLanes;\n            }\n        }\n        function markRootSuspended$1(root, suspendedLanes, spawnedLane) {\n            root.suspendedLanes |= suspendedLanes;\n            root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n            var expirationTimes = root.expirationTimes;\n            var lanes = suspendedLanes;\n            while(lanes > 0){\n                var index = pickArbitraryLaneIndex(lanes);\n                var lane = 1 << index;\n                expirationTimes[index] = NoTimestamp;\n                lanes &= ~lane;\n            }\n            if (spawnedLane !== NoLane) {\n                markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);\n            }\n        }\n        function markRootPinged$1(root, pingedLanes) {\n            root.pingedLanes |= root.suspendedLanes & pingedLanes;\n        }\n        function markRootFinished(root, remainingLanes, spawnedLane) {\n            var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n            root.pendingLanes = remainingLanes; // Let's try everything again\n            root.suspendedLanes = NoLanes;\n            root.pingedLanes = NoLanes;\n            root.expiredLanes &= remainingLanes;\n            root.entangledLanes &= remainingLanes;\n            root.errorRecoveryDisabledLanes &= remainingLanes;\n            root.shellSuspendCounter = 0;\n            var entanglements = root.entanglements;\n            var expirationTimes = root.expirationTimes;\n            var hiddenUpdates = root.hiddenUpdates; // Clear the lanes that no longer have pending work\n            var lanes = noLongerPendingLanes;\n            while(lanes > 0){\n                var index = pickArbitraryLaneIndex(lanes);\n                var lane = 1 << index;\n                entanglements[index] = NoLanes;\n                expirationTimes[index] = NoTimestamp;\n                var hiddenUpdatesForLane = hiddenUpdates[index];\n                if (hiddenUpdatesForLane !== null) {\n                    hiddenUpdates[index] = null; // \"Hidden\" updates are updates that were made to a hidden component. They\n                    // have special logic associated with them because they may be entangled\n                    // with updates that occur outside that tree. But once the outer tree\n                    // commits, they behave like regular updates.\n                    for(var i = 0; i < hiddenUpdatesForLane.length; i++){\n                        var update = hiddenUpdatesForLane[i];\n                        if (update !== null) {\n                            update.lane &= ~OffscreenLane;\n                        }\n                    }\n                }\n                lanes &= ~lane;\n            }\n            if (spawnedLane !== NoLane) {\n                markSpawnedDeferredLane(root, spawnedLane, // to entangle the spawned task with the parent task.\n                NoLanes);\n            }\n        }\n        function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {\n            // This render spawned a deferred task. Mark it as pending.\n            root.pendingLanes |= spawnedLane;\n            root.suspendedLanes &= ~spawnedLane; // Entangle the spawned lane with the DeferredLane bit so that we know it\n            // was the result of another render. This lets us avoid a useDeferredValue\n            // waterfall — only the first level will defer.\n            var spawnedLaneIndex = laneToIndex(spawnedLane);\n            root.entangledLanes |= spawnedLane;\n            root.entanglements[spawnedLaneIndex] |= DeferredLane | // If the parent render task suspended, we must also entangle those lanes\n            // with the spawned task, so that the deferred task includes all the same\n            // updates that the parent task did. We can exclude any lane that is not\n            // used for updates (e.g. Offscreen).\n            entangledLanes & UpdateLanes;\n        }\n        function markRootEntangled(root, entangledLanes) {\n            // In addition to entangling each of the given lanes with each other, we also\n            // have to consider _transitive_ entanglements. For each lane that is already\n            // entangled with *any* of the given lanes, that lane is now transitively\n            // entangled with *all* the given lanes.\n            //\n            // Translated: If C is entangled with A, then entangling A with B also\n            // entangles C with B.\n            //\n            // If this is hard to grasp, it might help to intentionally break this\n            // function and look at the tests that fail in ReactTransition-test.js. Try\n            // commenting out one of the conditions below.\n            var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n            var entanglements = root.entanglements;\n            var lanes = rootEntangledLanes;\n            while(lanes){\n                var index = pickArbitraryLaneIndex(lanes);\n                var lane = 1 << index;\n                if (lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n                entanglements[index] & entangledLanes) {\n                    entanglements[index] |= entangledLanes;\n                }\n                lanes &= ~lane;\n            }\n        }\n        function upgradePendingLaneToSync(root, lane) {\n            // Since we're upgrading the priority of the given lane, there is now pending\n            // sync work.\n            root.pendingLanes |= SyncLane; // Entangle the sync lane with the lane we're upgrading. This means SyncLane\n            // will not be allowed to finish without also finishing the given lane.\n            root.entangledLanes |= SyncLane;\n            root.entanglements[SyncLaneIndex] |= lane;\n        }\n        function upgradePendingLanesToSync(root, lanesToUpgrade) {\n            // Same as upgradePendingLaneToSync but accepts multiple lanes, so it's a\n            // bit slower.\n            root.pendingLanes |= SyncLane;\n            root.entangledLanes |= SyncLane;\n            var lanes = lanesToUpgrade;\n            while(lanes){\n                var index = pickArbitraryLaneIndex(lanes);\n                var lane = 1 << index;\n                root.entanglements[SyncLaneIndex] |= lane;\n                lanes &= ~lane;\n            }\n        }\n        function markHiddenUpdate(root, update, lane) {\n            var index = laneToIndex(lane);\n            var hiddenUpdates = root.hiddenUpdates;\n            var hiddenUpdatesForLane = hiddenUpdates[index];\n            if (hiddenUpdatesForLane === null) {\n                hiddenUpdates[index] = [\n                    update\n                ];\n            } else {\n                hiddenUpdatesForLane.push(update);\n            }\n            update.lane = lane | OffscreenLane;\n        }\n        function getBumpedLaneForHydration(root, renderLanes) {\n            var renderLane = getHighestPriorityLane(renderLanes);\n            var lane;\n            if ((renderLane & SyncUpdateLanes) !== NoLane) {\n                lane = SyncHydrationLane;\n            } else {\n                switch(renderLane){\n                    case SyncLane:\n                        lane = SyncHydrationLane;\n                        break;\n                    case InputContinuousLane:\n                        lane = InputContinuousHydrationLane;\n                        break;\n                    case DefaultLane:\n                        lane = DefaultHydrationLane;\n                        break;\n                    case TransitionLane1:\n                    case TransitionLane2:\n                    case TransitionLane3:\n                    case TransitionLane4:\n                    case TransitionLane5:\n                    case TransitionLane6:\n                    case TransitionLane7:\n                    case TransitionLane8:\n                    case TransitionLane9:\n                    case TransitionLane10:\n                    case TransitionLane11:\n                    case TransitionLane12:\n                    case TransitionLane13:\n                    case TransitionLane14:\n                    case TransitionLane15:\n                    case RetryLane1:\n                    case RetryLane2:\n                    case RetryLane3:\n                    case RetryLane4:\n                        lane = TransitionHydrationLane;\n                        break;\n                    case IdleLane:\n                        lane = IdleHydrationLane;\n                        break;\n                    default:\n                        // Everything else is already either a hydration lane, or shouldn't\n                        // be retried at a hydration lane.\n                        lane = NoLane;\n                        break;\n                }\n            } // Check if the lane we chose is suspended. If so, that indicates that we\n            // already attempted and failed to hydrate at that level. Also check if we're\n            // already rendering that lane, which is rare but could happen.\n            if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n                // Give up trying to hydrate and fall back to client render.\n                return NoLane;\n            }\n            return lane;\n        }\n        function addFiberToLanesMap(root, fiber, lanes) {\n            if (!isDevToolsPresent) {\n                return;\n            }\n            var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n            while(lanes > 0){\n                var index = laneToIndex(lanes);\n                var lane = 1 << index;\n                var updaters = pendingUpdatersLaneMap[index];\n                updaters.add(fiber);\n                lanes &= ~lane;\n            }\n        }\n        function movePendingFibersToMemoized(root, lanes) {\n            if (!isDevToolsPresent) {\n                return;\n            }\n            var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n            var memoizedUpdaters = root.memoizedUpdaters;\n            while(lanes > 0){\n                var index = laneToIndex(lanes);\n                var lane = 1 << index;\n                var updaters = pendingUpdatersLaneMap[index];\n                if (updaters.size > 0) {\n                    updaters.forEach(function(fiber) {\n                        var alternate = fiber.alternate;\n                        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n                            memoizedUpdaters.add(fiber);\n                        }\n                    });\n                    updaters.clear();\n                }\n                lanes &= ~lane;\n            }\n        }\n        function getTransitionsForLanes(root, lanes) {\n            {\n                return null;\n            }\n        }\n        var DiscreteEventPriority = SyncLane;\n        var ContinuousEventPriority = InputContinuousLane;\n        var DefaultEventPriority = DefaultLane;\n        var IdleEventPriority = IdleLane;\n        function higherEventPriority(a, b) {\n            return a !== 0 && a < b ? a : b;\n        }\n        function lowerEventPriority(a, b) {\n            return a === 0 || a > b ? a : b;\n        }\n        function isHigherEventPriority(a, b) {\n            return a !== 0 && a < b;\n        }\n        function eventPriorityToLane(updatePriority) {\n            return updatePriority;\n        }\n        function lanesToEventPriority(lanes) {\n            var lane = getHighestPriorityLane(lanes);\n            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n                return DiscreteEventPriority;\n            }\n            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n                return ContinuousEventPriority;\n            }\n            if (includesNonIdleWork(lane)) {\n                return DefaultEventPriority;\n            }\n            return IdleEventPriority;\n        }\n        // This module only exists as an ESM wrapper around the external CommonJS\n        var scheduleCallback$3 = Scheduler.unstable_scheduleCallback;\n        var cancelCallback$1 = Scheduler.unstable_cancelCallback;\n        var shouldYield = Scheduler.unstable_shouldYield;\n        var requestPaint = Scheduler.unstable_requestPaint;\n        var now$1 = Scheduler.unstable_now;\n        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;\n        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\n        var NormalPriority$1 = Scheduler.unstable_NormalPriority;\n        var IdlePriority = Scheduler.unstable_IdlePriority; // this doesn't actually exist on the scheduler, but it *does*\n        // on scheduler/unstable_mock, which we'll need for internal testing\n        var log = Scheduler.log;\n        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n        var rendererID = null;\n        var injectedHook = null;\n        var injectedProfilingHooks = null;\n        var hasLoggedError = false;\n        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n        function injectInternals(internals) {\n            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                // No DevTools\n                return false;\n            }\n            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n            if (hook.isDisabled) {\n                // This isn't a real property on the hook, but it can be set to opt out\n                // of DevTools integration and associated warnings and logs.\n                // https://github.com/facebook/react/issues/3877\n                return true;\n            }\n            if (!hook.supportsFiber) {\n                {\n                    error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://react.dev/link/react-devtools');\n                }\n                return true;\n            }\n            try {\n                if (enableSchedulingProfiler) {\n                    // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n                    // This gives DevTools a way to feature detect that isn't tied to version number\n                    // (since profiling and timeline are controlled by different feature flags).\n                    internals = assign({}, internals, {\n                        getLaneLabelMap: getLaneLabelMap,\n                        injectProfilingHooks: injectProfilingHooks\n                    });\n                }\n                rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n                injectedHook = hook;\n            } catch (err) {\n                // Catch all errors because it is unsafe to throw during initialization.\n                {\n                    error('React instrumentation encountered an error: %s.', err);\n                }\n            }\n            if (hook.checkDCE) {\n                // This is the real DevTools.\n                return true;\n            } else {\n                // This is likely a hook installed by Fast Refresh runtime.\n                return false;\n            }\n        }\n        function onScheduleRoot(root, children) {\n            {\n                if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n                    try {\n                        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n                    } catch (err) {\n                        if (!hasLoggedError) {\n                            hasLoggedError = true;\n                            error('React instrumentation encountered an error: %s', err);\n                        }\n                    }\n                }\n            }\n        }\n        function onCommitRoot$1(root, eventPriority) {\n            if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n                try {\n                    var didError = (root.current.flags & DidCapture) === DidCapture;\n                    if (enableProfilerTimer) {\n                        var schedulerPriority;\n                        switch(eventPriority){\n                            case DiscreteEventPriority:\n                                schedulerPriority = ImmediatePriority;\n                                break;\n                            case ContinuousEventPriority:\n                                schedulerPriority = UserBlockingPriority;\n                                break;\n                            case DefaultEventPriority:\n                                schedulerPriority = NormalPriority$1;\n                                break;\n                            case IdleEventPriority:\n                                schedulerPriority = IdlePriority;\n                                break;\n                            default:\n                                schedulerPriority = NormalPriority$1;\n                                break;\n                        }\n                        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n                    }\n                } catch (err) {\n                    {\n                        if (!hasLoggedError) {\n                            hasLoggedError = true;\n                            error('React instrumentation encountered an error: %s', err);\n                        }\n                    }\n                }\n            }\n        }\n        function onPostCommitRoot(root) {\n            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n                try {\n                    injectedHook.onPostCommitFiberRoot(rendererID, root);\n                } catch (err) {\n                    {\n                        if (!hasLoggedError) {\n                            hasLoggedError = true;\n                            error('React instrumentation encountered an error: %s', err);\n                        }\n                    }\n                }\n            }\n        }\n        function onCommitUnmount(fiber) {\n            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n                try {\n                    injectedHook.onCommitFiberUnmount(rendererID, fiber);\n                } catch (err) {\n                    {\n                        if (!hasLoggedError) {\n                            hasLoggedError = true;\n                            error('React instrumentation encountered an error: %s', err);\n                        }\n                    }\n                }\n            }\n        }\n        function setIsStrictModeForDevtools(newIsStrictMode) {\n            {\n                if (typeof log === 'function') {\n                    // We're in a test because Scheduler.log only exists\n                    // in SchedulerMock. To reduce the noise in strict mode tests,\n                    // suppress warnings and disable scheduler yielding during the double render\n                    unstable_setDisableYieldValue(newIsStrictMode);\n                    setSuppressWarning(newIsStrictMode);\n                }\n                if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n                    try {\n                        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n                    } catch (err) {\n                        {\n                            if (!hasLoggedError) {\n                                hasLoggedError = true;\n                                error('React instrumentation encountered an error: %s', err);\n                            }\n                        }\n                    }\n                }\n            }\n        } // Profiler API hooks\n        function injectProfilingHooks(profilingHooks) {\n            injectedProfilingHooks = profilingHooks;\n        }\n        function getLaneLabelMap() {\n            {\n                var map = new Map();\n                var lane = 1;\n                for(var index = 0; index < TotalLanes; index++){\n                    var label = getLabelForLane(lane);\n                    map.set(lane, label);\n                    lane *= 2;\n                }\n                return map;\n            }\n        }\n        function markCommitStarted(lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {\n                    injectedProfilingHooks.markCommitStarted(lanes);\n                }\n            }\n        }\n        function markCommitStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {\n                    injectedProfilingHooks.markCommitStopped();\n                }\n            }\n        }\n        function markComponentRenderStarted(fiber) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {\n                    injectedProfilingHooks.markComponentRenderStarted(fiber);\n                }\n            }\n        }\n        function markComponentRenderStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {\n                    injectedProfilingHooks.markComponentRenderStopped();\n                }\n            }\n        }\n        function markComponentPassiveEffectMountStarted(fiber) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {\n                    injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n                }\n            }\n        }\n        function markComponentPassiveEffectMountStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {\n                    injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n                }\n            }\n        }\n        function markComponentPassiveEffectUnmountStarted(fiber) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {\n                    injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n                }\n            }\n        }\n        function markComponentPassiveEffectUnmountStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {\n                    injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n                }\n            }\n        }\n        function markComponentLayoutEffectMountStarted(fiber) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {\n                    injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n                }\n            }\n        }\n        function markComponentLayoutEffectMountStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {\n                    injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n                }\n            }\n        }\n        function markComponentLayoutEffectUnmountStarted(fiber) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {\n                    injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n                }\n            }\n        }\n        function markComponentLayoutEffectUnmountStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {\n                    injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n                }\n            }\n        }\n        function markComponentErrored(fiber, thrownValue, lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {\n                    injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n                }\n            }\n        }\n        function markComponentSuspended(fiber, wakeable, lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {\n                    injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n                }\n            }\n        }\n        function markLayoutEffectsStarted(lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {\n                    injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n                }\n            }\n        }\n        function markLayoutEffectsStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {\n                    injectedProfilingHooks.markLayoutEffectsStopped();\n                }\n            }\n        }\n        function markPassiveEffectsStarted(lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {\n                    injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n                }\n            }\n        }\n        function markPassiveEffectsStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {\n                    injectedProfilingHooks.markPassiveEffectsStopped();\n                }\n            }\n        }\n        function markRenderStarted(lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {\n                    injectedProfilingHooks.markRenderStarted(lanes);\n                }\n            }\n        }\n        function markRenderYielded() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {\n                    injectedProfilingHooks.markRenderYielded();\n                }\n            }\n        }\n        function markRenderStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {\n                    injectedProfilingHooks.markRenderStopped();\n                }\n            }\n        }\n        function markRenderScheduled(lane) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {\n                    injectedProfilingHooks.markRenderScheduled(lane);\n                }\n            }\n        }\n        function markForceUpdateScheduled(fiber, lane) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {\n                    injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n                }\n            }\n        }\n        function markStateUpdateScheduled(fiber, lane) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {\n                    injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n                }\n            }\n        }\n        /**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */ function is(x, y) {\n            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n            ;\n        }\n        var objectIs = typeof Object.is === 'function' ? Object.is : is;\n        // This is imported by the event replaying implementation in React DOM. It's\n        // in a separate file to break a circular dependency between the renderer and\n        // the reconciler.\n        function isRootDehydrated(root) {\n            var currentState = root.current.memoizedState;\n            return currentState.isDehydrated;\n        }\n        var CapturedStacks = new WeakMap();\n        function createCapturedValueAtFiber(value, source) {\n            // If the value is an error, call this function immediately after it is thrown\n            // so the stack is accurate.\n            var stack;\n            if (typeof value === 'object' && value !== null) {\n                var capturedStack = CapturedStacks.get(value);\n                if (typeof capturedStack === 'string') {\n                    stack = capturedStack;\n                } else {\n                    stack = getStackByFiberInDevAndProd(source);\n                    CapturedStacks.set(value, stack);\n                }\n            } else {\n                stack = getStackByFiberInDevAndProd(source);\n            }\n            return {\n                value: value,\n                source: source,\n                stack: stack\n            };\n        }\n        function createCapturedValueFromError(value, stack) {\n            if (typeof stack === 'string') {\n                CapturedStacks.set(value, stack);\n            }\n            return {\n                value: value,\n                source: null,\n                stack: stack\n            };\n        }\n        // Intentionally not using it yet to derisk the initial implementation, because\n        // the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n        // rather the ids be wrong than crash the whole reconciler.\n        var forkStack = [];\n        var forkStackIndex = 0;\n        var treeForkProvider = null;\n        var treeForkCount = 0;\n        var idStack = [];\n        var idStackIndex = 0;\n        var treeContextProvider = null;\n        var treeContextId = 1;\n        var treeContextOverflow = '';\n        function isForkedChild(workInProgress) {\n            warnIfNotHydrating();\n            return (workInProgress.flags & Forked) !== NoFlags$1;\n        }\n        function getForksAtLevel(workInProgress) {\n            warnIfNotHydrating();\n            return treeForkCount;\n        }\n        function getTreeId() {\n            var overflow = treeContextOverflow;\n            var idWithLeadingBit = treeContextId;\n            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n            return id.toString(32) + overflow;\n        }\n        function pushTreeFork(workInProgress, totalChildren) {\n            // This is called right after we reconcile an array (or iterator) of child\n            // fibers, because that's the only place where we know how many children in\n            // the whole set without doing extra work later, or storing addtional\n            // information on the fiber.\n            //\n            // That's why this function is separate from pushTreeId — it's called during\n            // the render phase of the fork parent, not the child, which is where we push\n            // the other context values.\n            //\n            // In the Fizz implementation this is much simpler because the child is\n            // rendered in the same callstack as the parent.\n            //\n            // It might be better to just add a `forks` field to the Fiber type. It would\n            // make this module simpler.\n            warnIfNotHydrating();\n            forkStack[forkStackIndex++] = treeForkCount;\n            forkStack[forkStackIndex++] = treeForkProvider;\n            treeForkProvider = workInProgress;\n            treeForkCount = totalChildren;\n        }\n        function pushTreeId(workInProgress, totalChildren, index) {\n            warnIfNotHydrating();\n            idStack[idStackIndex++] = treeContextId;\n            idStack[idStackIndex++] = treeContextOverflow;\n            idStack[idStackIndex++] = treeContextProvider;\n            treeContextProvider = workInProgress;\n            var baseIdWithLeadingBit = treeContextId;\n            var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n            // of the id; we use it to account for leading 0s.\n            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n            var slot = index + 1;\n            var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n            // consideration the leading 1 we use to mark the end of the sequence.\n            if (length > 30) {\n                // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n                // This branch assumes the length of the base id is greater than 5; it won't\n                // work for smaller ids, because you need 5 bits per character.\n                //\n                // We encode the id in multiple steps: first the base id, then the\n                // remaining digits.\n                //\n                // Each 5 bit sequence corresponds to a single base 32 character. So for\n                // example, if the current id is 23 bits long, we can convert 20 of those\n                // bits into a string of 4 characters, with 3 bits left over.\n                //\n                // First calculate how many bits in the base id represent a complete\n                // sequence of characters.\n                var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n                var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n                var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n                var restOfBaseId = baseId >> numberOfOverflowBits;\n                var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n                // we made more room, this time it won't overflow.\n                var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n                var restOfNewBits = slot << restOfBaseLength;\n                var id = restOfNewBits | restOfBaseId;\n                var overflow = newOverflow + baseOverflow;\n                treeContextId = 1 << restOfLength | id;\n                treeContextOverflow = overflow;\n            } else {\n                // Normal path\n                var newBits = slot << baseLength;\n                var _id = newBits | baseId;\n                var _overflow = baseOverflow;\n                treeContextId = 1 << length | _id;\n                treeContextOverflow = _overflow;\n            }\n        }\n        function pushMaterializedTreeId(workInProgress) {\n            warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\n            // in its children.\n            var returnFiber = workInProgress.return;\n            if (returnFiber !== null) {\n                var numberOfForks = 1;\n                var slotIndex = 0;\n                pushTreeFork(workInProgress, numberOfForks);\n                pushTreeId(workInProgress, numberOfForks, slotIndex);\n            }\n        }\n        function getBitLength(number) {\n            return 32 - clz32(number);\n        }\n        function getLeadingBit(id) {\n            return 1 << getBitLength(id) - 1;\n        }\n        function popTreeContext(workInProgress) {\n            // Restore the previous values.\n            // This is a bit more complicated than other context-like modules in Fiber\n            // because the same Fiber may appear on the stack multiple times and for\n            // different reasons. We have to keep popping until the work-in-progress is\n            // no longer at the top of the stack.\n            while(workInProgress === treeForkProvider){\n                treeForkProvider = forkStack[--forkStackIndex];\n                forkStack[forkStackIndex] = null;\n                treeForkCount = forkStack[--forkStackIndex];\n                forkStack[forkStackIndex] = null;\n            }\n            while(workInProgress === treeContextProvider){\n                treeContextProvider = idStack[--idStackIndex];\n                idStack[idStackIndex] = null;\n                treeContextOverflow = idStack[--idStackIndex];\n                idStack[idStackIndex] = null;\n                treeContextId = idStack[--idStackIndex];\n                idStack[idStackIndex] = null;\n            }\n        }\n        function getSuspendedTreeContext() {\n            warnIfNotHydrating();\n            if (treeContextProvider !== null) {\n                return {\n                    id: treeContextId,\n                    overflow: treeContextOverflow\n                };\n            } else {\n                return null;\n            }\n        }\n        function restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n            warnIfNotHydrating();\n            idStack[idStackIndex++] = treeContextId;\n            idStack[idStackIndex++] = treeContextOverflow;\n            idStack[idStackIndex++] = treeContextProvider;\n            treeContextId = suspendedContext.id;\n            treeContextOverflow = suspendedContext.overflow;\n            treeContextProvider = workInProgress;\n        }\n        function warnIfNotHydrating() {\n            {\n                if (!getIsHydrating()) {\n                    error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');\n                }\n            }\n        }\n        var contextStackCursor = createCursor(null);\n        var contextFiberStackCursor = createCursor(null);\n        var rootInstanceStackCursor = createCursor(null); // Represents the nearest host transition provider (in React DOM, a <form />)\n        // NOTE: Since forms cannot be nested, and this feature is only implemented by\n        // React DOM, we don't technically need this to be a stack. It could be a single\n        // module variable instead.\n        var hostTransitionProviderCursor = createCursor(null); // TODO: This should initialize to NotPendingTransition, a constant\n        // imported from the fiber config. However, because of a cycle in the module\n        // graph, that value isn't defined during this module's initialization. I can't\n        // think of a way to work around this without moving that value out of the\n        // fiber config. For now, the \"no provider\" case is handled when reading,\n        // inside useHostTransitionStatus.\n        var HostTransitionContext = {\n            $$typeof: REACT_CONTEXT_TYPE,\n            Provider: null,\n            Consumer: null,\n            _currentValue: null,\n            _currentValue2: null,\n            _threadCount: 0\n        };\n        function requiredContext(c) {\n            {\n                if (c === null) {\n                    error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n                }\n            }\n            return c;\n        }\n        function getRootHostContainer() {\n            var rootInstance = requiredContext(rootInstanceStackCursor.current);\n            return rootInstance;\n        }\n        function pushHostContainer(fiber, nextRootInstance) {\n            // Push current root instance onto the stack;\n            // This allows us to reset root when portals are popped.\n            push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n            // This enables us to pop only Fibers that provide unique contexts.\n            push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n            // However, we can't just call getRootHostContext() and push it because\n            // we'd have a different number of entries on the stack depending on\n            // whether getRootHostContext() throws somewhere in renderer code or not.\n            // So we push an empty value first. This lets us safely unwind on errors.\n            push(contextStackCursor, null, fiber);\n            var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n            pop(contextStackCursor, fiber);\n            push(contextStackCursor, nextRootContext, fiber);\n        }\n        function popHostContainer(fiber) {\n            pop(contextStackCursor, fiber);\n            pop(contextFiberStackCursor, fiber);\n            pop(rootInstanceStackCursor, fiber);\n        }\n        function getHostContext() {\n            var context = requiredContext(contextStackCursor.current);\n            return context;\n        }\n        function pushHostContext(fiber) {\n            {\n                var stateHook = fiber.memoizedState;\n                if (stateHook !== null) {\n                    // Only provide context if this fiber has been upgraded by a host\n                    // transition. We use the same optimization for regular host context below.\n                    push(hostTransitionProviderCursor, fiber, fiber);\n                }\n            }\n            var context = requiredContext(contextStackCursor.current);\n            var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.\n            if (context !== nextContext) {\n                // Track the context and the Fiber that provided it.\n                // This enables us to pop only Fibers that provide unique contexts.\n                push(contextFiberStackCursor, fiber, fiber);\n                push(contextStackCursor, nextContext, fiber);\n            }\n        }\n        function popHostContext(fiber) {\n            if (contextFiberStackCursor.current === fiber) {\n                // Do not pop unless this Fiber provided the current context.\n                // pushHostContext() only pushes Fibers that provide unique contexts.\n                pop(contextStackCursor, fiber);\n                pop(contextFiberStackCursor, fiber);\n            }\n            {\n                if (hostTransitionProviderCursor.current === fiber) {\n                    // Do not pop unless this Fiber provided the current context. This is mostly\n                    // a performance optimization, but conveniently it also prevents a potential\n                    // data race where a host provider is upgraded (i.e. memoizedState becomes\n                    // non-null) during a concurrent event. This is a bit of a flaw in the way\n                    // we upgrade host components, but because we're accounting for it here, it\n                    // should be fine.\n                    pop(hostTransitionProviderCursor, fiber); // When popping the transition provider, we reset the context value back\n                    // to `null`. We can do this because you're not allowd to nest forms. If\n                    // we allowed for multiple nested host transition providers, then we'd\n                    // need to reset this to the parent provider's status.\n                    if (isPrimaryRenderer) {\n                        HostTransitionContext._currentValue = null;\n                    } else {\n                        HostTransitionContext._currentValue2 = null;\n                    }\n                }\n            }\n        }\n        var maxRowLength = 120;\n        var idealDepth = 15;\n        function findNotableNode(node, indent) {\n            if (node.serverProps === undefined && node.serverTail.length === 0 && node.children.length === 1 && node.distanceFromLeaf > 3 && node.distanceFromLeaf > idealDepth - indent) {\n                // This is not an interesting node for contextual purposes so we can skip it.\n                var child = node.children[0];\n                return findNotableNode(child, indent);\n            }\n            return node;\n        }\n        function indentation(indent) {\n            return '  ' + '  '.repeat(indent);\n        }\n        function added(indent) {\n            return '+ ' + '  '.repeat(indent);\n        }\n        function removed(indent) {\n            return '- ' + '  '.repeat(indent);\n        }\n        function describeFiberType(fiber) {\n            switch(fiber.tag){\n                case HostHoistable:\n                case HostSingleton:\n                case HostComponent:\n                    return fiber.type;\n                case LazyComponent:\n                    return 'Lazy';\n                case SuspenseComponent:\n                    return 'Suspense';\n                case SuspenseListComponent:\n                    return 'SuspenseList';\n                case FunctionComponent:\n                case SimpleMemoComponent:\n                    var fn = fiber.type;\n                    return fn.displayName || fn.name || null;\n                case ForwardRef:\n                    var render = fiber.type.render;\n                    return render.displayName || render.name || null;\n                case ClassComponent:\n                    var ctr = fiber.type;\n                    return ctr.displayName || ctr.name || null;\n                default:\n                    // Skip\n                    return null;\n            }\n        }\n        var needsEscaping = /[\"'&<>\\n\\t]/;\n        function describeTextNode(content, maxLength) {\n            if (needsEscaping.test(content)) {\n                var encoded = JSON.stringify(content);\n                if (encoded.length > maxLength - 2) {\n                    if (maxLength < 8) {\n                        return '{\"...\"}';\n                    }\n                    return '{' + encoded.slice(0, maxLength - 7) + '...\"}';\n                }\n                return '{' + encoded + '}';\n            } else {\n                if (content.length > maxLength) {\n                    if (maxLength < 5) {\n                        return '{\"...\"}';\n                    }\n                    return content.slice(0, maxLength - 3) + '...';\n                }\n                return content;\n            }\n        }\n        function describeTextDiff(clientText, serverProps, indent) {\n            var maxLength = maxRowLength - indent * 2;\n            if (serverProps === null) {\n                return added(indent) + describeTextNode(clientText, maxLength) + '\\n';\n            } else if (typeof serverProps === 'string') {\n                var serverText = serverProps;\n                var firstDiff = 0;\n                for(; firstDiff < serverText.length && firstDiff < clientText.length; firstDiff++){\n                    if (serverText.charCodeAt(firstDiff) !== clientText.charCodeAt(firstDiff)) {\n                        break;\n                    }\n                }\n                if (firstDiff > maxLength - 8 && firstDiff > 10) {\n                    // The first difference between the two strings would be cut off, so cut off in\n                    // the beginning instead.\n                    clientText = '...' + clientText.slice(firstDiff - 8);\n                    serverText = '...' + serverText.slice(firstDiff - 8);\n                }\n                return added(indent) + describeTextNode(clientText, maxLength) + '\\n' + removed(indent) + describeTextNode(serverText, maxLength) + '\\n';\n            } else {\n                return indentation(indent) + describeTextNode(clientText, maxLength) + '\\n';\n            }\n        }\n        function objectName(object) {\n            // $FlowFixMe[method-unbinding]\n            var name = Object.prototype.toString.call(object);\n            return name.replace(/^\\[object (.*)\\]$/, function(m, p0) {\n                return p0;\n            });\n        }\n        function describeValue(value, maxLength) {\n            switch(typeof value){\n                case 'string':\n                    {\n                        var encoded = JSON.stringify(value);\n                        if (encoded.length > maxLength) {\n                            if (maxLength < 5) {\n                                return '\"...\"';\n                            }\n                            return encoded.slice(0, maxLength - 4) + '...\"';\n                        }\n                        return encoded;\n                    }\n                case 'object':\n                    {\n                        if (value === null) {\n                            return 'null';\n                        }\n                        if (isArray(value)) {\n                            return '[...]';\n                        }\n                        if (value.$$typeof === REACT_ELEMENT_TYPE) {\n                            var type = getComponentNameFromType(value.type);\n                            return type ? '<' + type + '>' : '<...>';\n                        }\n                        var name = objectName(value);\n                        if (name === 'Object') {\n                            var properties = '';\n                            maxLength -= 2;\n                            for(var propName in value){\n                                if (!value.hasOwnProperty(propName)) {\n                                    continue;\n                                }\n                                var jsonPropName = JSON.stringify(propName);\n                                if (jsonPropName !== '\"' + propName + '\"') {\n                                    propName = jsonPropName;\n                                }\n                                maxLength -= propName.length - 2;\n                                var propValue = describeValue(value[propName], maxLength < 15 ? maxLength : 15);\n                                maxLength -= propValue.length;\n                                if (maxLength < 0) {\n                                    properties += properties === '' ? '...' : ', ...';\n                                    break;\n                                }\n                                properties += (properties === '' ? '' : ',') + propName + ':' + propValue;\n                            }\n                            return '{' + properties + '}';\n                        }\n                        return name;\n                    }\n                case 'function':\n                    {\n                        var _name = value.displayName || value.name;\n                        return _name ? 'function ' + _name : 'function';\n                    }\n                default:\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    return String(value);\n            }\n        }\n        function describePropValue(value, maxLength) {\n            if (typeof value === 'string' && !needsEscaping.test(value)) {\n                if (value.length > maxLength - 2) {\n                    if (maxLength < 5) {\n                        return '\"...\"';\n                    }\n                    return '\"' + value.slice(0, maxLength - 5) + '...\"';\n                }\n                return '\"' + value + '\"';\n            }\n            return '{' + describeValue(value, maxLength - 2) + '}';\n        }\n        function describeCollapsedElement(type, props, indent) {\n            // This function tries to fit the props into a single line for non-essential elements.\n            // We also ignore children because we're not going deeper.\n            var maxLength = maxRowLength - indent * 2 - type.length - 2;\n            var content = '';\n            for(var propName in props){\n                if (!props.hasOwnProperty(propName)) {\n                    continue;\n                }\n                if (propName === 'children') {\n                    continue;\n                }\n                var propValue = describePropValue(props[propName], 15);\n                maxLength -= propName.length + propValue.length + 2;\n                if (maxLength < 0) {\n                    content += ' ...';\n                    break;\n                }\n                content += ' ' + propName + '=' + propValue;\n            }\n            return indentation(indent) + '<' + type + content + '>\\n';\n        }\n        function describeExpandedElement(type, props, rowPrefix) {\n            // This function tries to fit the props into a single line for non-essential elements.\n            // We also ignore children because we're not going deeper.\n            var remainingRowLength = maxRowLength - rowPrefix.length - type.length; // We add the properties to a set so we can choose later whether we'll put it on one\n            // line or multiple lines.\n            var properties = [];\n            for(var propName in props){\n                if (!props.hasOwnProperty(propName)) {\n                    continue;\n                }\n                if (propName === 'children') {\n                    continue;\n                }\n                var maxLength = maxRowLength - rowPrefix.length - propName.length - 1;\n                var propValue = describePropValue(props[propName], maxLength);\n                remainingRowLength -= propName.length + propValue.length + 2;\n                properties.push(propName + '=' + propValue);\n            }\n            if (properties.length === 0) {\n                return rowPrefix + '<' + type + '>\\n';\n            } else if (remainingRowLength > 0) {\n                // We can fit all on one row.\n                return rowPrefix + '<' + type + ' ' + properties.join(' ') + '>\\n';\n            } else {\n                // Split into one row per property:\n                return rowPrefix + '<' + type + '\\n' + rowPrefix + '  ' + properties.join('\\n' + rowPrefix + '  ') + '\\n' + rowPrefix + '>\\n';\n            }\n        }\n        function describePropertiesDiff(clientObject, serverObject, indent) {\n            var properties = '';\n            var remainingServerProperties = assign({}, serverObject);\n            for(var propName in clientObject){\n                if (!clientObject.hasOwnProperty(propName)) {\n                    continue;\n                }\n                delete remainingServerProperties[propName];\n                var maxLength = maxRowLength - indent * 2 - propName.length - 2;\n                var clientValue = clientObject[propName];\n                var clientPropValue = describeValue(clientValue, maxLength);\n                if (serverObject.hasOwnProperty(propName)) {\n                    var serverValue = serverObject[propName];\n                    var serverPropValue = describeValue(serverValue, maxLength);\n                    properties += added(indent) + propName + ': ' + clientPropValue + '\\n';\n                    properties += removed(indent) + propName + ': ' + serverPropValue + '\\n';\n                } else {\n                    properties += added(indent) + propName + ': ' + clientPropValue + '\\n';\n                }\n            }\n            for(var _propName in remainingServerProperties){\n                if (!remainingServerProperties.hasOwnProperty(_propName)) {\n                    continue;\n                }\n                var _maxLength = maxRowLength - indent * 2 - _propName.length - 2;\n                var _serverValue = remainingServerProperties[_propName];\n                var _serverPropValue = describeValue(_serverValue, _maxLength);\n                properties += removed(indent) + _propName + ': ' + _serverPropValue + '\\n';\n            }\n            return properties;\n        }\n        function describeElementDiff(type, clientProps, serverProps, indent) {\n            var content = ''; // Maps any previously unmatched lower case server prop name to its full prop name\n            var serverPropNames = new Map();\n            for(var propName in serverProps){\n                if (!serverProps.hasOwnProperty(propName)) {\n                    continue;\n                }\n                serverPropNames.set(propName.toLowerCase(), propName);\n            }\n            if (serverPropNames.size === 1 && serverPropNames.has('children')) {\n                content += describeExpandedElement(type, clientProps, indentation(indent));\n            } else {\n                for(var _propName2 in clientProps){\n                    if (!clientProps.hasOwnProperty(_propName2)) {\n                        continue;\n                    }\n                    if (_propName2 === 'children') {\n                        continue;\n                    }\n                    var maxLength = maxRowLength - (indent + 1) * 2 - _propName2.length - 1;\n                    var serverPropName = serverPropNames.get(_propName2.toLowerCase());\n                    if (serverPropName !== undefined) {\n                        serverPropNames.delete(_propName2.toLowerCase()); // There's a diff here.\n                        var clientValue = clientProps[_propName2];\n                        var serverValue = serverProps[serverPropName];\n                        var clientPropValue = describePropValue(clientValue, maxLength);\n                        var serverPropValue = describePropValue(serverValue, maxLength);\n                        if (typeof clientValue === 'object' && clientValue !== null && typeof serverValue === 'object' && serverValue !== null && objectName(clientValue) === 'Object' && objectName(serverValue) === 'Object' && (Object.keys(clientValue).length > 2 || Object.keys(serverValue).length > 2 || clientPropValue.indexOf('...') > -1 || serverPropValue.indexOf('...') > -1)) {\n                            // We're comparing two plain objects. We can diff the nested objects instead.\n                            content += indentation(indent + 1) + _propName2 + '={{\\n' + describePropertiesDiff(clientValue, serverValue, indent + 2) + indentation(indent + 1) + '}}\\n';\n                        } else {\n                            content += added(indent + 1) + _propName2 + '=' + clientPropValue + '\\n';\n                            content += removed(indent + 1) + _propName2 + '=' + serverPropValue + '\\n';\n                        }\n                    } else {\n                        // Considered equal.\n                        content += indentation(indent + 1) + _propName2 + '=' + describePropValue(clientProps[_propName2], maxLength) + '\\n';\n                    }\n                }\n                serverPropNames.forEach(function(propName) {\n                    if (propName === 'children') {\n                        // Handled below.\n                        return;\n                    }\n                    var maxLength = maxRowLength - (indent + 1) * 2 - propName.length - 1;\n                    content += removed(indent + 1) + propName + '=' + describePropValue(serverProps[propName], maxLength) + '\\n';\n                });\n                if (content === '') {\n                    // No properties\n                    content = indentation(indent) + '<' + type + '>\\n';\n                } else {\n                    // Had properties\n                    content = indentation(indent) + '<' + type + '\\n' + content + indentation(indent) + '>\\n';\n                }\n            }\n            var serverChildren = serverProps.children;\n            var clientChildren = clientProps.children;\n            if (typeof serverChildren === 'string' || typeof serverChildren === 'number' || typeof serverChildren === 'bigint') {\n                // There's a diff of the children.\n                // $FlowFixMe[unsafe-addition]\n                var serverText = '' + serverChildren;\n                var clientText = '';\n                if (typeof clientChildren === 'string' || typeof clientChildren === 'number' || typeof clientChildren === 'bigint') {\n                    // $FlowFixMe[unsafe-addition]\n                    clientText = '' + clientChildren;\n                }\n                content += describeTextDiff(clientText, serverText, indent + 1);\n            } else if (typeof clientChildren === 'string' || typeof clientChildren === 'number' || typeof clientChildren === 'bigint') {\n                // The client has children but it's not considered a difference from the server.\n                // $FlowFixMe[unsafe-addition]\n                content += describeTextDiff('' + clientChildren, undefined, indent + 1);\n            }\n            return content;\n        }\n        function describeSiblingFiber(fiber, indent) {\n            var type = describeFiberType(fiber);\n            if (type === null) {\n                // Skip this type of fiber. We currently treat this as a fragment\n                // so it's just part of the parent's children.\n                var flatContent = '';\n                var childFiber = fiber.child;\n                while(childFiber){\n                    flatContent += describeSiblingFiber(childFiber, indent);\n                    childFiber = childFiber.sibling;\n                }\n                return flatContent;\n            }\n            return indentation(indent) + '<' + type + '>' + '\\n';\n        }\n        function describeNode(node, indent) {\n            var skipToNode = findNotableNode(node, indent);\n            if (skipToNode !== node && (node.children.length !== 1 || node.children[0] !== skipToNode)) {\n                return indentation(indent) + '...\\n' + describeNode(skipToNode, indent + 1);\n            } // Prefix with any server components for context\n            var parentContent = '';\n            var debugInfo = node.fiber._debugInfo;\n            if (debugInfo) {\n                for(var i = 0; i < debugInfo.length; i++){\n                    var serverComponentName = debugInfo[i].name;\n                    if (typeof serverComponentName === 'string') {\n                        parentContent += indentation(indent) + '<' + serverComponentName + '>' + '\\n';\n                        indent++;\n                    }\n                }\n            } // Self\n            var selfContent = ''; // We use the pending props since we might be generating a diff before the complete phase\n            // when something throws.\n            var clientProps = node.fiber.pendingProps;\n            if (node.fiber.tag === HostText) {\n                // Text Node\n                selfContent = describeTextDiff(clientProps, node.serverProps, indent);\n            } else {\n                var type = describeFiberType(node.fiber);\n                if (type !== null) {\n                    // Element Node\n                    if (node.serverProps === undefined) {\n                        // Just a reference node for context.\n                        selfContent = describeCollapsedElement(type, clientProps, indent);\n                        indent++;\n                    } else if (node.serverProps === null) {\n                        selfContent = describeExpandedElement(type, clientProps, added(indent)); // If this was an insertion we won't step down further. Any tail\n                    // are considered siblings so we don't indent.\n                    // TODO: Model this a little better.\n                    } else if (typeof node.serverProps === 'string') {\n                        {\n                            error('Should not have matched a non HostText fiber to a Text node. This is a bug in React.');\n                        }\n                    } else {\n                        selfContent = describeElementDiff(type, clientProps, node.serverProps, indent);\n                        indent++;\n                    }\n                }\n            } // Compute children\n            var childContent = '';\n            var childFiber = node.fiber.child;\n            var diffIdx = 0;\n            while(childFiber && diffIdx < node.children.length){\n                var childNode = node.children[diffIdx];\n                if (childNode.fiber === childFiber) {\n                    // This was a match in the diff.\n                    childContent += describeNode(childNode, indent);\n                    diffIdx++;\n                } else {\n                    // This is an unrelated previous sibling.\n                    childContent += describeSiblingFiber(childFiber, indent);\n                }\n                childFiber = childFiber.sibling;\n            }\n            if (childFiber && node.children.length > 0) {\n                // If we had any further siblings after the last mismatch, we can't be sure if it's\n                // actually a valid match since it might not have found a match. So we exclude next\n                // siblings to avoid confusion.\n                childContent += indentation(indent) + '...' + '\\n';\n            } // Deleted tail nodes\n            var serverTail = node.serverTail;\n            for(var _i = 0; _i < serverTail.length; _i++){\n                var tailNode = serverTail[_i];\n                if (typeof tailNode === 'string') {\n                    // Removed text node\n                    childContent += removed(indent) + describeTextNode(tailNode, maxRowLength - indent * 2) + '\\n';\n                } else {\n                    // Removed element\n                    childContent += describeExpandedElement(tailNode.type, tailNode.props, removed(indent));\n                }\n            }\n            return parentContent + selfContent + childContent;\n        }\n        function describeDiff(rootNode) {\n            try {\n                return '\\n\\n' + describeNode(rootNode, 0);\n            } catch (x) {\n                return '';\n            }\n        }\n        // This may have been an insertion or a hydration.\n        var hydrationParentFiber = null;\n        var nextHydratableInstance = null;\n        var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\n        // due to earlier mismatches or a suspended fiber.\n        var didSuspendOrErrorDEV = false; // Hydration differences found that haven't yet been logged.\n        var hydrationDiffRootDEV = null; // Hydration errors that were thrown inside this boundary\n        var hydrationErrors = null;\n        var rootOrSingletonContext = false; // Builds a common ancestor tree from the root down for collecting diffs.\n        function buildHydrationDiffNode(fiber, distanceFromLeaf) {\n            if (fiber.return === null) {\n                // We're at the root.\n                if (hydrationDiffRootDEV === null) {\n                    hydrationDiffRootDEV = {\n                        fiber: fiber,\n                        children: [],\n                        serverProps: undefined,\n                        serverTail: [],\n                        distanceFromLeaf: distanceFromLeaf\n                    };\n                } else if (hydrationDiffRootDEV.fiber !== fiber) {\n                    throw new Error('Saw multiple hydration diff roots in a pass. This is a bug in React.');\n                } else if (hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf) {\n                    hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf;\n                }\n                return hydrationDiffRootDEV;\n            }\n            var siblings = buildHydrationDiffNode(fiber.return, distanceFromLeaf + 1).children; // The same node may already exist in the parent. Since we currently always render depth first\n            // and rerender if we suspend or terminate early, if a shared ancestor was added we should still\n            // be inside of that shared ancestor which means it was the last one to be added. If this changes\n            // we may have to scan the whole set.\n            if (siblings.length > 0 && siblings[siblings.length - 1].fiber === fiber) {\n                var existing = siblings[siblings.length - 1];\n                if (existing.distanceFromLeaf > distanceFromLeaf) {\n                    existing.distanceFromLeaf = distanceFromLeaf;\n                }\n                return existing;\n            }\n            var newNode = {\n                fiber: fiber,\n                children: [],\n                serverProps: undefined,\n                serverTail: [],\n                distanceFromLeaf: distanceFromLeaf\n            };\n            siblings.push(newNode);\n            return newNode;\n        }\n        function warnIfHydrating() {\n            {\n                if (isHydrating) {\n                    error('We should not be hydrating here. This is a bug in React. Please file a bug.');\n                }\n            }\n        }\n        function markDidThrowWhileHydratingDEV() {\n            {\n                didSuspendOrErrorDEV = true;\n            }\n        }\n        function enterHydrationState(fiber) {\n            if (!supportsHydration) {\n                return false;\n            }\n            var parentInstance = fiber.stateNode.containerInfo;\n            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n            hydrationParentFiber = fiber;\n            isHydrating = true;\n            hydrationErrors = null;\n            didSuspendOrErrorDEV = false;\n            hydrationDiffRootDEV = null;\n            rootOrSingletonContext = true;\n            return true;\n        }\n        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n            if (!supportsHydration) {\n                return false;\n            }\n            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n            hydrationParentFiber = fiber;\n            isHydrating = true;\n            hydrationErrors = null;\n            didSuspendOrErrorDEV = false;\n            hydrationDiffRootDEV = null;\n            rootOrSingletonContext = false;\n            if (treeContext !== null) {\n                restoreSuspendedTreeContext(fiber, treeContext);\n            }\n            return true;\n        }\n        function warnNonHydratedInstance(fiber, rejectedCandidate) {\n            {\n                if (didSuspendOrErrorDEV) {\n                    // Inside a boundary that already suspended. We're currently rendering the\n                    // siblings of a suspended node. The mismatch may be due to the missing\n                    // data, so it's probably a false positive.\n                    return;\n                } // Add this fiber to the diff tree.\n                var diffNode = buildHydrationDiffNode(fiber, 0); // We use null as a signal that there was no node to match.\n                diffNode.serverProps = null;\n                if (rejectedCandidate !== null) {\n                    var description = describeHydratableInstanceForDevWarnings(rejectedCandidate);\n                    diffNode.serverTail.push(description);\n                }\n            }\n        }\n        function tryHydrateInstance(fiber, nextInstance, hostContext) {\n            // fiber is a HostComponent Fiber\n            var instance = canHydrateInstance(nextInstance, fiber.type, fiber.pendingProps, rootOrSingletonContext);\n            if (instance !== null) {\n                fiber.stateNode = instance;\n                {\n                    if (!didSuspendOrErrorDEV) {\n                        var differences = diffHydratedPropsForDevWarnings(instance, fiber.type, fiber.pendingProps, hostContext);\n                        if (differences !== null) {\n                            var diffNode = buildHydrationDiffNode(fiber, 0);\n                            diffNode.serverProps = differences;\n                        }\n                    }\n                }\n                hydrationParentFiber = fiber;\n                nextHydratableInstance = getFirstHydratableChild(instance);\n                rootOrSingletonContext = false;\n                return true;\n            }\n            return false;\n        }\n        function tryHydrateText(fiber, nextInstance) {\n            // fiber is a HostText Fiber\n            var text = fiber.pendingProps;\n            var textInstance = canHydrateTextInstance(nextInstance, text, rootOrSingletonContext);\n            if (textInstance !== null) {\n                fiber.stateNode = textInstance;\n                hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n                nextHydratableInstance = null;\n                return true;\n            }\n            return false;\n        }\n        function tryHydrateSuspense(fiber, nextInstance) {\n            // fiber is a SuspenseComponent Fiber\n            var suspenseInstance = canHydrateSuspenseInstance(nextInstance, rootOrSingletonContext);\n            if (suspenseInstance !== null) {\n                var suspenseState = {\n                    dehydrated: suspenseInstance,\n                    treeContext: getSuspendedTreeContext(),\n                    retryLane: OffscreenLane\n                };\n                fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n                // This simplifies the code for getHostSibling and deleting nodes,\n                // since it doesn't have to consider all Suspense boundaries and\n                // check if they're dehydrated ones or not.\n                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n                dehydratedFragment.return = fiber;\n                fiber.child = dehydratedFragment;\n                hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n                // it during the first pass. Instead, we'll reenter it later.\n                nextHydratableInstance = null;\n                return true;\n            }\n            return false;\n        }\n        var HydrationMismatchException = new Error('Hydration Mismatch Exception: This is not a real error, and should not leak into ' + \"userspace. If you're seeing this, it's likely a bug in React.\");\n        function throwOnHydrationMismatch(fiber) {\n            var diff = '';\n            {\n                // Consume the diff root for this mismatch.\n                // Any other errors will get their own diffs.\n                var diffRoot = hydrationDiffRootDEV;\n                if (diffRoot !== null) {\n                    hydrationDiffRootDEV = null;\n                    diff = describeDiff(diffRoot);\n                }\n            }\n            var error = new Error(\"Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\\n\" + '\\n' + \"- A server/client branch `if (typeof window !== 'undefined')`.\\n\" + \"- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\\n\" + \"- Date formatting in a user's locale which doesn't match the server.\\n\" + '- External changing data without sending a snapshot of it along with the HTML.\\n' + '- Invalid HTML tag nesting.\\n' + '\\n' + 'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\\n' + '\\n' + 'https://react.dev/link/hydration-mismatch' + diff);\n            queueHydrationError(createCapturedValueAtFiber(error, fiber));\n            throw HydrationMismatchException;\n        }\n        function claimHydratableSingleton(fiber) {\n            if (supportsSingletons) {\n                if (!isHydrating) {\n                    return;\n                }\n                var currentRootContainer = getRootHostContainer();\n                var currentHostContext = getHostContext();\n                var instance = fiber.stateNode = resolveSingletonInstance(fiber.type, fiber.pendingProps, currentRootContainer, currentHostContext, false);\n                {\n                    if (!didSuspendOrErrorDEV) {\n                        var differences = diffHydratedPropsForDevWarnings(instance, fiber.type, fiber.pendingProps, currentHostContext);\n                        if (differences !== null) {\n                            var diffNode = buildHydrationDiffNode(fiber, 0);\n                            diffNode.serverProps = differences;\n                        }\n                    }\n                }\n                hydrationParentFiber = fiber;\n                rootOrSingletonContext = true;\n                nextHydratableInstance = getFirstHydratableChild(instance);\n            }\n        }\n        function tryToClaimNextHydratableInstance(fiber) {\n            if (!isHydrating) {\n                return;\n            } // Validate that this is ok to render here before any mismatches.\n            var currentHostContext = getHostContext();\n            var shouldKeepWarning = validateHydratableInstance(fiber.type, fiber.pendingProps, currentHostContext);\n            var nextInstance = nextHydratableInstance;\n            if (!nextInstance || !tryHydrateInstance(fiber, nextInstance, currentHostContext)) {\n                if (shouldKeepWarning) {\n                    warnNonHydratedInstance(fiber, nextInstance);\n                }\n                throwOnHydrationMismatch(fiber);\n            }\n        }\n        function tryToClaimNextHydratableTextInstance(fiber) {\n            if (!isHydrating) {\n                return;\n            }\n            var text = fiber.pendingProps;\n            var shouldKeepWarning = true; // Validate that this is ok to render here before any mismatches.\n            var currentHostContext = getHostContext();\n            shouldKeepWarning = validateHydratableTextInstance(text, currentHostContext);\n            var nextInstance = nextHydratableInstance;\n            if (!nextInstance || !tryHydrateText(fiber, nextInstance)) {\n                if (shouldKeepWarning) {\n                    warnNonHydratedInstance(fiber, nextInstance);\n                }\n                throwOnHydrationMismatch(fiber);\n            }\n        }\n        function tryToClaimNextHydratableSuspenseInstance(fiber) {\n            if (!isHydrating) {\n                return;\n            }\n            var nextInstance = nextHydratableInstance;\n            if (!nextInstance || !tryHydrateSuspense(fiber, nextInstance)) {\n                warnNonHydratedInstance(fiber, nextInstance);\n                throwOnHydrationMismatch(fiber);\n            }\n        }\n        function tryToClaimNextHydratableFormMarkerInstance(fiber) {\n            if (!isHydrating) {\n                return false;\n            }\n            if (nextHydratableInstance) {\n                var markerInstance = canHydrateFormStateMarker(nextHydratableInstance, rootOrSingletonContext);\n                if (markerInstance) {\n                    // Found the marker instance.\n                    nextHydratableInstance = getNextHydratableSibling(markerInstance); // Return true if this marker instance should use the state passed\n                    // to hydrateRoot.\n                    // TODO: As an optimization, Fizz should only emit these markers if form\n                    // state is passed at the root.\n                    return isFormStateMarkerMatching(markerInstance);\n                }\n            } // Should have found a marker instance. Throw an error to trigger client\n            // rendering. We don't bother to check if we're in a concurrent root because\n            // useActionState is a new API, so backwards compat is not an issue.\n            throwOnHydrationMismatch(fiber);\n            return false;\n        }\n        function prepareToHydrateHostInstance(fiber, hostContext) {\n            if (!supportsHydration) {\n                throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n            }\n            var instance = fiber.stateNode;\n            var didHydrate = hydrateInstance(instance, fiber.type, fiber.memoizedProps, hostContext, fiber);\n            if (!didHydrate && favorSafetyOverHydrationPerf) {\n                throwOnHydrationMismatch(fiber);\n            }\n        }\n        function prepareToHydrateHostTextInstance(fiber) {\n            if (!supportsHydration) {\n                throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n            }\n            var textInstance = fiber.stateNode;\n            var textContent = fiber.memoizedProps;\n            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n            var parentProps = null; // We assume that prepareToHydrateHostTextInstance is called in a context where the\n            // hydration parent is the parent host component of this host text.\n            var returnFiber = hydrationParentFiber;\n            if (returnFiber !== null) {\n                switch(returnFiber.tag){\n                    case HostRoot:\n                        {\n                            {\n                                if (shouldWarnIfMismatchDev) {\n                                    var difference = diffHydratedTextForDevWarnings(textInstance, textContent, parentProps);\n                                    if (difference !== null) {\n                                        var diffNode = buildHydrationDiffNode(fiber, 0);\n                                        diffNode.serverProps = difference;\n                                    }\n                                }\n                            }\n                            break;\n                        }\n                    case HostSingleton:\n                    case HostComponent:\n                        {\n                            parentProps = returnFiber.memoizedProps;\n                            {\n                                if (shouldWarnIfMismatchDev) {\n                                    var _difference = diffHydratedTextForDevWarnings(textInstance, textContent, parentProps);\n                                    if (_difference !== null) {\n                                        var _diffNode = buildHydrationDiffNode(fiber, 0);\n                                        _diffNode.serverProps = _difference;\n                                    }\n                                }\n                            }\n                            break;\n                        }\n                } // TODO: What if it's a SuspenseInstance?\n            }\n            var didHydrate = hydrateTextInstance(textInstance, textContent, fiber, parentProps);\n            if (!didHydrate && favorSafetyOverHydrationPerf) {\n                throwOnHydrationMismatch(fiber);\n            }\n        }\n        function prepareToHydrateHostSuspenseInstance(fiber) {\n            if (!supportsHydration) {\n                throw new Error('Expected prepareToHydrateHostSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n            }\n            var suspenseState = fiber.memoizedState;\n            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n            if (!suspenseInstance) {\n                throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n            }\n            hydrateSuspenseInstance(suspenseInstance, fiber);\n        }\n        function skipPastDehydratedSuspenseInstance(fiber) {\n            if (!supportsHydration) {\n                throw new Error('Expected skipPastDehydratedSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n            }\n            var suspenseState = fiber.memoizedState;\n            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n            if (!suspenseInstance) {\n                throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n            }\n            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n        }\n        function popToNextHostParent(fiber) {\n            hydrationParentFiber = fiber.return;\n            while(hydrationParentFiber){\n                switch(hydrationParentFiber.tag){\n                    case HostRoot:\n                    case HostSingleton:\n                        rootOrSingletonContext = true;\n                        return;\n                    case HostComponent:\n                    case SuspenseComponent:\n                        rootOrSingletonContext = false;\n                        return;\n                    default:\n                        hydrationParentFiber = hydrationParentFiber.return;\n                }\n            }\n        }\n        function popHydrationState(fiber) {\n            if (!supportsHydration) {\n                return false;\n            }\n            if (fiber !== hydrationParentFiber) {\n                // We're deeper than the current hydration context, inside an inserted\n                // tree.\n                return false;\n            }\n            if (!isHydrating) {\n                // If we're not currently hydrating but we're in a hydration context, then\n                // we were an insertion and now need to pop up reenter hydration of our\n                // siblings.\n                popToNextHostParent(fiber);\n                isHydrating = true;\n                return false;\n            }\n            var shouldClear = false;\n            if (supportsSingletons) {\n                // With float we never clear the Root, or Singleton instances. We also do not clear Instances\n                // that have singleton text content\n                if (fiber.tag !== HostRoot && fiber.tag !== HostSingleton && !(fiber.tag === HostComponent && (!shouldDeleteUnhydratedTailInstances(fiber.type) || shouldSetTextContent(fiber.type, fiber.memoizedProps)))) {\n                    shouldClear = true;\n                }\n            } else {\n                // If we have any remaining hydratable nodes, we need to delete them now.\n                // We only do this deeper than head and body since they tend to have random\n                // other nodes in them. We also ignore components with pure text content in\n                // side of them. We also don't delete anything inside the root container.\n                if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\n                    shouldClear = true;\n                }\n            }\n            if (shouldClear) {\n                var nextInstance = nextHydratableInstance;\n                if (nextInstance) {\n                    warnIfUnhydratedTailNodes(fiber);\n                    throwOnHydrationMismatch(fiber);\n                }\n            }\n            popToNextHostParent(fiber);\n            if (fiber.tag === SuspenseComponent) {\n                nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n            } else {\n                nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n            }\n            return true;\n        }\n        function warnIfUnhydratedTailNodes(fiber) {\n            {\n                var nextInstance = nextHydratableInstance;\n                while(nextInstance){\n                    var diffNode = buildHydrationDiffNode(fiber, 0);\n                    var description = describeHydratableInstanceForDevWarnings(nextInstance);\n                    diffNode.serverTail.push(description);\n                    if (description.type === 'Suspense') {\n                        var suspenseInstance = nextInstance;\n                        nextInstance = getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n                    } else {\n                        nextInstance = getNextHydratableSibling(nextInstance);\n                    }\n                }\n            }\n        }\n        function resetHydrationState() {\n            if (!supportsHydration) {\n                return;\n            }\n            hydrationParentFiber = null;\n            nextHydratableInstance = null;\n            isHydrating = false;\n            didSuspendOrErrorDEV = false;\n        }\n        function upgradeHydrationErrorsToRecoverable() {\n            if (hydrationErrors !== null) {\n                // Successfully completed a forced client render. The errors that occurred\n                // during the hydration attempt are now recovered. We will log them in\n                // commit phase, once the entire tree has finished.\n                queueRecoverableErrors(hydrationErrors);\n                hydrationErrors = null;\n            }\n        }\n        function getIsHydrating() {\n            return isHydrating;\n        }\n        function queueHydrationError(error) {\n            if (hydrationErrors === null) {\n                hydrationErrors = [\n                    error\n                ];\n            } else {\n                hydrationErrors.push(error);\n            }\n        }\n        function emitPendingHydrationWarnings() {\n            {\n                // If we haven't yet thrown any hydration errors by the time we reach the end we've successfully\n                // hydrated, however, we might still have DEV-only mismatches that we log now.\n                var diffRoot = hydrationDiffRootDEV;\n                if (diffRoot !== null) {\n                    hydrationDiffRootDEV = null;\n                    var diff = describeDiff(diffRoot);\n                    error(\"A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. \" + 'This can happen if a SSR-ed Client Component used:\\n' + '\\n' + \"- A server/client branch `if (typeof window !== 'undefined')`.\\n\" + \"- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\\n\" + \"- Date formatting in a user's locale which doesn't match the server.\\n\" + '- External changing data without sending a snapshot of it along with the HTML.\\n' + '- Invalid HTML tag nesting.\\n' + '\\n' + 'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\\n' + '\\n' + '%s%s', 'https://react.dev/link/hydration-mismatch', diff);\n                }\n            }\n        }\n        // we wait until the current render is over (either finished or interrupted)\n        // before adding it to the fiber/hook queue. Push to this array so we can\n        // access the queue, fiber, update, et al later.\n        var concurrentQueues = [];\n        var concurrentQueuesIndex = 0;\n        var concurrentlyUpdatedLanes = NoLanes;\n        function finishQueueingConcurrentUpdates() {\n            var endIndex = concurrentQueuesIndex;\n            concurrentQueuesIndex = 0;\n            concurrentlyUpdatedLanes = NoLanes;\n            var i = 0;\n            while(i < endIndex){\n                var fiber = concurrentQueues[i];\n                concurrentQueues[i++] = null;\n                var queue = concurrentQueues[i];\n                concurrentQueues[i++] = null;\n                var update = concurrentQueues[i];\n                concurrentQueues[i++] = null;\n                var lane = concurrentQueues[i];\n                concurrentQueues[i++] = null;\n                if (queue !== null && update !== null) {\n                    var pending = queue.pending;\n                    if (pending === null) {\n                        // This is the first update. Create a circular list.\n                        update.next = update;\n                    } else {\n                        update.next = pending.next;\n                        pending.next = update;\n                    }\n                    queue.pending = update;\n                }\n                if (lane !== NoLane) {\n                    markUpdateLaneFromFiberToRoot(fiber, update, lane);\n                }\n            }\n        }\n        function getConcurrentlyUpdatedLanes() {\n            return concurrentlyUpdatedLanes;\n        }\n        function enqueueUpdate$1(fiber, queue, update, lane) {\n            // Don't update the `childLanes` on the return path yet. If we already in\n            // the middle of rendering, wait until after it has completed.\n            concurrentQueues[concurrentQueuesIndex++] = fiber;\n            concurrentQueues[concurrentQueuesIndex++] = queue;\n            concurrentQueues[concurrentQueuesIndex++] = update;\n            concurrentQueues[concurrentQueuesIndex++] = lane;\n            concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane); // The fiber's `lane` field is used in some places to check if any work is\n            // scheduled, to perform an eager bailout, so we need to update it immediately.\n            // TODO: We should probably move this to the \"shared\" queue instead.\n            fiber.lanes = mergeLanes(fiber.lanes, lane);\n            var alternate = fiber.alternate;\n            if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, lane);\n            }\n        }\n        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n            var concurrentQueue = queue;\n            var concurrentUpdate = update;\n            enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n            return getRootForUpdatedFiber(fiber);\n        }\n        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update) {\n            // This function is used to queue an update that doesn't need a rerender. The\n            // only reason we queue it is in case there's a subsequent higher priority\n            // update that causes it to be rebased.\n            var lane = NoLane;\n            var concurrentQueue = queue;\n            var concurrentUpdate = update;\n            enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane); // Usually we can rely on the upcoming render phase to process the concurrent\n            // queue. However, since this is a bail out, we're not scheduling any work\n            // here. So the update we just queued will leak until something else happens\n            // to schedule work (if ever).\n            //\n            // Check if we're currently in the middle of rendering a tree, and if not,\n            // process the queue immediately to prevent a leak.\n            var isConcurrentlyRendering = getWorkInProgressRoot() !== null;\n            if (!isConcurrentlyRendering) {\n                finishQueueingConcurrentUpdates();\n            }\n        }\n        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n            var concurrentQueue = queue;\n            var concurrentUpdate = update;\n            enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n            return getRootForUpdatedFiber(fiber);\n        }\n        function enqueueConcurrentRenderForLane(fiber, lane) {\n            enqueueUpdate$1(fiber, null, null, lane);\n            return getRootForUpdatedFiber(fiber);\n        } // Calling this function outside this module should only be done for backwards\n        // compatibility and should always be accompanied by a warning.\n        function unsafe_markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n            // NOTE: For Hyrum's Law reasons, if an infinite update loop is detected, it\n            // should throw before `markUpdateLaneFromFiberToRoot` is called. But this is\n            // undefined behavior and we can change it if we need to; it just so happens\n            // that, at the time of this writing, there's an internal product test that\n            // happens to rely on this.\n            var root = getRootForUpdatedFiber(sourceFiber);\n            markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);\n            return root;\n        }\n        function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {\n            // Update the source fiber's lanes\n            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n            var alternate = sourceFiber.alternate;\n            if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, lane);\n            } // Walk the parent path to the root and update the child lanes.\n            var isHidden = false;\n            var parent = sourceFiber.return;\n            var node = sourceFiber;\n            while(parent !== null){\n                parent.childLanes = mergeLanes(parent.childLanes, lane);\n                alternate = parent.alternate;\n                if (alternate !== null) {\n                    alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n                }\n                if (parent.tag === OffscreenComponent) {\n                    // Check if this offscreen boundary is currently hidden.\n                    //\n                    // The instance may be null if the Offscreen parent was unmounted. Usually\n                    // the parent wouldn't be reachable in that case because we disconnect\n                    // fibers from the tree when they are deleted. However, there's a weird\n                    // edge case where setState is called on a fiber that was interrupted\n                    // before it ever mounted. Because it never mounts, it also never gets\n                    // deleted. Because it never gets deleted, its return pointer never gets\n                    // disconnected. Which means it may be attached to a deleted Offscreen\n                    // parent node. (This discovery suggests it may be better for memory usage\n                    // if we don't attach the `return` pointer until the commit phase, though\n                    // in order to do that we'd need some other way to track the return\n                    // pointer during the initial render, like on the stack.)\n                    //\n                    // This case is always accompanied by a warning, but we still need to\n                    // account for it. (There may be other cases that we haven't discovered,\n                    // too.)\n                    var offscreenInstance = parent.stateNode;\n                    if (offscreenInstance !== null && !(offscreenInstance._visibility & OffscreenVisible)) {\n                        isHidden = true;\n                    }\n                }\n                node = parent;\n                parent = parent.return;\n            }\n            if (isHidden && update !== null && node.tag === HostRoot) {\n                var root = node.stateNode;\n                markHiddenUpdate(root, update, lane);\n            }\n        }\n        function getRootForUpdatedFiber(sourceFiber) {\n            // TODO: We will detect and infinite update loop and throw even if this fiber\n            // has already unmounted. This isn't really necessary but it happens to be the\n            // current behavior we've used for several release cycles. Consider not\n            // performing this check if the updated fiber already unmounted, since it's\n            // not possible for that to cause an infinite update loop.\n            throwIfInfiniteUpdateLoopDetected(); // When a setState happens, we must ensure the root is scheduled. Because\n            // update queues do not have a backpointer to the root, the only way to do\n            // this currently is to walk up the return path. This used to not be a big\n            // deal because we would have to walk up the return path to set\n            // the `childLanes`, anyway, but now those two traversals happen at\n            // different times.\n            // TODO: Consider adding a `root` backpointer on the update queue.\n            detectUpdateOnUnmountedFiber(sourceFiber, sourceFiber);\n            var node = sourceFiber;\n            var parent = node.return;\n            while(parent !== null){\n                detectUpdateOnUnmountedFiber(sourceFiber, node);\n                node = parent;\n                parent = node.return;\n            }\n            return node.tag === HostRoot ? node.stateNode : null;\n        }\n        function detectUpdateOnUnmountedFiber(sourceFiber, parent) {\n            {\n                var alternate = parent.alternate;\n                if (alternate === null && (parent.flags & (Placement | Hydrating)) !== NoFlags$1) {\n                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n                }\n            }\n        }\n        // there's only a single root, but we do support multi root apps, hence this\n        // extra complexity. But this module is optimized for the single root case.\n        var firstScheduledRoot = null;\n        var lastScheduledRoot = null; // Used to prevent redundant mircotasks from being scheduled.\n        var didScheduleMicrotask = false; // `act` \"microtasks\" are scheduled on the `act` queue instead of an actual\n        // microtask, so we have to dedupe those separately. This wouldn't be an issue\n        // if we required all `act` calls to be awaited, which we might in the future.\n        var didScheduleMicrotask_act = false; // Used to quickly bail out of flushSync if there's no sync work to do.\n        var mightHavePendingSyncWork = false;\n        var isFlushingWork = false;\n        var currentEventTransitionLane = NoLane;\n        function ensureRootIsScheduled(root) {\n            // This function is called whenever a root receives an update. It does two\n            // things 1) it ensures the root is in the root schedule, and 2) it ensures\n            // there's a pending microtask to process the root schedule.\n            //\n            // Most of the actual scheduling logic does not happen until\n            // `scheduleTaskForRootDuringMicrotask` runs.\n            // Add the root to the schedule\n            if (root === lastScheduledRoot || root.next !== null) ;\n            else {\n                if (lastScheduledRoot === null) {\n                    firstScheduledRoot = lastScheduledRoot = root;\n                } else {\n                    lastScheduledRoot.next = root;\n                    lastScheduledRoot = root;\n                }\n            } // Any time a root received an update, we set this to true until the next time\n            // we process the schedule. If it's false, then we can quickly exit flushSync\n            // without consulting the schedule.\n            mightHavePendingSyncWork = true; // At the end of the current event, go through each of the roots and ensure\n            // there's a task scheduled for each one at the correct priority.\n            if (ReactSharedInternals.actQueue !== null) {\n                // We're inside an `act` scope.\n                if (!didScheduleMicrotask_act) {\n                    didScheduleMicrotask_act = true;\n                    scheduleImmediateTask(processRootScheduleInMicrotask);\n                }\n            } else {\n                if (!didScheduleMicrotask) {\n                    didScheduleMicrotask = true;\n                    scheduleImmediateTask(processRootScheduleInMicrotask);\n                }\n            }\n        }\n        function flushSyncWorkOnAllRoots() {\n            // This is allowed to be called synchronously, but the caller should check\n            // the execution context first.\n            flushSyncWorkAcrossRoots_impl(false);\n        }\n        function flushSyncWorkAcrossRoots_impl(onlyLegacy) {\n            if (isFlushingWork) {\n                // Prevent reentrancy.\n                // TODO: Is this overly defensive? The callers must check the execution\n                // context first regardless.\n                return;\n            }\n            if (!mightHavePendingSyncWork) {\n                // Fast path. There's no sync work to do.\n                return;\n            } // There may or may not be synchronous work scheduled. Let's check.\n            var didPerformSomeWork;\n            isFlushingWork = true;\n            do {\n                didPerformSomeWork = false;\n                var root = firstScheduledRoot;\n                while(root !== null){\n                    if (onlyLegacy && disableLegacyMode) ;\n                    else {\n                        var workInProgressRoot = getWorkInProgressRoot();\n                        var workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n                        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n                        if (includesSyncLane(nextLanes)) {\n                            // This root has pending sync work. Flush it now.\n                            didPerformSomeWork = true;\n                            performSyncWorkOnRoot(root, nextLanes);\n                        }\n                    }\n                    root = root.next;\n                }\n            }while (didPerformSomeWork);\n            isFlushingWork = false;\n        }\n        function processRootScheduleInMicrotask() {\n            // This function is always called inside a microtask. It should never be\n            // called synchronously.\n            didScheduleMicrotask = false;\n            {\n                didScheduleMicrotask_act = false;\n            }\n            mightHavePendingSyncWork = false;\n            var currentTime = now$1();\n            var prev = null;\n            var root = firstScheduledRoot;\n            while(root !== null){\n                var next = root.next;\n                if (currentEventTransitionLane !== NoLane && shouldAttemptEagerTransition()) {\n                    // A transition was scheduled during an event, but we're going to try to\n                    // render it synchronously anyway. We do this during a popstate event to\n                    // preserve the scroll position of the previous page.\n                    upgradePendingLaneToSync(root, currentEventTransitionLane);\n                }\n                var nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);\n                if (nextLanes === NoLane) {\n                    // This root has no more pending work. Remove it from the schedule. To\n                    // guard against subtle reentrancy bugs, this microtask is the only place\n                    // we do this — you can add roots to the schedule whenever, but you can\n                    // only remove them here.\n                    // Null this out so we know it's been removed from the schedule.\n                    root.next = null;\n                    if (prev === null) {\n                        // This is the new head of the list\n                        firstScheduledRoot = next;\n                    } else {\n                        prev.next = next;\n                    }\n                    if (next === null) {\n                        // This is the new tail of the list\n                        lastScheduledRoot = prev;\n                    }\n                } else {\n                    // This root still has work. Keep it in the list.\n                    prev = root;\n                    if (includesSyncLane(nextLanes)) {\n                        mightHavePendingSyncWork = true;\n                    }\n                }\n                root = next;\n            }\n            currentEventTransitionLane = NoLane; // At the end of the microtask, flush any pending synchronous work. This has\n            // to come at the end, because it does actual rendering work that might throw.\n            flushSyncWorkOnAllRoots();\n        }\n        function scheduleTaskForRootDuringMicrotask(root, currentTime) {\n            // This function is always called inside a microtask, or at the very end of a\n            // rendering task right before we yield to the main thread. It should never be\n            // called synchronously.\n            //\n            // TODO: Unless enableDeferRootSchedulingToMicrotask is off. We need to land\n            // that ASAP to unblock additional features we have planned.\n            //\n            // This function also never performs React work synchronously; it should\n            // only schedule work to be performed later, in a separate task or microtask.\n            // Check if any lanes are being starved by other work. If so, mark them as\n            // expired so we know to work on those next.\n            markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n            var workInProgressRoot = getWorkInProgressRoot();\n            var workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n            var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n            var existingCallbackNode = root.callbackNode;\n            if (nextLanes === NoLanes || // If this root is currently suspended and waiting for data to resolve, don't\n            // schedule a task to render it. We'll either wait for a ping, or wait to\n            // receive an update.\n            //\n            // Suspended render phase\n            root === workInProgressRoot && isWorkLoopSuspendedOnData() || // Suspended commit phase\n            root.cancelPendingCommit !== null) {\n                // Fast path: There's nothing to work on.\n                if (existingCallbackNode !== null) {\n                    cancelCallback(existingCallbackNode);\n                }\n                root.callbackNode = null;\n                root.callbackPriority = NoLane;\n                return NoLane;\n            } // Schedule a new callback in the host environment.\n            if (includesSyncLane(nextLanes)) {\n                // Synchronous work is always flushed at the end of the microtask, so we\n                // don't need to schedule an additional task.\n                if (existingCallbackNode !== null) {\n                    cancelCallback(existingCallbackNode);\n                }\n                root.callbackPriority = SyncLane;\n                root.callbackNode = null;\n                return SyncLane;\n            } else {\n                // We use the highest priority lane to represent the priority of the callback.\n                var existingCallbackPriority = root.callbackPriority;\n                var newCallbackPriority = getHighestPriorityLane(nextLanes);\n                if (newCallbackPriority === existingCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n                // Scheduler task, rather than an `act` task, cancel it and re-schedule\n                // on the `act` queue.\n                !(ReactSharedInternals.actQueue !== null && existingCallbackNode !== fakeActCallbackNode$1)) {\n                    // The priority hasn't changed. We can reuse the existing task.\n                    return newCallbackPriority;\n                } else {\n                    // Cancel the existing callback. We'll schedule a new one below.\n                    cancelCallback(existingCallbackNode);\n                }\n                var schedulerPriorityLevel;\n                switch(lanesToEventPriority(nextLanes)){\n                    case DiscreteEventPriority:\n                        schedulerPriorityLevel = ImmediatePriority;\n                        break;\n                    case ContinuousEventPriority:\n                        schedulerPriorityLevel = UserBlockingPriority;\n                        break;\n                    case DefaultEventPriority:\n                        schedulerPriorityLevel = NormalPriority$1;\n                        break;\n                    case IdleEventPriority:\n                        schedulerPriorityLevel = IdlePriority;\n                        break;\n                    default:\n                        schedulerPriorityLevel = NormalPriority$1;\n                        break;\n                }\n                var newCallbackNode = scheduleCallback$2(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n                root.callbackPriority = newCallbackPriority;\n                root.callbackNode = newCallbackNode;\n                return newCallbackPriority;\n            }\n        }\n        function getContinuationForRoot(root, originalCallbackNode) {\n            // This is called at the end of `performConcurrentWorkOnRoot` to determine\n            // if we need to schedule a continuation task.\n            //\n            // Usually `scheduleTaskForRootDuringMicrotask` only runs inside a microtask;\n            // however, since most of the logic for determining if we need a continuation\n            // versus a new task is the same, we cheat a bit and call it here. This is\n            // only safe to do because we know we're at the end of the browser task.\n            // So although it's not an actual microtask, it might as well be.\n            scheduleTaskForRootDuringMicrotask(root, now$1());\n            if (root.callbackNode === originalCallbackNode) {\n                // The task node scheduled for this root is the same one that's\n                // currently executed. Need to return a continuation.\n                return performConcurrentWorkOnRoot.bind(null, root);\n            }\n            return null;\n        }\n        var fakeActCallbackNode$1 = {};\n        function scheduleCallback$2(priorityLevel, callback) {\n            if (ReactSharedInternals.actQueue !== null) {\n                // Special case: We're inside an `act` scope (a testing utility).\n                // Instead of scheduling work in the host environment, add it to a\n                // fake internal queue that's managed by the `act` implementation.\n                ReactSharedInternals.actQueue.push(callback);\n                return fakeActCallbackNode$1;\n            } else {\n                return scheduleCallback$3(priorityLevel, callback);\n            }\n        }\n        function cancelCallback(callbackNode) {\n            if (callbackNode === fakeActCallbackNode$1) ;\n            else if (callbackNode !== null) {\n                cancelCallback$1(callbackNode);\n            }\n        }\n        function scheduleImmediateTask(cb) {\n            if (ReactSharedInternals.actQueue !== null) {\n                // Special case: Inside an `act` scope, we push microtasks to the fake `act`\n                // callback queue. This is because we currently support calling `act`\n                // without awaiting the result. The plan is to deprecate that, and require\n                // that you always await the result so that the microtasks have a chance to\n                // run. But it hasn't happened yet.\n                ReactSharedInternals.actQueue.push(function() {\n                    cb();\n                    return null;\n                });\n            } // TODO: Can we land supportsMicrotasks? Which environments don't support it?\n            // Alternatively, can we move this check to the host config?\n            if (supportsMicrotasks) {\n                scheduleMicrotask(function() {\n                    // In Safari, appending an iframe forces microtasks to run.\n                    // https://github.com/facebook/react/issues/22459\n                    // We don't support running callbacks in the middle of render\n                    // or commit so we need to check against that.\n                    var executionContext = getExecutionContext();\n                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n                        // Note that this would still prematurely flush the callbacks\n                        // if this happens outside render or commit phase (e.g. in an event).\n                        // Intentionally using a macrotask instead of a microtask here. This is\n                        // wrong semantically but it prevents an infinite loop. The bug is\n                        // Safari's, not ours, so we just do our best to not crash even though\n                        // the behavior isn't completely correct.\n                        scheduleCallback$3(ImmediatePriority, cb);\n                        return;\n                    }\n                    cb();\n                });\n            } else {\n                // If microtasks are not supported, use Scheduler.\n                scheduleCallback$3(ImmediatePriority, cb);\n            }\n        }\n        function requestTransitionLane(// check that it's inside a transition before calling this function.\n        // TODO: Make this non-nullable. Requires a tweak to useOptimistic.\n        transition) {\n            // The algorithm for assigning an update to a lane should be stable for all\n            // updates at the same priority within the same event. To do this, the\n            // inputs to the algorithm must be the same.\n            //\n            // The trick we use is to cache the first of each of these inputs within an\n            // event. Then reset the cached values once we can be sure the event is\n            // over. Our heuristic for that is whenever we enter a concurrent work loop.\n            if (currentEventTransitionLane === NoLane) {\n                // All transitions within the same event are assigned the same lane.\n                currentEventTransitionLane = claimNextTransitionLane();\n            }\n            return currentEventTransitionLane;\n        }\n        // transition updates that occur while the async action is still in progress\n        // are treated as part of the action.\n        //\n        // The ideal behavior would be to treat each async function as an independent\n        // action. However, without a mechanism like AsyncContext, we can't tell which\n        // action an update corresponds to. So instead, we entangle them all into one.\n        // The listeners to notify once the entangled scope completes.\n        var currentEntangledListeners = null; // The number of pending async actions in the entangled scope.\n        var currentEntangledPendingCount = 0; // The transition lane shared by all updates in the entangled scope.\n        var currentEntangledLane = NoLane; // A thenable that resolves when the entangled scope completes. It does not\n        // resolve to a particular value because it's only used for suspending the UI\n        // until the async action scope has completed.\n        var currentEntangledActionThenable = null;\n        function entangleAsyncAction(transition, thenable) {\n            // `thenable` is the return value of the async action scope function. Create\n            // a combined thenable that resolves once every entangled scope function\n            // has finished.\n            if (currentEntangledListeners === null) {\n                // There's no outer async action scope. Create a new one.\n                var entangledListeners = currentEntangledListeners = [];\n                currentEntangledPendingCount = 0;\n                currentEntangledLane = requestTransitionLane();\n                var entangledThenable = {\n                    status: 'pending',\n                    value: undefined,\n                    then: function(resolve) {\n                        entangledListeners.push(resolve);\n                    }\n                };\n                currentEntangledActionThenable = entangledThenable;\n            }\n            currentEntangledPendingCount++;\n            thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);\n            return thenable;\n        }\n        function pingEngtangledActionScope() {\n            if (currentEntangledListeners !== null && --currentEntangledPendingCount === 0) {\n                // All the actions have finished. Close the entangled async action scope\n                // and notify all the listeners.\n                if (currentEntangledActionThenable !== null) {\n                    var fulfilledThenable = currentEntangledActionThenable;\n                    fulfilledThenable.status = 'fulfilled';\n                }\n                var listeners = currentEntangledListeners;\n                currentEntangledListeners = null;\n                currentEntangledLane = NoLane;\n                currentEntangledActionThenable = null;\n                for(var i = 0; i < listeners.length; i++){\n                    var listener = listeners[i];\n                    listener();\n                }\n            }\n        }\n        function chainThenableValue(thenable, result) {\n            // Equivalent to: Promise.resolve(thenable).then(() => result), except we can\n            // cheat a bit since we know that that this thenable is only ever consumed\n            // by React.\n            //\n            // We don't technically require promise support on the client yet, hence this\n            // extra code.\n            var listeners = [];\n            var thenableWithOverride = {\n                status: 'pending',\n                value: null,\n                reason: null,\n                then: function(resolve) {\n                    listeners.push(resolve);\n                }\n            };\n            thenable.then(function(value) {\n                var fulfilledThenable = thenableWithOverride;\n                fulfilledThenable.status = 'fulfilled';\n                fulfilledThenable.value = result;\n                for(var i = 0; i < listeners.length; i++){\n                    var listener = listeners[i];\n                    listener(result);\n                }\n            }, function(error) {\n                var rejectedThenable = thenableWithOverride;\n                rejectedThenable.status = 'rejected';\n                rejectedThenable.reason = error;\n                for(var i = 0; i < listeners.length; i++){\n                    var listener = listeners[i]; // This is a perf hack where we call the `onFulfill` ping function\n                    // instead of `onReject`, because we know that React is the only\n                    // consumer of these promises, and it passes the same listener to both.\n                    // We also know that it will read the error directly off the\n                    // `.reason` field.\n                    listener(undefined);\n                }\n            });\n            return thenableWithOverride;\n        }\n        function peekEntangledActionLane() {\n            return currentEntangledLane;\n        }\n        function peekEntangledActionThenable() {\n            return currentEntangledActionThenable;\n        }\n        var UpdateState = 0;\n        var ReplaceState = 1;\n        var ForceUpdate = 2;\n        var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n        // It should only be read right after calling `processUpdateQueue`, via\n        // `checkHasForceUpdateAfterProcessing`.\n        var hasForceUpdate = false;\n        var didWarnUpdateInsideUpdate;\n        var currentlyProcessingQueue;\n        {\n            didWarnUpdateInsideUpdate = false;\n            currentlyProcessingQueue = null;\n        }\n        function initializeUpdateQueue(fiber) {\n            var queue = {\n                baseState: fiber.memoizedState,\n                firstBaseUpdate: null,\n                lastBaseUpdate: null,\n                shared: {\n                    pending: null,\n                    lanes: NoLanes,\n                    hiddenCallbacks: null\n                },\n                callbacks: null\n            };\n            fiber.updateQueue = queue;\n        }\n        function cloneUpdateQueue(current, workInProgress) {\n            // Clone the update queue from current. Unless it's already a clone.\n            var queue = workInProgress.updateQueue;\n            var currentQueue = current.updateQueue;\n            if (queue === currentQueue) {\n                var clone = {\n                    baseState: currentQueue.baseState,\n                    firstBaseUpdate: currentQueue.firstBaseUpdate,\n                    lastBaseUpdate: currentQueue.lastBaseUpdate,\n                    shared: currentQueue.shared,\n                    callbacks: null\n                };\n                workInProgress.updateQueue = clone;\n            }\n        }\n        function createUpdate(lane) {\n            var update = {\n                lane: lane,\n                tag: UpdateState,\n                payload: null,\n                callback: null,\n                next: null\n            };\n            return update;\n        }\n        function enqueueUpdate(fiber, update, lane) {\n            var updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n                // Only occurs if the fiber has been unmounted.\n                return null;\n            }\n            var sharedQueue = updateQueue.shared;\n            {\n                if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n                    var componentName = getComponentNameFromFiber(fiber);\n                    error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.\\n\\nPlease update the following component: %s', componentName);\n                    didWarnUpdateInsideUpdate = true;\n                }\n            }\n            if (isUnsafeClassRenderPhaseUpdate()) {\n                // This is an unsafe render phase update. Add directly to the update\n                // queue so we can process it immediately during the current render.\n                var pending = sharedQueue.pending;\n                if (pending === null) {\n                    // This is the first update. Create a circular list.\n                    update.next = update;\n                } else {\n                    update.next = pending.next;\n                    pending.next = update;\n                }\n                sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\n                // this fiber. This is for backwards compatibility in the case where you\n                // update a different component during render phase than the one that is\n                // currently renderings (a pattern that is accompanied by a warning).\n                return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n            } else {\n                return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n            }\n        }\n        function entangleTransitions(root, fiber, lane) {\n            var updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n                // Only occurs if the fiber has been unmounted.\n                return;\n            }\n            var sharedQueue = updateQueue.shared;\n            if (isTransitionLane(lane)) {\n                var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n                // have finished. We can remove them from the shared queue, which represents\n                // a superset of the actually pending lanes. In some cases we may entangle\n                // more than we need to, but that's OK. In fact it's worse if we *don't*\n                // entangle when we should.\n                queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n                var newQueueLanes = mergeLanes(queueLanes, lane);\n                sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n                // the lane finished since the last time we entangled it. So we need to\n                // entangle it again, just to be sure.\n                markRootEntangled(root, newQueueLanes);\n            }\n        }\n        function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n            // Captured updates are updates that are thrown by a child during the render\n            // phase. They should be discarded if the render is aborted. Therefore,\n            // we should only put them on the work-in-progress queue, not the current one.\n            var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n            var current = workInProgress.alternate;\n            if (current !== null) {\n                var currentQueue = current.updateQueue;\n                if (queue === currentQueue) {\n                    // The work-in-progress queue is the same as current. This happens when\n                    // we bail out on a parent fiber that then captures an error thrown by\n                    // a child. Since we want to append the update only to the work-in\n                    // -progress queue, we need to clone the updates. We usually clone during\n                    // processUpdateQueue, but that didn't happen in this case because we\n                    // skipped over the parent when we bailed out.\n                    var newFirst = null;\n                    var newLast = null;\n                    var firstBaseUpdate = queue.firstBaseUpdate;\n                    if (firstBaseUpdate !== null) {\n                        // Loop through the updates and clone them.\n                        var update = firstBaseUpdate;\n                        do {\n                            var clone = {\n                                lane: update.lane,\n                                tag: update.tag,\n                                payload: update.payload,\n                                // When this update is rebased, we should not fire its\n                                // callback again.\n                                callback: null,\n                                next: null\n                            };\n                            if (newLast === null) {\n                                newFirst = newLast = clone;\n                            } else {\n                                newLast.next = clone;\n                                newLast = clone;\n                            } // $FlowFixMe[incompatible-type] we bail out when we get a null\n                            update = update.next;\n                        }while (update !== null); // Append the captured update the end of the cloned list.\n                        if (newLast === null) {\n                            newFirst = newLast = capturedUpdate;\n                        } else {\n                            newLast.next = capturedUpdate;\n                            newLast = capturedUpdate;\n                        }\n                    } else {\n                        // There are no base updates.\n                        newFirst = newLast = capturedUpdate;\n                    }\n                    queue = {\n                        baseState: currentQueue.baseState,\n                        firstBaseUpdate: newFirst,\n                        lastBaseUpdate: newLast,\n                        shared: currentQueue.shared,\n                        callbacks: currentQueue.callbacks\n                    };\n                    workInProgress.updateQueue = queue;\n                    return;\n                }\n            } // Append the update to the end of the list.\n            var lastBaseUpdate = queue.lastBaseUpdate;\n            if (lastBaseUpdate === null) {\n                queue.firstBaseUpdate = capturedUpdate;\n            } else {\n                lastBaseUpdate.next = capturedUpdate;\n            }\n            queue.lastBaseUpdate = capturedUpdate;\n        }\n        function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n            switch(update.tag){\n                case ReplaceState:\n                    {\n                        var payload = update.payload;\n                        if (typeof payload === 'function') {\n                            // Updater function\n                            {\n                                enterDisallowedContextReadInDEV();\n                            }\n                            var nextState = payload.call(instance, prevState, nextProps);\n                            {\n                                if (workInProgress.mode & StrictLegacyMode) {\n                                    setIsStrictModeForDevtools(true);\n                                    try {\n                                        payload.call(instance, prevState, nextProps);\n                                    } finally{\n                                        setIsStrictModeForDevtools(false);\n                                    }\n                                }\n                                exitDisallowedContextReadInDEV();\n                            }\n                            return nextState;\n                        } // State object\n                        return payload;\n                    }\n                case CaptureUpdate:\n                    {\n                        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n                    }\n                // Intentional fallthrough\n                case UpdateState:\n                    {\n                        var _payload = update.payload;\n                        var partialState;\n                        if (typeof _payload === 'function') {\n                            // Updater function\n                            {\n                                enterDisallowedContextReadInDEV();\n                            }\n                            partialState = _payload.call(instance, prevState, nextProps);\n                            {\n                                if (workInProgress.mode & StrictLegacyMode) {\n                                    setIsStrictModeForDevtools(true);\n                                    try {\n                                        _payload.call(instance, prevState, nextProps);\n                                    } finally{\n                                        setIsStrictModeForDevtools(false);\n                                    }\n                                }\n                                exitDisallowedContextReadInDEV();\n                            }\n                        } else {\n                            // Partial state object\n                            partialState = _payload;\n                        }\n                        if (partialState === null || partialState === undefined) {\n                            // Null and undefined are treated as no-ops.\n                            return prevState;\n                        } // Merge the partial state and the previous state.\n                        return assign({}, prevState, partialState);\n                    }\n                case ForceUpdate:\n                    {\n                        hasForceUpdate = true;\n                        return prevState;\n                    }\n            }\n            return prevState;\n        }\n        var didReadFromEntangledAsyncAction = false; // Each call to processUpdateQueue should be accompanied by a call to this. It's\n        // only in a separate function because in updateHostRoot, it must happen after\n        // all the context stacks have been pushed to, to prevent a stack mismatch. A\n        // bit unfortunate.\n        function suspendIfUpdateReadFromEntangledAsyncAction() {\n            // Check if this update is part of a pending async action. If so, we'll\n            // need to suspend until the action has finished, so that it's batched\n            // together with future updates in the same action.\n            // TODO: Once we support hooks inside useMemo (or an equivalent\n            // memoization boundary like Forget), hoist this logic so that it only\n            // suspends if the memo boundary produces a new value.\n            if (didReadFromEntangledAsyncAction) {\n                var entangledActionThenable = peekEntangledActionThenable();\n                if (entangledActionThenable !== null) {\n                    // TODO: Instead of the throwing the thenable directly, throw a\n                    // special object like `use` does so we can detect if it's captured\n                    // by userspace.\n                    throw entangledActionThenable;\n                }\n            }\n        }\n        function processUpdateQueue(workInProgress, props, instance, renderLanes) {\n            didReadFromEntangledAsyncAction = false; // This is always non-null on a ClassComponent or HostRoot\n            var queue = workInProgress.updateQueue;\n            hasForceUpdate = false;\n            {\n                currentlyProcessingQueue = queue.shared;\n            }\n            var firstBaseUpdate = queue.firstBaseUpdate;\n            var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n            var pendingQueue = queue.shared.pending;\n            if (pendingQueue !== null) {\n                queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n                // and last so that it's non-circular.\n                var lastPendingUpdate = pendingQueue;\n                var firstPendingUpdate = lastPendingUpdate.next;\n                lastPendingUpdate.next = null; // Append pending updates to base queue\n                if (lastBaseUpdate === null) {\n                    firstBaseUpdate = firstPendingUpdate;\n                } else {\n                    lastBaseUpdate.next = firstPendingUpdate;\n                }\n                lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n                // we need to transfer the updates to that queue, too. Because the base\n                // queue is a singly-linked list with no cycles, we can append to both\n                // lists and take advantage of structural sharing.\n                // TODO: Pass `current` as argument\n                var current = workInProgress.alternate;\n                if (current !== null) {\n                    // This is always non-null on a ClassComponent or HostRoot\n                    var currentQueue = current.updateQueue;\n                    var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n                    if (currentLastBaseUpdate !== lastBaseUpdate) {\n                        if (currentLastBaseUpdate === null) {\n                            currentQueue.firstBaseUpdate = firstPendingUpdate;\n                        } else {\n                            currentLastBaseUpdate.next = firstPendingUpdate;\n                        }\n                        currentQueue.lastBaseUpdate = lastPendingUpdate;\n                    }\n                }\n            } // These values may change as we process the queue.\n            if (firstBaseUpdate !== null) {\n                // Iterate through the list of updates to compute the result.\n                var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n                // from the original lanes.\n                var newLanes = NoLanes;\n                var newBaseState = null;\n                var newFirstBaseUpdate = null;\n                var newLastBaseUpdate = null;\n                var update = firstBaseUpdate;\n                do {\n                    // An extra OffscreenLane bit is added to updates that were made to\n                    // a hidden tree, so that we can distinguish them from updates that were\n                    // already there when the tree was hidden.\n                    var updateLane = removeLanes(update.lane, OffscreenLane);\n                    var isHiddenUpdate = updateLane !== update.lane; // Check if this update was made while the tree was hidden. If so, then\n                    // it's not a \"base\" update and we should disregard the extra base lanes\n                    // that were added to renderLanes when we entered the Offscreen tree.\n                    var shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes, updateLane);\n                    if (shouldSkipUpdate) {\n                        // Priority is insufficient. Skip this update. If this is the first\n                        // skipped update, the previous update/state is the new base\n                        // update/state.\n                        var clone = {\n                            lane: updateLane,\n                            tag: update.tag,\n                            payload: update.payload,\n                            callback: update.callback,\n                            next: null\n                        };\n                        if (newLastBaseUpdate === null) {\n                            newFirstBaseUpdate = newLastBaseUpdate = clone;\n                            newBaseState = newState;\n                        } else {\n                            newLastBaseUpdate = newLastBaseUpdate.next = clone;\n                        } // Update the remaining priority in the queue.\n                        newLanes = mergeLanes(newLanes, updateLane);\n                    } else {\n                        // This update does have sufficient priority.\n                        // Check if this update is part of a pending async action. If so,\n                        // we'll need to suspend until the action has finished, so that it's\n                        // batched together with future updates in the same action.\n                        if (updateLane !== NoLane && updateLane === peekEntangledActionLane()) {\n                            didReadFromEntangledAsyncAction = true;\n                        }\n                        if (newLastBaseUpdate !== null) {\n                            var _clone = {\n                                // This update is going to be committed so we never want uncommit\n                                // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                                // this will never be skipped by the check above.\n                                lane: NoLane,\n                                tag: update.tag,\n                                payload: update.payload,\n                                // When this update is rebased, we should not fire its\n                                // callback again.\n                                callback: null,\n                                next: null\n                            };\n                            newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n                        } // Process this update.\n                        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n                        var callback = update.callback;\n                        if (callback !== null) {\n                            workInProgress.flags |= Callback;\n                            if (isHiddenUpdate) {\n                                workInProgress.flags |= Visibility;\n                            }\n                            var callbacks = queue.callbacks;\n                            if (callbacks === null) {\n                                queue.callbacks = [\n                                    callback\n                                ];\n                            } else {\n                                callbacks.push(callback);\n                            }\n                        }\n                    } // $FlowFixMe[incompatible-type] we bail out when we get a null\n                    update = update.next;\n                    if (update === null) {\n                        pendingQueue = queue.shared.pending;\n                        if (pendingQueue === null) {\n                            break;\n                        } else {\n                            // An update was scheduled from inside a reducer. Add the new\n                            // pending updates to the end of the list and keep processing.\n                            var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n                            // unravel them when transferring them to the base queue.\n                            var _firstPendingUpdate = _lastPendingUpdate.next;\n                            _lastPendingUpdate.next = null;\n                            update = _firstPendingUpdate;\n                            queue.lastBaseUpdate = _lastPendingUpdate;\n                            queue.shared.pending = null;\n                        }\n                    }\n                }while (true);\n                if (newLastBaseUpdate === null) {\n                    newBaseState = newState;\n                }\n                queue.baseState = newBaseState;\n                queue.firstBaseUpdate = newFirstBaseUpdate;\n                queue.lastBaseUpdate = newLastBaseUpdate;\n                if (firstBaseUpdate === null) {\n                    // `queue.lanes` is used for entangling transitions. We can set it back to\n                    // zero once the queue is empty.\n                    queue.shared.lanes = NoLanes;\n                } // Set the remaining expiration time to be whatever is remaining in the queue.\n                // This should be fine because the only two other things that contribute to\n                // expiration time are props and context. We're already in the middle of the\n                // begin phase by the time we start processing the queue, so we've already\n                // dealt with the props. Context in components that specify\n                // shouldComponentUpdate is tricky; but we'll have to account for\n                // that regardless.\n                markSkippedUpdateLanes(newLanes);\n                workInProgress.lanes = newLanes;\n                workInProgress.memoizedState = newState;\n            }\n            {\n                currentlyProcessingQueue = null;\n            }\n        }\n        function callCallback(callback, context) {\n            if (typeof callback !== 'function') {\n                throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n            }\n            callback.call(context);\n        }\n        function resetHasForceUpdateBeforeProcessing() {\n            hasForceUpdate = false;\n        }\n        function checkHasForceUpdateAfterProcessing() {\n            return hasForceUpdate;\n        }\n        function deferHiddenCallbacks(updateQueue) {\n            // When an update finishes on a hidden component, its callback should not\n            // be fired until/unless the component is made visible again. Stash the\n            // callback on the shared queue object so it can be fired later.\n            var newHiddenCallbacks = updateQueue.callbacks;\n            if (newHiddenCallbacks !== null) {\n                var existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n                if (existingHiddenCallbacks === null) {\n                    updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;\n                } else {\n                    updateQueue.shared.hiddenCallbacks = existingHiddenCallbacks.concat(newHiddenCallbacks);\n                }\n            }\n        }\n        function commitHiddenCallbacks(updateQueue, context) {\n            // This component is switching from hidden -> visible. Commit any callbacks\n            // that were previously deferred.\n            var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n            if (hiddenCallbacks !== null) {\n                updateQueue.shared.hiddenCallbacks = null;\n                for(var i = 0; i < hiddenCallbacks.length; i++){\n                    var callback = hiddenCallbacks[i];\n                    callCallback(callback, context);\n                }\n            }\n        }\n        function commitCallbacks(updateQueue, context) {\n            var callbacks = updateQueue.callbacks;\n            if (callbacks !== null) {\n                updateQueue.callbacks = null;\n                for(var i = 0; i < callbacks.length; i++){\n                    var callback = callbacks[i];\n                    callCallback(callback, context);\n                }\n            }\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        /**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */ function shallowEqual(objA, objB) {\n            if (objectIs(objA, objB)) {\n                return true;\n            }\n            if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n                return false;\n            }\n            var keysA = Object.keys(objA);\n            var keysB = Object.keys(objB);\n            if (keysA.length !== keysB.length) {\n                return false;\n            } // Test for A's keys different from B.\n            for(var i = 0; i < keysA.length; i++){\n                var currentKey = keysA[i];\n                if (!hasOwnProperty.call(objB, currentKey) || // $FlowFixMe[incompatible-use] lost refinement of `objB`\n                !objectIs(objA[currentKey], objB[currentKey])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        var ReactStrictModeWarnings = {\n            recordUnsafeLifecycleWarnings: function(fiber, instance) {},\n            flushPendingUnsafeLifecycleWarnings: function() {},\n            recordLegacyContextWarning: function(fiber, instance) {},\n            flushLegacyContextWarning: function() {},\n            discardPendingWarnings: function() {}\n        };\n        {\n            var findStrictRoot = function(fiber) {\n                var maybeStrictRoot = null;\n                var node = fiber;\n                while(node !== null){\n                    if (node.mode & StrictLegacyMode) {\n                        maybeStrictRoot = node;\n                    }\n                    node = node.return;\n                }\n                return maybeStrictRoot;\n            };\n            var setToSortedString = function(set) {\n                var array = [];\n                set.forEach(function(value) {\n                    array.push(value);\n                });\n                return array.sort().join(', ');\n            };\n            var pendingComponentWillMountWarnings = [];\n            var pendingUNSAFE_ComponentWillMountWarnings = [];\n            var pendingComponentWillReceivePropsWarnings = [];\n            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n            var pendingComponentWillUpdateWarnings = [];\n            var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n            var didWarnAboutUnsafeLifecycles = new Set();\n            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {\n                // Dedupe strategy: Warn once per component.\n                if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n                    return;\n                }\n                if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n                instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                    pendingComponentWillMountWarnings.push(fiber);\n                }\n                if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n                    pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n                }\n                if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n                    pendingComponentWillReceivePropsWarnings.push(fiber);\n                }\n                if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n                    pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n                }\n                if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n                    pendingComponentWillUpdateWarnings.push(fiber);\n                }\n                if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n                    pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n                }\n            };\n            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {\n                // We do an initial pass to gather component names\n                var componentWillMountUniqueNames = new Set();\n                if (pendingComponentWillMountWarnings.length > 0) {\n                    pendingComponentWillMountWarnings.forEach(function(fiber) {\n                        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingComponentWillMountWarnings = [];\n                }\n                var UNSAFE_componentWillMountUniqueNames = new Set();\n                if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n                    pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {\n                        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingUNSAFE_ComponentWillMountWarnings = [];\n                }\n                var componentWillReceivePropsUniqueNames = new Set();\n                if (pendingComponentWillReceivePropsWarnings.length > 0) {\n                    pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {\n                        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingComponentWillReceivePropsWarnings = [];\n                }\n                var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n                if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n                    pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {\n                        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n                }\n                var componentWillUpdateUniqueNames = new Set();\n                if (pendingComponentWillUpdateWarnings.length > 0) {\n                    pendingComponentWillUpdateWarnings.forEach(function(fiber) {\n                        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingComponentWillUpdateWarnings = [];\n                }\n                var UNSAFE_componentWillUpdateUniqueNames = new Set();\n                if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n                    pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {\n                        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n                } // Finally, we flush all the warnings\n                // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n                if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n                    var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n                    error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n                }\n                if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n                    var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n                    error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n                }\n                if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n                    var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n                    error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n                }\n                if (componentWillMountUniqueNames.size > 0) {\n                    var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n                    warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n                }\n                if (componentWillReceivePropsUniqueNames.size > 0) {\n                    var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n                    warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n                }\n                if (componentWillUpdateUniqueNames.size > 0) {\n                    var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n                    warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n                }\n            };\n            var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n            var didWarnAboutLegacyContext = new Set();\n            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {\n                var strictRoot = findStrictRoot(fiber);\n                if (strictRoot === null) {\n                    error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n                    return;\n                } // Dedup strategy: Warn once per component.\n                if (didWarnAboutLegacyContext.has(fiber.type)) {\n                    return;\n                }\n                var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n                if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n                    if (warningsForRoot === undefined) {\n                        warningsForRoot = [];\n                        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n                    }\n                    warningsForRoot.push(fiber);\n                }\n            };\n            ReactStrictModeWarnings.flushLegacyContextWarning = function() {\n                pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {\n                    if (fiberArray.length === 0) {\n                        return;\n                    }\n                    var firstFiber = fiberArray[0];\n                    var uniqueNames = new Set();\n                    fiberArray.forEach(function(fiber) {\n                        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n                        didWarnAboutLegacyContext.add(fiber.type);\n                    });\n                    var sortedNames = setToSortedString(uniqueNames);\n                    runWithFiberInDEV(firstFiber, function() {\n                        error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://react.dev/link/legacy-context', sortedNames);\n                    });\n                });\n            };\n            ReactStrictModeWarnings.discardPendingWarnings = function() {\n                pendingComponentWillMountWarnings = [];\n                pendingUNSAFE_ComponentWillMountWarnings = [];\n                pendingComponentWillReceivePropsWarnings = [];\n                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n                pendingComponentWillUpdateWarnings = [];\n                pendingUNSAFE_ComponentWillUpdateWarnings = [];\n                pendingLegacyContextWarning = new Map();\n            };\n        }\n        function getThenablesFromState(state) {\n            {\n                var devState = state;\n                return devState.thenables;\n            }\n        } // An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n        // detect this is caught by userspace, we'll log a warning in development.\n        var SuspenseException = new Error(\"Suspense Exception: This is not a real error! It's an implementation \" + 'detail of `use` to interrupt the current render. You must either ' + 'rethrow it immediately, or move the `use` call outside of the ' + '`try/catch` block. Capturing without rethrowing will lead to ' + 'unexpected behavior.\\n\\n' + 'To handle async errors, wrap your component in an error boundary, or ' + \"call the promise's `.catch` method and pass the result to `use`\");\n        var SuspenseyCommitException = new Error('Suspense Exception: This is not a real error, and should not leak into ' + \"userspace. If you're seeing this, it's likely a bug in React.\"); // This is a noop thenable that we use to trigger a fallback in throwException.\n        // TODO: It would be better to refactor throwException into multiple functions\n        // so we can trigger a fallback directly without having to check the type. But\n        // for now this will do.\n        var noopSuspenseyCommitThenable = {\n            then: function() {\n                {\n                    error('Internal React error: A listener was unexpectedly attached to a ' + '\"noop\" thenable. This is a bug in React. Please file an issue.');\n                }\n            }\n        };\n        function createThenableState() {\n            // The ThenableState is created the first time a component suspends. If it\n            // suspends again, we'll reuse the same state.\n            {\n                return {\n                    didWarnAboutUncachedPromise: false,\n                    thenables: []\n                };\n            }\n        }\n        function isThenableResolved(thenable) {\n            var status = thenable.status;\n            return status === 'fulfilled' || status === 'rejected';\n        }\n        function noop$1() {}\n        function trackUsedThenable(thenableState, thenable, index) {\n            if (ReactSharedInternals.actQueue !== null) {\n                ReactSharedInternals.didUsePromise = true;\n            }\n            var trackedThenables = getThenablesFromState(thenableState);\n            var previous = trackedThenables[index];\n            if (previous === undefined) {\n                trackedThenables.push(thenable);\n            } else {\n                if (previous !== thenable) {\n                    // Reuse the previous thenable, and drop the new one. We can assume\n                    // they represent the same value, because components are idempotent.\n                    {\n                        var thenableStateDev = thenableState;\n                        if (!thenableStateDev.didWarnAboutUncachedPromise) {\n                            // We should only warn the first time an uncached thenable is\n                            // discovered per component, because if there are multiple, the\n                            // subsequent ones are likely derived from the first.\n                            //\n                            // We track this on the thenableState instead of deduping using the\n                            // component name like we usually do, because in the case of a\n                            // promise-as-React-node, the owner component is likely different from\n                            // the parent that's currently being reconciled. We'd have to track\n                            // the owner using state, which we're trying to move away from. Though\n                            // since this is dev-only, maybe that'd be OK.\n                            //\n                            // However, another benefit of doing it this way is we might\n                            // eventually have a thenableState per memo/Forget boundary instead\n                            // of per component, so this would allow us to have more\n                            // granular warnings.\n                            thenableStateDev.didWarnAboutUncachedPromise = true; // TODO: This warning should link to a corresponding docs page.\n                            error('A component was suspended by an uncached promise. Creating ' + 'promises inside a Client Component or hook is not yet ' + 'supported, except via a Suspense-compatible library or framework.');\n                        }\n                    }\n                    // intentionally ignore.\n                    thenable.then(noop$1, noop$1);\n                    thenable = previous;\n                }\n            } // We use an expando to track the status and result of a thenable so that we\n            // can synchronously unwrap the value. Think of this as an extension of the\n            // Promise API, or a custom interface that is a superset of Thenable.\n            //\n            // If the thenable doesn't have a status, set it to \"pending\" and attach\n            // a listener that will update its status and result when it resolves.\n            switch(thenable.status){\n                case 'fulfilled':\n                    {\n                        var fulfilledValue = thenable.value;\n                        return fulfilledValue;\n                    }\n                case 'rejected':\n                    {\n                        var rejectedError = thenable.reason;\n                        checkIfUseWrappedInAsyncCatch(rejectedError);\n                        throw rejectedError;\n                    }\n                default:\n                    {\n                        if (typeof thenable.status === 'string') {\n                            // Only instrument the thenable if the status if not defined. If\n                            // it's defined, but an unknown value, assume it's been instrumented by\n                            // some custom userspace implementation. We treat it as \"pending\".\n                            // Attach a dummy listener, to ensure that any lazy initialization can\n                            // happen. Flight lazily parses JSON when the value is actually awaited.\n                            thenable.then(noop$1, noop$1);\n                        } else {\n                            // This is an uncached thenable that we haven't seen before.\n                            // Detect infinite ping loops caused by uncached promises.\n                            var root = getWorkInProgressRoot();\n                            if (root !== null && root.shellSuspendCounter > 100) {\n                                // This root has suspended repeatedly in the shell without making any\n                                // progress (i.e. committing something). This is highly suggestive of\n                                // an infinite ping loop, often caused by an accidental Async Client\n                                // Component.\n                                //\n                                // During a transition, we can suspend the work loop until the promise\n                                // to resolve, but this is a sync render, so that's not an option. We\n                                // also can't show a fallback, because none was provided. So our last\n                                // resort is to throw an error.\n                                //\n                                // TODO: Remove this error in a future release. Other ways of handling\n                                // this case include forcing a concurrent render, or putting the whole\n                                // root into offscreen mode.\n                                throw new Error('async/await is not yet supported in Client Components, only ' + 'Server Components. This error is often caused by accidentally ' + \"adding `'use client'` to a module that was originally written \" + 'for the server.');\n                            }\n                            var pendingThenable = thenable;\n                            pendingThenable.status = 'pending';\n                            pendingThenable.then(function(fulfilledValue) {\n                                if (thenable.status === 'pending') {\n                                    var fulfilledThenable = thenable;\n                                    fulfilledThenable.status = 'fulfilled';\n                                    fulfilledThenable.value = fulfilledValue;\n                                }\n                            }, function(error) {\n                                if (thenable.status === 'pending') {\n                                    var rejectedThenable = thenable;\n                                    rejectedThenable.status = 'rejected';\n                                    rejectedThenable.reason = error;\n                                }\n                            });\n                        } // Check one more time in case the thenable resolved synchronously.\n                        switch(thenable.status){\n                            case 'fulfilled':\n                                {\n                                    var fulfilledThenable = thenable;\n                                    return fulfilledThenable.value;\n                                }\n                            case 'rejected':\n                                {\n                                    var rejectedThenable = thenable;\n                                    var _rejectedError = rejectedThenable.reason;\n                                    checkIfUseWrappedInAsyncCatch(_rejectedError);\n                                    throw _rejectedError;\n                                }\n                        } // Suspend.\n                        //\n                        // Throwing here is an implementation detail that allows us to unwind the\n                        // call stack. But we shouldn't allow it to leak into userspace. Throw an\n                        // opaque placeholder value instead of the actual thenable. If it doesn't\n                        // get captured by the work loop, log a warning, because that means\n                        // something in userspace must have caught it.\n                        suspendedThenable = thenable;\n                        {\n                            needsToResetSuspendedThenableDEV = true;\n                        }\n                        throw SuspenseException;\n                    }\n            }\n        }\n        function suspendCommit() {\n            // This extra indirection only exists so it can handle passing\n            // noopSuspenseyCommitThenable through to throwException.\n            // TODO: Factor the thenable check out of throwException\n            suspendedThenable = noopSuspenseyCommitThenable;\n            throw SuspenseyCommitException;\n        } // This is used to track the actual thenable that suspended so it can be\n        // passed to the rest of the Suspense implementation — which, for historical\n        // reasons, expects to receive a thenable.\n        var suspendedThenable = null;\n        var needsToResetSuspendedThenableDEV = false;\n        function getSuspendedThenable() {\n            // This is called right after `use` suspends by throwing an exception. `use`\n            // throws an opaque value instead of the thenable itself so that it can't be\n            // caught in userspace. Then the work loop accesses the actual thenable using\n            // this function.\n            if (suspendedThenable === null) {\n                throw new Error('Expected a suspended thenable. This is a bug in React. Please file ' + 'an issue.');\n            }\n            var thenable = suspendedThenable;\n            suspendedThenable = null;\n            {\n                needsToResetSuspendedThenableDEV = false;\n            }\n            return thenable;\n        }\n        function checkIfUseWrappedInTryCatch() {\n            {\n                // This was set right before SuspenseException was thrown, and it should\n                // have been cleared when the exception was handled. If it wasn't,\n                // it must have been caught by userspace.\n                if (needsToResetSuspendedThenableDEV) {\n                    needsToResetSuspendedThenableDEV = false;\n                    return true;\n                }\n            }\n            return false;\n        }\n        function checkIfUseWrappedInAsyncCatch(rejectedReason) {\n            // This check runs in prod, too, because it prevents a more confusing\n            // downstream error, where SuspenseException is caught by a promise and\n            // thrown asynchronously.\n            // TODO: Another way to prevent SuspenseException from leaking into an async\n            // execution context is to check the dispatcher every time `use` is called,\n            // or some equivalent. That might be preferable for other reasons, too, since\n            // it matches how we prevent similar mistakes for other hooks.\n            if (rejectedReason === SuspenseException) {\n                throw new Error('Hooks are not supported inside an async component. This ' + \"error is often caused by accidentally adding `'use client'` \" + 'to a module that was originally written for the server.');\n            }\n        }\n        var thenableState$1 = null;\n        var thenableIndexCounter$1 = 0;\n        function mergeDebugInfo(outer, inner) {\n            if (inner == null) {\n                return outer;\n            } else if (outer === null) {\n                return inner;\n            } else {\n                // If we have two debugInfo, we need to create a new one. This makes the array no longer\n                // live so we'll miss any future updates if we received more so ideally we should always\n                // do this after both have fully resolved/unsuspended.\n                return outer.concat(inner);\n            }\n        }\n        var didWarnAboutMaps;\n        var didWarnAboutGenerators;\n        var ownerHasKeyUseWarning;\n        var ownerHasFunctionTypeWarning;\n        var ownerHasSymbolTypeWarning;\n        var warnForMissingKey = function(child, returnFiber) {};\n        {\n            didWarnAboutMaps = false;\n            didWarnAboutGenerators = false;\n            /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */ ownerHasKeyUseWarning = {};\n            ownerHasFunctionTypeWarning = {};\n            ownerHasSymbolTypeWarning = {};\n            warnForMissingKey = function(child, returnFiber) {\n                if (child === null || typeof child !== 'object') {\n                    return;\n                }\n                if (!child._store || (child._store.validated || child.key != null) && child._store.validated !== 2) {\n                    return;\n                }\n                if (typeof child._store !== 'object') {\n                    throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n                } // $FlowFixMe[cannot-write] unable to narrow type from mixed to writable object\n                child._store.validated = 1;\n                var componentName = getComponentNameFromFiber(returnFiber);\n                var componentKey = componentName || 'null';\n                if (ownerHasKeyUseWarning[componentKey]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[componentKey] = true;\n                var childOwner = child._owner;\n                var parentOwner = returnFiber._debugOwner;\n                var currentComponentErrorInfo = '';\n                if (parentOwner && typeof parentOwner.tag === 'number') {\n                    var name = getComponentNameFromFiber(parentOwner);\n                    if (name) {\n                        currentComponentErrorInfo = '\\n\\nCheck the render method of `' + name + '`.';\n                    }\n                }\n                if (!currentComponentErrorInfo) {\n                    if (componentName) {\n                        currentComponentErrorInfo = \"\\n\\nCheck the top-level render call using <\" + componentName + \">.\";\n                    }\n                } // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwnerAppendix = '';\n                if (childOwner != null && parentOwner !== childOwner) {\n                    var ownerName = null;\n                    if (typeof childOwner.tag === 'number') {\n                        ownerName = getComponentNameFromFiber(childOwner);\n                    } else if (typeof childOwner.name === 'string') {\n                        ownerName = childOwner.name;\n                    }\n                    if (ownerName) {\n                        // Give the component that originally created this child.\n                        childOwnerAppendix = \" It was passed a child from \" + ownerName + \".\";\n                    }\n                } // We create a fake Fiber for the child to log the stack trace from.\n                // TODO: Refactor the warnForMissingKey calls to happen after fiber creation\n                // so that we can get access to the fiber that will eventually be created.\n                // That way the log can show up associated with the right instance in DevTools.\n                var fiber = createFiberFromElement(child, returnFiber.mode, 0);\n                fiber.return = returnFiber;\n                runWithFiberInDEV(fiber, function() {\n                    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://react.dev/link/warning-keys for more information.', currentComponentErrorInfo, childOwnerAppendix);\n                });\n            };\n        }\n        // We do this here instead of BeginWork because the Fragment fiber doesn't have\n        // the whole props object, only the children and is shared with arrays.\n        function validateFragmentProps(element, fiber, returnFiber) {\n            {\n                var keys = Object.keys(element.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== 'children' && key !== 'key') {\n                        if (fiber === null) {\n                            // For unkeyed root fragments there's no Fiber. We create a fake one just for\n                            // error stack handling.\n                            fiber = createFiberFromElement(element, returnFiber.mode, 0);\n                            fiber.return = returnFiber;\n                        }\n                        runWithFiberInDEV(fiber, function(erroredKey) {\n                            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', erroredKey);\n                        }, key);\n                        break;\n                    }\n                }\n            }\n        }\n        function unwrapThenable(thenable) {\n            var index = thenableIndexCounter$1;\n            thenableIndexCounter$1 += 1;\n            if (thenableState$1 === null) {\n                thenableState$1 = createThenableState();\n            }\n            return trackUsedThenable(thenableState$1, thenable, index);\n        }\n        function coerceRef(returnFiber, current, workInProgress, element) {\n            var ref;\n            {\n                // TODO: This is a temporary, intermediate step. When enableRefAsProp is on,\n                // we should resolve the `ref` prop during the begin phase of the component\n                // it's attached to (HostComponent, ClassComponent, etc).\n                var refProp = element.props.ref;\n                ref = refProp !== undefined ? refProp : null;\n            }\n            // should always read the ref from the prop.\n            workInProgress.ref = ref;\n        }\n        function throwOnInvalidObjectType(returnFiber, newChild) {\n            if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE) {\n                throw new Error('A React Element from an older version of React was rendered. ' + 'This is not supported. It can happen if:\\n' + '- Multiple copies of the \"react\" package is used.\\n' + '- A library pre-bundled an old copy of \"react\" or \"react/jsx-runtime\".\\n' + '- A compiler tries to \"inline\" JSX instead of using the runtime.');\n            } // $FlowFixMe[method-unbinding]\n            var childString = Object.prototype.toString.call(newChild);\n            throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n        }\n        function warnOnFunctionType(returnFiber, invalidChild) {\n            {\n                var parentName = getComponentNameFromFiber(returnFiber) || 'Component';\n                if (ownerHasFunctionTypeWarning[parentName]) {\n                    return;\n                }\n                ownerHasFunctionTypeWarning[parentName] = true;\n                var name = invalidChild.displayName || invalidChild.name || 'Component';\n                if (returnFiber.tag === HostRoot) {\n                    error('Functions are not valid as a React child. This may happen if ' + 'you return %s instead of <%s /> from render. ' + 'Or maybe you meant to call this function rather than return it.\\n' + '  root.render(%s)', name, name, name);\n                } else {\n                    error('Functions are not valid as a React child. This may happen if ' + 'you return %s instead of <%s /> from render. ' + 'Or maybe you meant to call this function rather than return it.\\n' + '  <%s>{%s}</%s>', name, name, parentName, name, parentName);\n                }\n            }\n        }\n        function warnOnSymbolType(returnFiber, invalidChild) {\n            {\n                var parentName = getComponentNameFromFiber(returnFiber) || 'Component';\n                if (ownerHasSymbolTypeWarning[parentName]) {\n                    return;\n                }\n                ownerHasSymbolTypeWarning[parentName] = true; // eslint-disable-next-line react-internal/safe-string-coercion\n                var name = String(invalidChild);\n                if (returnFiber.tag === HostRoot) {\n                    error('Symbols are not valid as a React child.\\n' + '  root.render(%s)', name);\n                } else {\n                    error('Symbols are not valid as a React child.\\n' + '  <%s>%s</%s>', parentName, name, parentName);\n                }\n            }\n        }\n        function resolveLazy(lazyType) {\n            {\n                return callLazyInitInDEV(lazyType);\n            }\n        } // This wrapper function exists because I expect to clone the code in each path\n        // to be able to optimize each path individually by branching early. This needs\n        // a compiler or we can do it manually. Helpers that don't need this branching\n        // live outside of this function.\n        function createChildReconciler(shouldTrackSideEffects) {\n            function deleteChild(returnFiber, childToDelete) {\n                if (!shouldTrackSideEffects) {\n                    // Noop.\n                    return;\n                }\n                var deletions = returnFiber.deletions;\n                if (deletions === null) {\n                    returnFiber.deletions = [\n                        childToDelete\n                    ];\n                    returnFiber.flags |= ChildDeletion;\n                } else {\n                    deletions.push(childToDelete);\n                }\n            }\n            function deleteRemainingChildren(returnFiber, currentFirstChild) {\n                if (!shouldTrackSideEffects) {\n                    // Noop.\n                    return null;\n                } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n                // assuming that after the first child we've already added everything.\n                var childToDelete = currentFirstChild;\n                while(childToDelete !== null){\n                    deleteChild(returnFiber, childToDelete);\n                    childToDelete = childToDelete.sibling;\n                }\n                return null;\n            }\n            function mapRemainingChildren(currentFirstChild) {\n                // Add the remaining children to a temporary map so that we can find them by\n                // keys quickly. Implicit (null) keys get added to this set with their index\n                // instead.\n                var existingChildren = new Map();\n                var existingChild = currentFirstChild;\n                while(existingChild !== null){\n                    if (existingChild.key !== null) {\n                        existingChildren.set(existingChild.key, existingChild);\n                    } else {\n                        existingChildren.set(existingChild.index, existingChild);\n                    }\n                    existingChild = existingChild.sibling;\n                }\n                return existingChildren;\n            }\n            function useFiber(fiber, pendingProps) {\n                // We currently set sibling to null and index to 0 here because it is easy\n                // to forget to do before returning it. E.g. for the single child case.\n                var clone = createWorkInProgress(fiber, pendingProps);\n                clone.index = 0;\n                clone.sibling = null;\n                return clone;\n            }\n            function placeChild(newFiber, lastPlacedIndex, newIndex) {\n                newFiber.index = newIndex;\n                if (!shouldTrackSideEffects) {\n                    // During hydration, the useId algorithm needs to know which fibers are\n                    // part of a list of children (arrays, iterators).\n                    newFiber.flags |= Forked;\n                    return lastPlacedIndex;\n                }\n                var current = newFiber.alternate;\n                if (current !== null) {\n                    var oldIndex = current.index;\n                    if (oldIndex < lastPlacedIndex) {\n                        // This is a move.\n                        newFiber.flags |= Placement | PlacementDEV;\n                        return lastPlacedIndex;\n                    } else {\n                        // This item can stay in place.\n                        return oldIndex;\n                    }\n                } else {\n                    // This is an insertion.\n                    newFiber.flags |= Placement | PlacementDEV;\n                    return lastPlacedIndex;\n                }\n            }\n            function placeSingleChild(newFiber) {\n                // This is simpler for the single child case. We only need to do a\n                // placement for inserting new children.\n                if (shouldTrackSideEffects && newFiber.alternate === null) {\n                    newFiber.flags |= Placement | PlacementDEV;\n                }\n                return newFiber;\n            }\n            function updateTextNode(returnFiber, current, textContent, lanes, debugInfo) {\n                if (current === null || current.tag !== HostText) {\n                    // Insert\n                    var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n                    created.return = returnFiber;\n                    {\n                        created._debugInfo = debugInfo;\n                    }\n                    return created;\n                } else {\n                    // Update\n                    var existing = useFiber(current, textContent);\n                    existing.return = returnFiber;\n                    {\n                        existing._debugInfo = debugInfo;\n                    }\n                    return existing;\n                }\n            }\n            function updateElement(returnFiber, current, element, lanes, debugInfo) {\n                var elementType = element.type;\n                if (elementType === REACT_FRAGMENT_TYPE) {\n                    var updated = updateFragment(returnFiber, current, element.props.children, lanes, element.key, debugInfo);\n                    validateFragmentProps(element, updated, returnFiber);\n                    return updated;\n                }\n                if (current !== null) {\n                    if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || // Lazy types should reconcile their resolved type.\n                    // We need to do this after the Hot Reloading check above,\n                    // because hot reloading has different semantics than prod because\n                    // it doesn't resuspend. So we can't let the call below suspend.\n                    typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n                        // Move based on index\n                        var existing = useFiber(current, element.props);\n                        coerceRef(returnFiber, current, existing, element);\n                        existing.return = returnFiber;\n                        {\n                            existing._debugOwner = element._owner;\n                            existing._debugInfo = debugInfo;\n                        }\n                        return existing;\n                    }\n                } // Insert\n                var created = createFiberFromElement(element, returnFiber.mode, lanes);\n                coerceRef(returnFiber, current, created, element);\n                created.return = returnFiber;\n                {\n                    created._debugInfo = debugInfo;\n                }\n                return created;\n            }\n            function updatePortal(returnFiber, current, portal, lanes, debugInfo) {\n                if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n                    // Insert\n                    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n                    created.return = returnFiber;\n                    {\n                        created._debugInfo = debugInfo;\n                    }\n                    return created;\n                } else {\n                    // Update\n                    var existing = useFiber(current, portal.children || []);\n                    existing.return = returnFiber;\n                    {\n                        existing._debugInfo = debugInfo;\n                    }\n                    return existing;\n                }\n            }\n            function updateFragment(returnFiber, current, fragment, lanes, key, debugInfo) {\n                if (current === null || current.tag !== Fragment) {\n                    // Insert\n                    var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n                    created.return = returnFiber;\n                    {\n                        created._debugInfo = debugInfo;\n                    }\n                    return created;\n                } else {\n                    // Update\n                    var existing = useFiber(current, fragment);\n                    existing.return = returnFiber;\n                    {\n                        existing._debugInfo = debugInfo;\n                    }\n                    return existing;\n                }\n            }\n            function createChild(returnFiber, newChild, lanes, debugInfo) {\n                if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number' || typeof newChild === 'bigint') {\n                    // Text nodes don't have keys. If the previous node is implicitly keyed\n                    // we can continue to replace it without aborting even if it is not a text\n                    // node.\n                    var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n                    created.return = returnFiber;\n                    {\n                        created._debugInfo = debugInfo;\n                    }\n                    return created;\n                }\n                if (typeof newChild === 'object' && newChild !== null) {\n                    switch(newChild.$$typeof){\n                        case REACT_ELEMENT_TYPE:\n                            {\n                                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n                                coerceRef(returnFiber, null, _created, newChild);\n                                _created.return = returnFiber;\n                                {\n                                    _created._debugInfo = mergeDebugInfo(debugInfo, newChild._debugInfo);\n                                }\n                                return _created;\n                            }\n                        case REACT_PORTAL_TYPE:\n                            {\n                                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n                                _created2.return = returnFiber;\n                                {\n                                    _created2._debugInfo = debugInfo;\n                                }\n                                return _created2;\n                            }\n                        case REACT_LAZY_TYPE:\n                            {\n                                var resolvedChild;\n                                {\n                                    resolvedChild = callLazyInitInDEV(newChild);\n                                }\n                                return createChild(returnFiber, resolvedChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo) // call merge after init\n                                );\n                            }\n                    }\n                    if (isArray(newChild) || getIteratorFn(newChild) || enableAsyncIterableChildren) {\n                        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n                        _created3.return = returnFiber;\n                        {\n                            _created3._debugInfo = mergeDebugInfo(debugInfo, newChild._debugInfo);\n                        }\n                        return _created3;\n                    } // Usable node types\n                    //\n                    // Unwrap the inner value and recursively call this function again.\n                    if (typeof newChild.then === 'function') {\n                        var thenable = newChild;\n                        return createChild(returnFiber, unwrapThenable(thenable), lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n                    }\n                    if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n                        var context = newChild;\n                        return createChild(returnFiber, readContextDuringReconciliation(returnFiber, context, lanes), lanes, debugInfo);\n                    }\n                    throwOnInvalidObjectType(returnFiber, newChild);\n                }\n                {\n                    if (typeof newChild === 'function') {\n                        warnOnFunctionType(returnFiber, newChild);\n                    }\n                    if (typeof newChild === 'symbol') {\n                        warnOnSymbolType(returnFiber, newChild);\n                    }\n                }\n                return null;\n            }\n            function updateSlot(returnFiber, oldFiber, newChild, lanes, debugInfo) {\n                // Update the fiber if the keys match, otherwise return null.\n                var key = oldFiber !== null ? oldFiber.key : null;\n                if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number' || typeof newChild === 'bigint') {\n                    // Text nodes don't have keys. If the previous node is implicitly keyed\n                    // we can continue to replace it without aborting even if it is not a text\n                    // node.\n                    if (key !== null) {\n                        return null;\n                    }\n                    return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes, debugInfo);\n                }\n                if (typeof newChild === 'object' && newChild !== null) {\n                    switch(newChild.$$typeof){\n                        case REACT_ELEMENT_TYPE:\n                            {\n                                if (newChild.key === key) {\n                                    return updateElement(returnFiber, oldFiber, newChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n                                } else {\n                                    return null;\n                                }\n                            }\n                        case REACT_PORTAL_TYPE:\n                            {\n                                if (newChild.key === key) {\n                                    return updatePortal(returnFiber, oldFiber, newChild, lanes, debugInfo);\n                                } else {\n                                    return null;\n                                }\n                            }\n                        case REACT_LAZY_TYPE:\n                            {\n                                var resolvedChild;\n                                {\n                                    resolvedChild = callLazyInitInDEV(newChild);\n                                }\n                                return updateSlot(returnFiber, oldFiber, resolvedChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n                            }\n                    }\n                    if (isArray(newChild) || getIteratorFn(newChild) || enableAsyncIterableChildren) {\n                        if (key !== null) {\n                            return null;\n                        }\n                        return updateFragment(returnFiber, oldFiber, newChild, lanes, null, mergeDebugInfo(debugInfo, newChild._debugInfo));\n                    } // Usable node types\n                    //\n                    // Unwrap the inner value and recursively call this function again.\n                    if (typeof newChild.then === 'function') {\n                        var thenable = newChild;\n                        return updateSlot(returnFiber, oldFiber, unwrapThenable(thenable), lanes, debugInfo);\n                    }\n                    if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n                        var context = newChild;\n                        return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, context, lanes), lanes, debugInfo);\n                    }\n                    throwOnInvalidObjectType(returnFiber, newChild);\n                }\n                {\n                    if (typeof newChild === 'function') {\n                        warnOnFunctionType(returnFiber, newChild);\n                    }\n                    if (typeof newChild === 'symbol') {\n                        warnOnSymbolType(returnFiber, newChild);\n                    }\n                }\n                return null;\n            }\n            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes, debugInfo) {\n                if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number' || typeof newChild === 'bigint') {\n                    // Text nodes don't have keys, so we neither have to check the old nor\n                    // new node for the key. If both are text nodes, they match.\n                    var matchedFiber = existingChildren.get(newIdx) || null;\n                    return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes, debugInfo);\n                }\n                if (typeof newChild === 'object' && newChild !== null) {\n                    switch(newChild.$$typeof){\n                        case REACT_ELEMENT_TYPE:\n                            {\n                                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                                return updateElement(returnFiber, _matchedFiber, newChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n                            }\n                        case REACT_PORTAL_TYPE:\n                            {\n                                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes, debugInfo);\n                            }\n                        case REACT_LAZY_TYPE:\n                            {\n                                var resolvedChild;\n                                {\n                                    resolvedChild = callLazyInitInDEV(newChild);\n                                }\n                                return updateFromMap(existingChildren, returnFiber, newIdx, resolvedChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n                            }\n                    }\n                    if (isArray(newChild) || getIteratorFn(newChild) || enableAsyncIterableChildren) {\n                        var _matchedFiber3 = existingChildren.get(newIdx) || null;\n                        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null, mergeDebugInfo(debugInfo, newChild._debugInfo));\n                    } // Usable node types\n                    //\n                    // Unwrap the inner value and recursively call this function again.\n                    if (typeof newChild.then === 'function') {\n                        var thenable = newChild;\n                        return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(thenable), lanes, debugInfo);\n                    }\n                    if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n                        var context = newChild;\n                        return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, context, lanes), lanes, debugInfo);\n                    }\n                    throwOnInvalidObjectType(returnFiber, newChild);\n                }\n                {\n                    if (typeof newChild === 'function') {\n                        warnOnFunctionType(returnFiber, newChild);\n                    }\n                    if (typeof newChild === 'symbol') {\n                        warnOnSymbolType(returnFiber, newChild);\n                    }\n                }\n                return null;\n            }\n            /**\n   * Warns if there is a duplicate or missing key\n   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {\n                {\n                    if (typeof child !== 'object' || child === null) {\n                        return knownKeys;\n                    }\n                    switch(child.$$typeof){\n                        case REACT_ELEMENT_TYPE:\n                        case REACT_PORTAL_TYPE:\n                            warnForMissingKey(child, returnFiber);\n                            var key = child.key;\n                            if (typeof key !== 'string') {\n                                break;\n                            }\n                            if (knownKeys === null) {\n                                knownKeys = new Set();\n                                knownKeys.add(key);\n                                break;\n                            }\n                            if (!knownKeys.has(key)) {\n                                knownKeys.add(key);\n                                break;\n                            }\n                            error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n                            break;\n                        case REACT_LAZY_TYPE:\n                            {\n                                var resolvedChild;\n                                {\n                                    resolvedChild = callLazyInitInDEV(child);\n                                }\n                                warnOnInvalidKey(resolvedChild, knownKeys, returnFiber);\n                                break;\n                            }\n                    }\n                }\n                return knownKeys;\n            }\n            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes, debugInfo) {\n                // This algorithm can't optimize by searching from both ends since we\n                // don't have backpointers on fibers. I'm trying to see how far we can get\n                // with that model. If it ends up not being worth the tradeoffs, we can\n                // add it later.\n                // Even with a two ended optimization, we'd want to optimize for the case\n                // where there are few changes and brute force the comparison instead of\n                // going for the Map. It'd like to explore hitting that path first in\n                // forward-only mode and only go for the Map once we notice that we need\n                // lots of look ahead. This doesn't handle reversal as well as two ended\n                // search but that's unusual. Besides, for the two ended optimization to\n                // work on Iterables, we'd need to copy the whole set.\n                // In this first iteration, we'll just live with hitting the bad case\n                // (adding everything to a Map) in for every insert/move.\n                // If you change this code, also update reconcileChildrenIterator() which\n                // uses the same algorithm.\n                {\n                    // First, validate keys.\n                    var knownKeys = null;\n                    for(var i = 0; i < newChildren.length; i++){\n                        var child = newChildren[i];\n                        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n                    }\n                }\n                var resultingFirstChild = null;\n                var previousNewFiber = null;\n                var oldFiber = currentFirstChild;\n                var lastPlacedIndex = 0;\n                var newIdx = 0;\n                var nextOldFiber = null;\n                for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){\n                    if (oldFiber.index > newIdx) {\n                        nextOldFiber = oldFiber;\n                        oldFiber = null;\n                    } else {\n                        nextOldFiber = oldFiber.sibling;\n                    }\n                    var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes, debugInfo);\n                    if (newFiber === null) {\n                        // TODO: This breaks on empty slots like null children. That's\n                        // unfortunate because it triggers the slow path all the time. We need\n                        // a better way to communicate whether this was a miss or null,\n                        // boolean, undefined, etc.\n                        if (oldFiber === null) {\n                            oldFiber = nextOldFiber;\n                        }\n                        break;\n                    }\n                    if (shouldTrackSideEffects) {\n                        if (oldFiber && newFiber.alternate === null) {\n                            // We matched the slot, but we didn't reuse the existing fiber, so we\n                            // need to delete the existing child.\n                            deleteChild(returnFiber, oldFiber);\n                        }\n                    }\n                    lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n                    if (previousNewFiber === null) {\n                        // TODO: Move out of the loop. This only happens for the first run.\n                        resultingFirstChild = newFiber;\n                    } else {\n                        // TODO: Defer siblings if we're not at the right index for this slot.\n                        // I.e. if we had null values before, then we want to defer this\n                        // for each null value. However, we also don't want to call updateSlot\n                        // with the previous one.\n                        previousNewFiber.sibling = newFiber;\n                    }\n                    previousNewFiber = newFiber;\n                    oldFiber = nextOldFiber;\n                }\n                if (newIdx === newChildren.length) {\n                    // We've reached the end of the new children. We can delete the rest.\n                    deleteRemainingChildren(returnFiber, oldFiber);\n                    if (getIsHydrating()) {\n                        var numberOfForks = newIdx;\n                        pushTreeFork(returnFiber, numberOfForks);\n                    }\n                    return resultingFirstChild;\n                }\n                if (oldFiber === null) {\n                    // If we don't have any more existing children we can choose a fast path\n                    // since the rest will all be insertions.\n                    for(; newIdx < newChildren.length; newIdx++){\n                        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes, debugInfo);\n                        if (_newFiber === null) {\n                            continue;\n                        }\n                        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n                        if (previousNewFiber === null) {\n                            // TODO: Move out of the loop. This only happens for the first run.\n                            resultingFirstChild = _newFiber;\n                        } else {\n                            previousNewFiber.sibling = _newFiber;\n                        }\n                        previousNewFiber = _newFiber;\n                    }\n                    if (getIsHydrating()) {\n                        var _numberOfForks = newIdx;\n                        pushTreeFork(returnFiber, _numberOfForks);\n                    }\n                    return resultingFirstChild;\n                } // Add all children to a key map for quick lookups.\n                var existingChildren = mapRemainingChildren(oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n                for(; newIdx < newChildren.length; newIdx++){\n                    var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes, debugInfo);\n                    if (_newFiber2 !== null) {\n                        if (shouldTrackSideEffects) {\n                            if (_newFiber2.alternate !== null) {\n                                // The new fiber is a work in progress, but if there exists a\n                                // current, that means that we reused the fiber. We need to delete\n                                // it from the child list so that we don't add it to the deletion\n                                // list.\n                                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n                            }\n                        }\n                        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n                        if (previousNewFiber === null) {\n                            resultingFirstChild = _newFiber2;\n                        } else {\n                            previousNewFiber.sibling = _newFiber2;\n                        }\n                        previousNewFiber = _newFiber2;\n                    }\n                }\n                if (shouldTrackSideEffects) {\n                    // Any existing children that weren't consumed above were deleted. We need\n                    // to add them to the deletion list.\n                    existingChildren.forEach(function(child) {\n                        return deleteChild(returnFiber, child);\n                    });\n                }\n                if (getIsHydrating()) {\n                    var _numberOfForks2 = newIdx;\n                    pushTreeFork(returnFiber, _numberOfForks2);\n                }\n                return resultingFirstChild;\n            }\n            function reconcileChildrenIteratable(returnFiber, currentFirstChild, newChildrenIterable, lanes, debugInfo) {\n                // This is the same implementation as reconcileChildrenArray(),\n                // but using the iterator instead.\n                var iteratorFn = getIteratorFn(newChildrenIterable);\n                if (typeof iteratorFn !== 'function') {\n                    throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n                }\n                var newChildren = iteratorFn.call(newChildrenIterable);\n                {\n                    if (newChildren === newChildrenIterable) {\n                        // We don't support rendering Generators as props because it's a mutation.\n                        // See https://github.com/facebook/react/issues/12995\n                        // We do support generators if they were created by a GeneratorFunction component\n                        // as its direct child since we can recreate those by rerendering the component\n                        // as needed.\n                        var isGeneratorComponent = returnFiber.tag === FunctionComponent && // $FlowFixMe[method-unbinding]\n                        Object.prototype.toString.call(returnFiber.type) === '[object GeneratorFunction]' && // $FlowFixMe[method-unbinding]\n                        Object.prototype.toString.call(newChildren) === '[object Generator]';\n                        if (!isGeneratorComponent) {\n                            if (!didWarnAboutGenerators) {\n                                error('Using Iterators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. You can also use an ' + 'Iterable that can iterate multiple times over the same items.');\n                            }\n                            didWarnAboutGenerators = true;\n                        }\n                    } else if (newChildrenIterable.entries === iteratorFn) {\n                        // Warn about using Maps as children\n                        if (!didWarnAboutMaps) {\n                            error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n                            didWarnAboutMaps = true;\n                        }\n                    }\n                }\n                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes, debugInfo);\n            }\n            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes, debugInfo) {\n                if (newChildren == null) {\n                    throw new Error('An iterable object provided no iterator.');\n                }\n                var resultingFirstChild = null;\n                var previousNewFiber = null;\n                var oldFiber = currentFirstChild;\n                var lastPlacedIndex = 0;\n                var newIdx = 0;\n                var nextOldFiber = null;\n                var knownKeys = null;\n                var step = newChildren.next();\n                {\n                    knownKeys = warnOnInvalidKey(step.value, knownKeys, returnFiber);\n                }\n                for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next(), knownKeys = warnOnInvalidKey(step.value, knownKeys, returnFiber)){\n                    if (oldFiber.index > newIdx) {\n                        nextOldFiber = oldFiber;\n                        oldFiber = null;\n                    } else {\n                        nextOldFiber = oldFiber.sibling;\n                    }\n                    var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes, debugInfo);\n                    if (newFiber === null) {\n                        // TODO: This breaks on empty slots like null children. That's\n                        // unfortunate because it triggers the slow path all the time. We need\n                        // a better way to communicate whether this was a miss or null,\n                        // boolean, undefined, etc.\n                        if (oldFiber === null) {\n                            oldFiber = nextOldFiber;\n                        }\n                        break;\n                    }\n                    if (shouldTrackSideEffects) {\n                        if (oldFiber && newFiber.alternate === null) {\n                            // We matched the slot, but we didn't reuse the existing fiber, so we\n                            // need to delete the existing child.\n                            deleteChild(returnFiber, oldFiber);\n                        }\n                    }\n                    lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n                    if (previousNewFiber === null) {\n                        // TODO: Move out of the loop. This only happens for the first run.\n                        resultingFirstChild = newFiber;\n                    } else {\n                        // TODO: Defer siblings if we're not at the right index for this slot.\n                        // I.e. if we had null values before, then we want to defer this\n                        // for each null value. However, we also don't want to call updateSlot\n                        // with the previous one.\n                        previousNewFiber.sibling = newFiber;\n                    }\n                    previousNewFiber = newFiber;\n                    oldFiber = nextOldFiber;\n                }\n                if (step.done) {\n                    // We've reached the end of the new children. We can delete the rest.\n                    deleteRemainingChildren(returnFiber, oldFiber);\n                    if (getIsHydrating()) {\n                        var numberOfForks = newIdx;\n                        pushTreeFork(returnFiber, numberOfForks);\n                    }\n                    return resultingFirstChild;\n                }\n                if (oldFiber === null) {\n                    // If we don't have any more existing children we can choose a fast path\n                    // since the rest will all be insertions.\n                    for(; !step.done; newIdx++, step = newChildren.next(), knownKeys = warnOnInvalidKey(step.value, knownKeys, returnFiber)){\n                        var _newFiber3 = createChild(returnFiber, step.value, lanes, debugInfo);\n                        if (_newFiber3 === null) {\n                            continue;\n                        }\n                        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n                        if (previousNewFiber === null) {\n                            // TODO: Move out of the loop. This only happens for the first run.\n                            resultingFirstChild = _newFiber3;\n                        } else {\n                            previousNewFiber.sibling = _newFiber3;\n                        }\n                        previousNewFiber = _newFiber3;\n                    }\n                    if (getIsHydrating()) {\n                        var _numberOfForks3 = newIdx;\n                        pushTreeFork(returnFiber, _numberOfForks3);\n                    }\n                    return resultingFirstChild;\n                } // Add all children to a key map for quick lookups.\n                var existingChildren = mapRemainingChildren(oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n                for(; !step.done; newIdx++, step = newChildren.next(), knownKeys = warnOnInvalidKey(step.value, knownKeys, returnFiber)){\n                    var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes, debugInfo);\n                    if (_newFiber4 !== null) {\n                        if (shouldTrackSideEffects) {\n                            if (_newFiber4.alternate !== null) {\n                                // The new fiber is a work in progress, but if there exists a\n                                // current, that means that we reused the fiber. We need to delete\n                                // it from the child list so that we don't add it to the deletion\n                                // list.\n                                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n                            }\n                        }\n                        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n                        if (previousNewFiber === null) {\n                            resultingFirstChild = _newFiber4;\n                        } else {\n                            previousNewFiber.sibling = _newFiber4;\n                        }\n                        previousNewFiber = _newFiber4;\n                    }\n                }\n                if (shouldTrackSideEffects) {\n                    // Any existing children that weren't consumed above were deleted. We need\n                    // to add them to the deletion list.\n                    existingChildren.forEach(function(child) {\n                        return deleteChild(returnFiber, child);\n                    });\n                }\n                if (getIsHydrating()) {\n                    var _numberOfForks4 = newIdx;\n                    pushTreeFork(returnFiber, _numberOfForks4);\n                }\n                return resultingFirstChild;\n            }\n            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n                // There's no need to check for keys on text nodes since we don't have a\n                // way to define them.\n                if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n                    // We already have an existing node so let's just update it and delete\n                    // the rest.\n                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n                    var existing = useFiber(currentFirstChild, textContent);\n                    existing.return = returnFiber;\n                    return existing;\n                } // The existing first child is not a text node so we need to create one\n                // and delete the existing ones.\n                deleteRemainingChildren(returnFiber, currentFirstChild);\n                var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n                created.return = returnFiber;\n                return created;\n            }\n            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes, debugInfo) {\n                var key = element.key;\n                var child = currentFirstChild;\n                while(child !== null){\n                    // TODO: If key === null and child.key === null, then this only applies to\n                    // the first item in the list.\n                    if (child.key === key) {\n                        var elementType = element.type;\n                        if (elementType === REACT_FRAGMENT_TYPE) {\n                            if (child.tag === Fragment) {\n                                deleteRemainingChildren(returnFiber, child.sibling);\n                                var existing = useFiber(child, element.props.children);\n                                existing.return = returnFiber;\n                                {\n                                    existing._debugOwner = element._owner;\n                                    existing._debugInfo = debugInfo;\n                                }\n                                validateFragmentProps(element, existing, returnFiber);\n                                return existing;\n                            }\n                        } else {\n                            if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.\n                            // We need to do this after the Hot Reloading check above,\n                            // because hot reloading has different semantics than prod because\n                            // it doesn't resuspend. So we can't let the call below suspend.\n                            typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n                                deleteRemainingChildren(returnFiber, child.sibling);\n                                var _existing = useFiber(child, element.props);\n                                coerceRef(returnFiber, child, _existing, element);\n                                _existing.return = returnFiber;\n                                {\n                                    _existing._debugOwner = element._owner;\n                                    _existing._debugInfo = debugInfo;\n                                }\n                                return _existing;\n                            }\n                        } // Didn't match.\n                        deleteRemainingChildren(returnFiber, child);\n                        break;\n                    } else {\n                        deleteChild(returnFiber, child);\n                    }\n                    child = child.sibling;\n                }\n                if (element.type === REACT_FRAGMENT_TYPE) {\n                    var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n                    created.return = returnFiber;\n                    {\n                        created._debugInfo = debugInfo;\n                    }\n                    validateFragmentProps(element, created, returnFiber);\n                    return created;\n                } else {\n                    var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n                    coerceRef(returnFiber, currentFirstChild, _created4, element);\n                    _created4.return = returnFiber;\n                    {\n                        _created4._debugInfo = debugInfo;\n                    }\n                    return _created4;\n                }\n            }\n            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes, debugInfo) {\n                var key = portal.key;\n                var child = currentFirstChild;\n                while(child !== null){\n                    // TODO: If key === null and child.key === null, then this only applies to\n                    // the first item in the list.\n                    if (child.key === key) {\n                        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n                            deleteRemainingChildren(returnFiber, child.sibling);\n                            var existing = useFiber(child, portal.children || []);\n                            existing.return = returnFiber;\n                            return existing;\n                        } else {\n                            deleteRemainingChildren(returnFiber, child);\n                            break;\n                        }\n                    } else {\n                        deleteChild(returnFiber, child);\n                    }\n                    child = child.sibling;\n                }\n                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n                created.return = returnFiber;\n                return created;\n            } // This API will tag the children with the side-effect of the reconciliation\n            // itself. They will be added to the side-effect list as we pass through the\n            // children and the parent.\n            function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes, debugInfo) {\n                // This function is only recursive for Usables/Lazy and not nested arrays.\n                // That's so that using a Lazy wrapper is unobservable to the Fragment\n                // convention.\n                // If the top level item is an array, we treat it as a set of children,\n                // not as a fragment. Nested arrays on the other hand will be treated as\n                // fragment nodes. Recursion happens at the normal flow.\n                // Handle top level unkeyed fragments as if they were arrays.\n                // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n                // We treat the ambiguous cases above the same.\n                // We don't use recursion here because a fragment inside a fragment\n                // is no longer considered \"top level\" for these purposes.\n                var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n                if (isUnkeyedTopLevelFragment) {\n                    validateFragmentProps(newChild, null, returnFiber);\n                    newChild = newChild.props.children;\n                } // Handle object types\n                if (typeof newChild === 'object' && newChild !== null) {\n                    switch(newChild.$$typeof){\n                        case REACT_ELEMENT_TYPE:\n                            return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo)));\n                        case REACT_PORTAL_TYPE:\n                            return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n                        case REACT_LAZY_TYPE:\n                            var payload = newChild._payload;\n                            var init = newChild._init;\n                            return reconcileChildFibersImpl(returnFiber, currentFirstChild, init(payload), lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n                    }\n                    if (isArray(newChild)) {\n                        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n                    }\n                    if (getIteratorFn(newChild)) {\n                        return reconcileChildrenIteratable(returnFiber, currentFirstChild, newChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n                    }\n                    // a child position, it unwraps it using the same algorithm as `use`. For\n                    // example, for promises, React will throw an exception to unwind the\n                    // stack, then replay the component once the promise resolves.\n                    //\n                    // A difference from `use` is that React will keep unwrapping the value\n                    // until it reaches a non-Usable type.\n                    //\n                    // e.g. Usable<Usable<Usable<T>>> should resolve to T\n                    //\n                    // The structure is a bit unfortunate. Ideally, we shouldn't need to\n                    // replay the entire begin phase of the parent fiber in order to reconcile\n                    // the children again. This would require a somewhat significant refactor,\n                    // because reconcilation happens deep within the begin phase, and\n                    // depending on the type of work, not always at the end. We should\n                    // consider as an future improvement.\n                    if (typeof newChild.then === 'function') {\n                        var thenable = newChild;\n                        return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(thenable), lanes, mergeDebugInfo(debugInfo, thenable._debugInfo));\n                    }\n                    if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n                        var context = newChild;\n                        return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, context, lanes), lanes, debugInfo);\n                    }\n                    throwOnInvalidObjectType(returnFiber, newChild);\n                }\n                if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number' || typeof newChild === 'bigint') {\n                    return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n                }\n                {\n                    if (typeof newChild === 'function') {\n                        warnOnFunctionType(returnFiber, newChild);\n                    }\n                    if (typeof newChild === 'symbol') {\n                        warnOnSymbolType(returnFiber, newChild);\n                    }\n                }\n                return deleteRemainingChildren(returnFiber, currentFirstChild);\n            }\n            function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n                // This indirection only exists so we can reset `thenableState` at the end.\n                // It should get inlined by Closure.\n                thenableIndexCounter$1 = 0;\n                var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes, null // debugInfo\n                );\n                thenableState$1 = null; // Don't bother to reset `thenableIndexCounter` to 0 because it always gets\n                // set at the beginning.\n                return firstChildFiber;\n            }\n            return reconcileChildFibers;\n        }\n        var reconcileChildFibers = createChildReconciler(true);\n        var mountChildFibers = createChildReconciler(false);\n        function resetChildReconcilerOnUnwind() {\n            // On unwind, clear any pending thenables that were used.\n            thenableState$1 = null;\n            thenableIndexCounter$1 = 0;\n        }\n        function cloneChildFibers(current, workInProgress) {\n            if (current !== null && workInProgress.child !== current.child) {\n                throw new Error('Resuming work not yet implemented.');\n            }\n            if (workInProgress.child === null) {\n                return;\n            }\n            var currentChild = workInProgress.child;\n            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n            workInProgress.child = newChild;\n            newChild.return = workInProgress;\n            while(currentChild.sibling !== null){\n                currentChild = currentChild.sibling;\n                newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n                newChild.return = workInProgress;\n            }\n            newChild.sibling = null;\n        } // Reset a workInProgress child set to prepare it for a second pass.\n        function resetChildFibers(workInProgress, lanes) {\n            var child = workInProgress.child;\n            while(child !== null){\n                resetWorkInProgress(child, lanes);\n                child = child.sibling;\n            }\n        }\n        // TODO: This isn't being used yet, but it's intended to replace the\n        // InvisibleParentContext that is currently managed by SuspenseContext.\n        var currentTreeHiddenStackCursor = createCursor(null);\n        var prevEntangledRenderLanesCursor = createCursor(NoLanes);\n        function pushHiddenContext(fiber, context) {\n            var prevEntangledRenderLanes = getEntangledRenderLanes();\n            push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);\n            push(currentTreeHiddenStackCursor, context, fiber); // When rendering a subtree that's currently hidden, we must include all\n            // lanes that would have rendered if the hidden subtree hadn't been deferred.\n            // That is, in order to reveal content from hidden -> visible, we must commit\n            // all the updates that we skipped when we originally hid the tree.\n            setEntangledRenderLanes(mergeLanes(prevEntangledRenderLanes, context.baseLanes));\n        }\n        function reuseHiddenContextOnStack(fiber) {\n            // This subtree is not currently hidden, so we don't need to add any lanes\n            // to the render lanes. But we still need to push something to avoid a\n            // context mismatch. Reuse the existing context on the stack.\n            push(prevEntangledRenderLanesCursor, getEntangledRenderLanes(), fiber);\n            push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current, fiber);\n        }\n        function popHiddenContext(fiber) {\n            // Restore the previous render lanes from the stack\n            setEntangledRenderLanes(prevEntangledRenderLanesCursor.current);\n            pop(currentTreeHiddenStackCursor, fiber);\n            pop(prevEntangledRenderLanesCursor, fiber);\n        }\n        function isCurrentTreeHidden() {\n            return currentTreeHiddenStackCursor.current !== null;\n        }\n        // suspends, i.e. it's the nearest `catch` block on the stack.\n        var suspenseHandlerStackCursor = createCursor(null); // Represents the outermost boundary that is not visible in the current tree.\n        // Everything above this is the \"shell\". When this is null, it means we're\n        // rendering in the shell of the app. If it's non-null, it means we're rendering\n        // deeper than the shell, inside a new tree that wasn't already visible.\n        //\n        // The main way we use this concept is to determine whether showing a fallback\n        // would result in a desirable or undesirable loading state. Activing a fallback\n        // in the shell is considered an undersirable loading state, because it would\n        // mean hiding visible (albeit stale) content in the current tree — we prefer to\n        // show the stale content, rather than switch to a fallback. But showing a\n        // fallback in a new tree is fine, because there's no stale content to\n        // prefer instead.\n        var shellBoundary = null;\n        function getShellBoundary() {\n            return shellBoundary;\n        }\n        function pushPrimaryTreeSuspenseHandler(handler) {\n            // TODO: Pass as argument\n            var current = handler.alternate;\n            // propagated a single level. For example, when ForceSuspenseFallback is set,\n            // it should only force the nearest Suspense boundary into fallback mode.\n            pushSuspenseListContext(handler, setDefaultShallowSuspenseListContext(suspenseStackCursor.current)); // Experimental feature: Some Suspense boundaries are marked as having an\n            // to push a nested Suspense handler, because it will get replaced by the\n            // outer fallback, anyway. Consider this as a future optimization.\n            push(suspenseHandlerStackCursor, handler, handler);\n            if (shellBoundary === null) {\n                if (current === null || isCurrentTreeHidden()) {\n                    // This boundary is not visible in the current UI.\n                    shellBoundary = handler;\n                } else {\n                    var prevState = current.memoizedState;\n                    if (prevState !== null) {\n                        // This boundary is showing a fallback in the current UI.\n                        shellBoundary = handler;\n                    }\n                }\n            }\n        }\n        function pushFallbackTreeSuspenseHandler(fiber) {\n            // We're about to render the fallback. If something in the fallback suspends,\n            // it's akin to throwing inside of a `catch` block. This boundary should not\n            // capture. Reuse the existing handler on the stack.\n            reuseSuspenseHandlerOnStack(fiber);\n        }\n        function pushOffscreenSuspenseHandler(fiber) {\n            if (fiber.tag === OffscreenComponent) {\n                // A SuspenseList context is only pushed here to avoid a push/pop mismatch.\n                // Reuse the current value on the stack.\n                // TODO: We can avoid needing to push here by by forking popSuspenseHandler\n                // into separate functions for Suspense and Offscreen.\n                pushSuspenseListContext(fiber, suspenseStackCursor.current);\n                push(suspenseHandlerStackCursor, fiber, fiber);\n                if (shellBoundary !== null) ;\n                else {\n                    var current = fiber.alternate;\n                    if (current !== null) {\n                        var prevState = current.memoizedState;\n                        if (prevState !== null) {\n                            // This is the first boundary in the stack that's already showing\n                            // a fallback. So everything outside is considered the shell.\n                            shellBoundary = fiber;\n                        }\n                    }\n                }\n            } else {\n                // This is a LegacyHidden component.\n                reuseSuspenseHandlerOnStack(fiber);\n            }\n        }\n        function reuseSuspenseHandlerOnStack(fiber) {\n            pushSuspenseListContext(fiber, suspenseStackCursor.current);\n            push(suspenseHandlerStackCursor, getSuspenseHandler(), fiber);\n        }\n        function getSuspenseHandler() {\n            return suspenseHandlerStackCursor.current;\n        }\n        function popSuspenseHandler(fiber) {\n            pop(suspenseHandlerStackCursor, fiber);\n            if (shellBoundary === fiber) {\n                // Popping back into the shell.\n                shellBoundary = null;\n            }\n            popSuspenseListContext(fiber);\n        } // SuspenseList context\n        // TODO: Move to a separate module? We may change the SuspenseList\n        // implementation to hide/show in the commit phase, anyway.\n        var DefaultSuspenseContext = 0;\n        var SubtreeSuspenseContextMask = 1; // ForceSuspenseFallback can be used by SuspenseList to force newly added\n        // items into their fallback state during one of the render passes.\n        var ForceSuspenseFallback = 2;\n        var suspenseStackCursor = createCursor(DefaultSuspenseContext);\n        function hasSuspenseListContext(parentContext, flag) {\n            return (parentContext & flag) !== 0;\n        }\n        function setDefaultShallowSuspenseListContext(parentContext) {\n            return parentContext & SubtreeSuspenseContextMask;\n        }\n        function setShallowSuspenseListContext(parentContext, shallowContext) {\n            return parentContext & SubtreeSuspenseContextMask | shallowContext;\n        }\n        function pushSuspenseListContext(fiber, newContext) {\n            push(suspenseStackCursor, newContext, fiber);\n        }\n        function popSuspenseListContext(fiber) {\n            pop(suspenseStackCursor, fiber);\n        }\n        // A non-null SuspenseState means that it is blocked for one reason or another.\n        // - A non-null dehydrated field means it's blocked pending hydration.\n        //   - A non-null dehydrated field can use isSuspenseInstancePending or\n        //     isSuspenseInstanceFallback to query the reason for being dehydrated.\n        // - A null dehydrated field means it's blocked by something suspending and\n        //   we're currently showing a fallback instead.\n        function findFirstSuspended(row) {\n            var node = row;\n            while(node !== null){\n                if (node.tag === SuspenseComponent) {\n                    var state = node.memoizedState;\n                    if (state !== null) {\n                        var dehydrated = state.dehydrated;\n                        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n                            return node;\n                        }\n                    }\n                } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n                // keep track of whether it suspended or not.\n                node.memoizedProps.revealOrder !== undefined) {\n                    var didSuspend = (node.flags & DidCapture) !== NoFlags$1;\n                    if (didSuspend) {\n                        return node;\n                    }\n                } else if (node.child !== null) {\n                    node.child.return = node;\n                    node = node.child;\n                    continue;\n                }\n                if (node === row) {\n                    return null;\n                }\n                while(node.sibling === null){\n                    if (node.return === null || node.return === row) {\n                        return null;\n                    }\n                    node = node.return;\n                }\n                node.sibling.return = node.return;\n                node = node.sibling;\n            }\n            return null;\n        }\n        var NoFlags = /*   */ 0; // Represents whether effect should fire.\n        var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.\n        var Insertion = /* */ 2;\n        var Layout = /*    */ 4;\n        var Passive = /*   */ 8;\n        var didWarnAboutMismatchedHooksForComponent;\n        var didWarnUncachedGetSnapshot;\n        var didWarnAboutUseWrappedInTryCatch;\n        var didWarnAboutAsyncClientComponent;\n        var didWarnAboutUseFormState;\n        {\n            didWarnAboutMismatchedHooksForComponent = new Set();\n            didWarnAboutUseWrappedInTryCatch = new Set();\n            didWarnAboutAsyncClientComponent = new Set();\n            didWarnAboutUseFormState = new Set();\n        }\n        // lifetime of an effect. In Rust terms, a RefCell. We use it to store the\n        // \"destroy\" function that is returned from an effect, because that is stateful.\n        // The field is `undefined` if the effect is unmounted, or if the effect ran\n        // but is not stateful. We don't explicitly track whether the effect is mounted\n        // or unmounted because that can be inferred by the hiddenness of the fiber in\n        // the tree, i.e. whether there is a hidden Offscreen fiber above it.\n        //\n        // It's unfortunate that this is stored on a separate object, because it adds\n        // more memory per effect instance, but it's conceptually sound. I think there's\n        // likely a better data structure we could use for effects; perhaps just one\n        // array of effect instances per fiber. But I think this is OK for now despite\n        // the additional memory and we can follow up with performance\n        // optimizations later.\n        // These are set right before calling the component.\n        var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n        // the work-in-progress hook.\n        var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n        // current hook list is the list that belongs to the current fiber. The\n        // work-in-progress hook list is a new list that will be added to the\n        // work-in-progress fiber.\n        var currentHook = null;\n        var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n        // does not get reset if we do another render pass; only when we're completely\n        // finished evaluating this component. This is an optimization so we know\n        // whether we need to clear render phase updates after a throw.\n        var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n        // gets reset after each attempt.\n        // TODO: Maybe there's some way to consolidate this with\n        // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n        var didScheduleRenderPhaseUpdateDuringThisPass = false;\n        var shouldDoubleInvokeUserFnsInHooksDEV = false; // Counts the number of useId hooks in this component.\n        var localIdCounter = 0; // Counts number of `use`-d thenables\n        var thenableIndexCounter = 0;\n        var thenableState = null; // Used for ids that are generated completely client-side (i.e. not during\n        // hydration). This counter is global, so client ids are not stable across\n        // render attempts.\n        var globalClientIdCounter = 0;\n        var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n        var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n        // The list stores the order of hooks used during the initial render (mount).\n        // Subsequent renders (updates) reference this list.\n        var hookTypesDev = null;\n        var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n        // the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n        // When true, such Hooks will always be \"remounted\". Only used during hot reload.\n        var ignorePreviousDependencies = false;\n        function mountHookTypesDev() {\n            {\n                var hookName = currentHookNameInDev;\n                if (hookTypesDev === null) {\n                    hookTypesDev = [\n                        hookName\n                    ];\n                } else {\n                    hookTypesDev.push(hookName);\n                }\n            }\n        }\n        function updateHookTypesDev() {\n            {\n                var hookName = currentHookNameInDev;\n                if (hookTypesDev !== null) {\n                    hookTypesUpdateIndexDev++;\n                    if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n                        warnOnHookMismatchInDev(hookName);\n                    }\n                }\n            }\n        }\n        function checkDepsAreArrayDev(deps) {\n            {\n                if (deps !== undefined && deps !== null && !isArray(deps)) {\n                    // Verify deps, but only on mount to avoid extra checks.\n                    // It's unlikely their type would change as usually you define them inline.\n                    error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n                }\n            }\n        }\n        function warnOnHookMismatchInDev(currentHookName) {\n            {\n                var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n                if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n                    didWarnAboutMismatchedHooksForComponent.add(componentName);\n                    if (hookTypesDev !== null) {\n                        var table = '';\n                        var secondColumnStart = 30;\n                        for(var i = 0; i <= hookTypesUpdateIndexDev; i++){\n                            var oldHookName = hookTypesDev[i];\n                            var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n                            var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n                            // lol @ IE not supporting String#repeat\n                            while(row.length < secondColumnStart){\n                                row += ' ';\n                            }\n                            row += newHookName + '\\n';\n                            table += row;\n                        }\n                        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n                    }\n                }\n            }\n        }\n        function warnOnUseFormStateInDev() {\n            {\n                var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n                if (!didWarnAboutUseFormState.has(componentName)) {\n                    didWarnAboutUseFormState.add(componentName);\n                    error('ReactDOM.useFormState has been renamed to React.useActionState. ' + 'Please update %s to use React.useActionState.', componentName);\n                }\n            }\n        }\n        function warnIfAsyncClientComponent(Component) {\n            {\n                // This dev-only check only works for detecting native async functions,\n                // not transpiled ones. There's also a prod check that we use to prevent\n                // async client components from crashing the app; the prod one works even\n                // for transpiled async functions. Neither mechanism is completely\n                // bulletproof but together they cover the most common cases.\n                var isAsyncFunction = Object.prototype.toString.call(Component) === '[object AsyncFunction]' || // $FlowIgnore[method-unbinding]\n                Object.prototype.toString.call(Component) === '[object AsyncGeneratorFunction]';\n                if (isAsyncFunction) {\n                    // Encountered an async Client Component. This is not yet supported.\n                    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n                    if (!didWarnAboutAsyncClientComponent.has(componentName)) {\n                        didWarnAboutAsyncClientComponent.add(componentName);\n                        error('async/await is not yet supported in Client Components, only ' + 'Server Components. This error is often caused by accidentally ' + \"adding `'use client'` to a module that was originally written \" + 'for the server.');\n                    }\n                }\n            }\n        }\n        function throwInvalidHookError() {\n            throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.');\n        }\n        function areHookInputsEqual(nextDeps, prevDeps) {\n            {\n                if (ignorePreviousDependencies) {\n                    // Only true when this component is being hot reloaded.\n                    return false;\n                }\n            }\n            if (prevDeps === null) {\n                {\n                    error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n                }\n                return false;\n            }\n            {\n                // Don't bother comparing lengths in prod because these arrays should be\n                // passed inline.\n                if (nextDeps.length !== prevDeps.length) {\n                    error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n                }\n            }\n            for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){\n                // $FlowFixMe[incompatible-use] found when upgrading Flow\n                if (objectIs(nextDeps[i], prevDeps[i])) {\n                    continue;\n                }\n                return false;\n            }\n            return true;\n        }\n        function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n            renderLanes = nextRenderLanes;\n            currentlyRenderingFiber$1 = workInProgress;\n            {\n                hookTypesDev = current !== null ? current._debugHookTypes : null;\n                hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n                ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n                warnIfAsyncClientComponent(Component);\n            }\n            workInProgress.memoizedState = null;\n            workInProgress.updateQueue = null;\n            workInProgress.lanes = NoLanes; // The following should have already been reset\n            // currentHook = null;\n            // workInProgressHook = null;\n            // didScheduleRenderPhaseUpdate = false;\n            // localIdCounter = 0;\n            // thenableIndexCounter = 0;\n            // thenableState = null;\n            // TODO Warn if no hooks are used at all during mount, then some are used during update.\n            // Currently we will identify the update render as a mount because memoizedState === null.\n            // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n            // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n            // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n            // so memoizedState would be null during updates and mounts.\n            {\n                if (current !== null && current.memoizedState !== null) {\n                    ReactSharedInternals.H = HooksDispatcherOnUpdateInDEV;\n                } else if (hookTypesDev !== null) {\n                    // This dispatcher handles an edge case where a component is updating,\n                    // but no stateful hooks have been used.\n                    // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n                    // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n                    // This dispatcher does that.\n                    ReactSharedInternals.H = HooksDispatcherOnMountWithHookTypesInDEV;\n                } else {\n                    ReactSharedInternals.H = HooksDispatcherOnMountInDEV;\n                }\n            }\n            // help detect side effects. The logic for how this is implemented for in\n            // hook components is a bit complex so let's break it down.\n            //\n            // We will invoke the entire component function twice. However, during the\n            // second invocation of the component, the hook state from the first\n            // invocation will be reused. That means things like `useMemo` functions won't\n            // run again, because the deps will match and the memoized result will\n            // be reused.\n            //\n            // We want memoized functions to run twice, too, so account for this, user\n            // functions are double invoked during the *first* invocation of the component\n            // function, and are *not* double invoked during the second incovation:\n            //\n            // - First execution of component function: user functions are double invoked\n            // - Second execution of component function (in Strict Mode, during\n            //   development): user functions are not double invoked.\n            //\n            // This is intentional for a few reasons; most importantly, it's because of\n            // how `use` works when something suspends: it reuses the promise that was\n            // passed during the first attempt. This is itself a form of memoization.\n            // We need to be able to memoize the reactive inputs to the `use` call using\n            // a hook (i.e. `useMemo`), which means, the reactive inputs to `use` must\n            // come from the same component invocation as the output.\n            //\n            // There are plenty of tests to ensure this behavior is correct.\n            var shouldDoubleRenderDEV = (workInProgress.mode & StrictLegacyMode) !== NoMode;\n            shouldDoubleInvokeUserFnsInHooksDEV = shouldDoubleRenderDEV;\n            var children = callComponentInDEV(Component, props, secondArg);\n            shouldDoubleInvokeUserFnsInHooksDEV = false; // Check if there was a render phase update\n            if (didScheduleRenderPhaseUpdateDuringThisPass) {\n                // Keep rendering until the component stabilizes (there are no more render\n                // phase updates).\n                children = renderWithHooksAgain(workInProgress, Component, props, secondArg);\n            }\n            if (shouldDoubleRenderDEV) {\n                // In development, components are invoked twice to help detect side effects.\n                setIsStrictModeForDevtools(true);\n                try {\n                    children = renderWithHooksAgain(workInProgress, Component, props, secondArg);\n                } finally{\n                    setIsStrictModeForDevtools(false);\n                }\n            }\n            finishRenderingHooks(current, workInProgress);\n            return children;\n        }\n        function finishRenderingHooks(current, workInProgress, Component) {\n            {\n                workInProgress._debugHookTypes = hookTypesDev;\n            }\n            // at the beginning of the render phase and there's no re-entrance.\n            ReactSharedInternals.H = ContextOnlyDispatcher; // This check uses currentHook so that it works the same in DEV and prod bundles.\n            // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n            renderLanes = NoLanes;\n            currentlyRenderingFiber$1 = null;\n            currentHook = null;\n            workInProgressHook = null;\n            {\n                currentHookNameInDev = null;\n                hookTypesDev = null;\n                hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n                // render. If this fires, it suggests that we incorrectly reset the static\n                // flags in some other part of the codebase. This has happened before, for\n                // example, in the SuspenseList implementation.\n                if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // and creates false positives. To make this work in legacy mode, we'd\n                // need to mark fibers that commit in an incomplete state, somehow. For\n                // now I'll disable the warning that most of the bugs that would trigger\n                // it are either exclusive to concurrent mode or exist in both.\n                disableLegacyMode) {\n                    error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n                }\n            }\n            didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n            // localIdCounter = 0;\n            thenableIndexCounter = 0;\n            thenableState = null;\n            if (didRenderTooFewHooks) {\n                throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n            }\n            {\n                if (checkIfUseWrappedInTryCatch()) {\n                    var componentName = getComponentNameFromFiber(workInProgress) || 'Unknown';\n                    if (!didWarnAboutUseWrappedInTryCatch.has(componentName) && // This warning also fires if you suspend with `use` inside an\n                    // async component. Since we warn for that above, we'll silence this\n                    // second warning by checking here.\n                    !didWarnAboutAsyncClientComponent.has(componentName)) {\n                        didWarnAboutUseWrappedInTryCatch.add(componentName);\n                        error('`use` was called from inside a try/catch block. This is not allowed ' + 'and can lead to unexpected behavior. To handle errors triggered ' + 'by `use`, wrap your component in a error boundary.');\n                    }\n                }\n            }\n        }\n        function replaySuspendedComponentWithHooks(current, workInProgress, Component, props, secondArg) {\n            // This function is used to replay a component that previously suspended,\n            // after its data resolves.\n            //\n            // It's a simplified version of renderWithHooks, but it doesn't need to do\n            // most of the set up work because they weren't reset when we suspended; they\n            // only get reset when the component either completes (finishRenderingHooks)\n            // or unwinds (resetHooksOnUnwind).\n            {\n                hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n                ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n            }\n            var children = renderWithHooksAgain(workInProgress, Component, props, secondArg);\n            finishRenderingHooks(current, workInProgress);\n            return children;\n        }\n        function renderWithHooksAgain(workInProgress, Component, props, secondArg) {\n            // This is used to perform another render pass. It's used when setState is\n            // called during render, and for double invoking components in Strict Mode\n            // during development.\n            //\n            // The state from the previous pass is reused whenever possible. So, state\n            // updates that were already processed are not processed again, and memoized\n            // functions (`useMemo`) are not invoked again.\n            //\n            // Keep rendering in a loop for as long as render phase updates continue to\n            // be scheduled. Use a counter to prevent infinite loops.\n            currentlyRenderingFiber$1 = workInProgress;\n            var numberOfReRenders = 0;\n            var children;\n            do {\n                if (didScheduleRenderPhaseUpdateDuringThisPass) {\n                    // It's possible that a use() value depended on a state that was updated in\n                    // this rerender, so we need to watch for different thenables this time.\n                    thenableState = null;\n                }\n                thenableIndexCounter = 0;\n                didScheduleRenderPhaseUpdateDuringThisPass = false;\n                if (numberOfReRenders >= RE_RENDER_LIMIT) {\n                    throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n                }\n                numberOfReRenders += 1;\n                {\n                    // Even when hot reloading, allow dependencies to stabilize\n                    // after first render to prevent infinite render phase updates.\n                    ignorePreviousDependencies = false;\n                }\n                currentHook = null;\n                workInProgressHook = null;\n                workInProgress.updateQueue = null;\n                {\n                    // Also validate hook order for cascading updates.\n                    hookTypesUpdateIndexDev = -1;\n                }\n                ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;\n                children = callComponentInDEV(Component, props, secondArg);\n            }while (didScheduleRenderPhaseUpdateDuringThisPass);\n            return children;\n        }\n        function renderTransitionAwareHostComponentWithHooks(current, workInProgress, lanes) {\n            return renderWithHooks(current, workInProgress, TransitionAwareHostComponent, null, null, lanes);\n        }\n        function TransitionAwareHostComponent() {\n            var dispatcher = ReactSharedInternals.H;\n            var _dispatcher$useState = dispatcher.useState(), maybeThenable = _dispatcher$useState[0];\n            var nextState;\n            if (typeof maybeThenable.then === 'function') {\n                var thenable = maybeThenable;\n                nextState = useThenable(thenable);\n            } else {\n                var status = maybeThenable;\n                nextState = status;\n            } // The \"reset state\" is an object. If it changes, that means something\n            // requested that we reset the form.\n            var _dispatcher$useState2 = dispatcher.useState(), nextResetState = _dispatcher$useState2[0];\n            var prevResetState = currentHook !== null ? currentHook.memoizedState : null;\n            if (prevResetState !== nextResetState) {\n                // Schedule a form reset\n                currentlyRenderingFiber$1.flags |= FormReset;\n            }\n            return nextState;\n        }\n        function checkDidRenderIdHook() {\n            // This should be called immediately after every renderWithHooks call.\n            // Conceptually, it's part of the return value of renderWithHooks; it's only a\n            // separate function to avoid using an array tuple.\n            var didRenderIdHook = localIdCounter !== 0;\n            localIdCounter = 0;\n            return didRenderIdHook;\n        }\n        function bailoutHooks(current, workInProgress, lanes) {\n            workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n            // complete phase (bubbleProperties).\n            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n                workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive$1 | Update);\n            } else {\n                workInProgress.flags &= ~(Passive$1 | Update);\n            }\n            current.lanes = removeLanes(current.lanes, lanes);\n        }\n        function resetHooksAfterThrow() {\n            // This is called immediaetly after a throw. It shouldn't reset the entire\n            // module state, because the work loop might decide to replay the component\n            // again without rewinding.\n            //\n            // It should only reset things like the current dispatcher, to prevent hooks\n            // from being called outside of a component.\n            currentlyRenderingFiber$1 = null; // We can assume the previous dispatcher is always this one, since we set it\n            // at the beginning of the render phase and there's no re-entrance.\n            ReactSharedInternals.H = ContextOnlyDispatcher;\n        }\n        function resetHooksOnUnwind(workInProgress) {\n            if (didScheduleRenderPhaseUpdate) {\n                // There were render phase updates. These are only valid for this render\n                // phase, which we are now aborting. Remove the updates from the queues so\n                // they do not persist to the next render. Do not remove updates from hooks\n                // that weren't processed.\n                //\n                // Only reset the updates from the queue if it has a clone. If it does\n                // not have a clone, that means it wasn't processed, and the updates were\n                // scheduled before we entered the render phase.\n                var hook = workInProgress.memoizedState;\n                while(hook !== null){\n                    var queue = hook.queue;\n                    if (queue !== null) {\n                        queue.pending = null;\n                    }\n                    hook = hook.next;\n                }\n                didScheduleRenderPhaseUpdate = false;\n            }\n            renderLanes = NoLanes;\n            currentlyRenderingFiber$1 = null;\n            currentHook = null;\n            workInProgressHook = null;\n            {\n                hookTypesDev = null;\n                hookTypesUpdateIndexDev = -1;\n                currentHookNameInDev = null;\n            }\n            didScheduleRenderPhaseUpdateDuringThisPass = false;\n            localIdCounter = 0;\n            thenableIndexCounter = 0;\n            thenableState = null;\n        }\n        function mountWorkInProgressHook() {\n            var hook = {\n                memoizedState: null,\n                baseState: null,\n                baseQueue: null,\n                queue: null,\n                next: null\n            };\n            if (workInProgressHook === null) {\n                // This is the first hook in the list\n                currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n            } else {\n                // Append to the end of the list\n                workInProgressHook = workInProgressHook.next = hook;\n            }\n            return workInProgressHook;\n        }\n        function updateWorkInProgressHook() {\n            // This function is used both for updates and for re-renders triggered by a\n            // render phase update. It assumes there is either a current hook we can\n            // clone, or a work-in-progress hook from a previous render pass that we can\n            // use as a base.\n            var nextCurrentHook;\n            if (currentHook === null) {\n                var current = currentlyRenderingFiber$1.alternate;\n                if (current !== null) {\n                    nextCurrentHook = current.memoizedState;\n                } else {\n                    nextCurrentHook = null;\n                }\n            } else {\n                nextCurrentHook = currentHook.next;\n            }\n            var nextWorkInProgressHook;\n            if (workInProgressHook === null) {\n                nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n            } else {\n                nextWorkInProgressHook = workInProgressHook.next;\n            }\n            if (nextWorkInProgressHook !== null) {\n                // There's already a work-in-progress. Reuse it.\n                workInProgressHook = nextWorkInProgressHook;\n                nextWorkInProgressHook = workInProgressHook.next;\n                currentHook = nextCurrentHook;\n            } else {\n                // Clone from the current hook.\n                if (nextCurrentHook === null) {\n                    var currentFiber = currentlyRenderingFiber$1.alternate;\n                    if (currentFiber === null) {\n                        // This is the initial render. This branch is reached when the component\n                        // suspends, resumes, then renders an additional hook.\n                        // Should never be reached because we should switch to the mount dispatcher first.\n                        throw new Error('Update hook called on initial render. This is likely a bug in React. Please file an issue.');\n                    } else {\n                        // This is an update. We should always have a current hook.\n                        throw new Error('Rendered more hooks than during the previous render.');\n                    }\n                }\n                currentHook = nextCurrentHook;\n                var newHook = {\n                    memoizedState: currentHook.memoizedState,\n                    baseState: currentHook.baseState,\n                    baseQueue: currentHook.baseQueue,\n                    queue: currentHook.queue,\n                    next: null\n                };\n                if (workInProgressHook === null) {\n                    // This is the first hook in the list.\n                    currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n                } else {\n                    // Append to the end of the list.\n                    workInProgressHook = workInProgressHook.next = newHook;\n                }\n            }\n            return workInProgressHook;\n        } // NOTE: defining two versions of this function to avoid size impact when this feature is disabled.\n        // Previously this function was inlined, the additional `memoCache` property makes it not inlined.\n        var createFunctionComponentUpdateQueue;\n        {\n            createFunctionComponentUpdateQueue = function() {\n                return {\n                    lastEffect: null,\n                    events: null,\n                    stores: null,\n                    memoCache: null\n                };\n            };\n        }\n        function useThenable(thenable) {\n            // Track the position of the thenable within this fiber.\n            var index = thenableIndexCounter;\n            thenableIndexCounter += 1;\n            if (thenableState === null) {\n                thenableState = createThenableState();\n            }\n            var result = trackUsedThenable(thenableState, thenable, index); // When something suspends with `use`, we replay the component with the\n            // \"re-render\" dispatcher instead of the \"mount\" or \"update\" dispatcher.\n            //\n            // But if there are additional hooks that occur after the `use` invocation\n            // that suspended, they wouldn't have been processed during the previous\n            // attempt. So after we invoke `use` again, we may need to switch from the\n            // \"re-render\" dispatcher back to the \"mount\" or \"update\" dispatcher. That's\n            // what the following logic accounts for.\n            //\n            // TODO: Theoretically this logic only needs to go into the rerender\n            // dispatcher. Could optimize, but probably not be worth it.\n            // This is the same logic as in updateWorkInProgressHook.\n            var workInProgressFiber = currentlyRenderingFiber$1;\n            var nextWorkInProgressHook = workInProgressHook === null ? // the fiber.\n            workInProgressFiber.memoizedState : workInProgressHook.next;\n            if (nextWorkInProgressHook !== null) ;\n            else {\n                // There are no remaining hooks from the previous attempt. We're no longer\n                // in \"re-render\" mode. Switch to the normal mount or update dispatcher.\n                //\n                // This is the same as the logic in renderWithHooks, except we don't bother\n                // to track the hook types debug information in this case (sufficient to\n                // only do that when nothing suspends).\n                var currentFiber = workInProgressFiber.alternate;\n                {\n                    if (currentFiber !== null && currentFiber.memoizedState !== null) {\n                        ReactSharedInternals.H = HooksDispatcherOnUpdateInDEV;\n                    } else {\n                        ReactSharedInternals.H = HooksDispatcherOnMountInDEV;\n                    }\n                }\n            }\n            return result;\n        }\n        function use(usable) {\n            if (usable !== null && typeof usable === 'object') {\n                // $FlowFixMe[method-unbinding]\n                if (typeof usable.then === 'function') {\n                    // This is a thenable.\n                    var thenable = usable;\n                    return useThenable(thenable);\n                } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {\n                    var context = usable;\n                    return readContext(context);\n                }\n            } // eslint-disable-next-line react-internal/safe-string-coercion\n            throw new Error('An unsupported type was passed to use(): ' + String(usable));\n        }\n        function useMemoCache(size) {\n            var memoCache = null; // Fast-path, load memo cache from wip fiber if already prepared\n            var updateQueue = currentlyRenderingFiber$1.updateQueue;\n            if (updateQueue !== null) {\n                memoCache = updateQueue.memoCache;\n            } // Otherwise clone from the current fiber\n            if (memoCache == null) {\n                var current = currentlyRenderingFiber$1.alternate;\n                if (current !== null) {\n                    var currentUpdateQueue = current.updateQueue;\n                    if (currentUpdateQueue !== null) {\n                        var currentMemoCache = currentUpdateQueue.memoCache;\n                        if (currentMemoCache != null) {\n                            memoCache = {\n                                // When enableNoCloningMemoCache is enabled, instead of treating the\n                                // cache as copy-on-write, like we do with fibers, we share the same\n                                // cache instance across all render attempts, even if the component\n                                // is interrupted before it commits.\n                                //\n                                // If an update is interrupted, either because it suspended or\n                                // because of another update, we can reuse the memoized computations\n                                // from the previous attempt. We can do this because the React\n                                // Compiler performs atomic writes to the memo cache, i.e. it will\n                                // not record the inputs to a memoization without also recording its\n                                // output.\n                                //\n                                // This gives us a form of \"resuming\" within components and hooks.\n                                //\n                                // This only works when updating a component that already mounted.\n                                // It has no impact during initial render, because the memo cache is\n                                // stored on the fiber, and since we have not implemented resuming\n                                // for fibers, it's always a fresh memo cache, anyway.\n                                //\n                                // However, this alone is pretty useful — it happens whenever you\n                                // update the UI with fresh data after a mutation/action, which is\n                                // extremely common in a Suspense-driven (e.g. RSC or Relay) app.\n                                data: currentMemoCache.data.map(function(array) {\n                                    return array.slice();\n                                }),\n                                index: 0\n                            };\n                        }\n                    }\n                }\n            } // Finally fall back to allocating a fresh instance of the cache\n            if (memoCache == null) {\n                memoCache = {\n                    data: [],\n                    index: 0\n                };\n            }\n            if (updateQueue === null) {\n                updateQueue = createFunctionComponentUpdateQueue();\n                currentlyRenderingFiber$1.updateQueue = updateQueue;\n            }\n            updateQueue.memoCache = memoCache;\n            var data = memoCache.data[memoCache.index];\n            if (data === undefined) {\n                data = memoCache.data[memoCache.index] = new Array(size);\n                for(var i = 0; i < size; i++){\n                    data[i] = REACT_MEMO_CACHE_SENTINEL;\n                }\n            } else if (data.length !== size) {\n                // TODO: consider warning or throwing here\n                {\n                    error('Expected a constant size argument for each invocation of useMemoCache. ' + 'The previous cache was allocated with size %s but size %s was requested.', data.length, size);\n                }\n            }\n            memoCache.index++;\n            return data;\n        }\n        function basicStateReducer(state, action) {\n            // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n            return typeof action === 'function' ? action(state) : action;\n        }\n        function mountReducer(reducer, initialArg, init) {\n            var hook = mountWorkInProgressHook();\n            var initialState;\n            if (init !== undefined) {\n                initialState = init(initialArg);\n                if (shouldDoubleInvokeUserFnsInHooksDEV) {\n                    setIsStrictModeForDevtools(true);\n                    init(initialArg);\n                    setIsStrictModeForDevtools(false);\n                }\n            } else {\n                initialState = initialArg;\n            }\n            hook.memoizedState = hook.baseState = initialState;\n            var queue = {\n                pending: null,\n                lanes: NoLanes,\n                dispatch: null,\n                lastRenderedReducer: reducer,\n                lastRenderedState: initialState\n            };\n            hook.queue = queue;\n            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n            return [\n                hook.memoizedState,\n                dispatch\n            ];\n        }\n        function updateReducer(reducer, initialArg, init) {\n            var hook = updateWorkInProgressHook();\n            return updateReducerImpl(hook, currentHook, reducer);\n        }\n        function updateReducerImpl(hook, current, reducer) {\n            var queue = hook.queue;\n            if (queue === null) {\n                throw new Error('Should have a queue. You are likely calling Hooks conditionally, ' + 'which is not allowed. (https://react.dev/link/invalid-hook-call)');\n            }\n            queue.lastRenderedReducer = reducer; // The last rebase update that is NOT part of the base state.\n            var baseQueue = hook.baseQueue; // The last pending update that hasn't been processed yet.\n            var pendingQueue = queue.pending;\n            if (pendingQueue !== null) {\n                // We have new updates that haven't been processed yet.\n                // We'll add them to the base queue.\n                if (baseQueue !== null) {\n                    // Merge the pending queue and the base queue.\n                    var baseFirst = baseQueue.next;\n                    var pendingFirst = pendingQueue.next;\n                    baseQueue.next = pendingFirst;\n                    pendingQueue.next = baseFirst;\n                }\n                {\n                    if (current.baseQueue !== baseQueue) {\n                        // Internal invariant that should never happen, but feasibly could in\n                        // the future if we implement resuming, or some form of that.\n                        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n                    }\n                }\n                current.baseQueue = baseQueue = pendingQueue;\n                queue.pending = null;\n            }\n            var baseState = hook.baseState;\n            if (baseQueue === null) {\n                // If there are no pending updates, then the memoized state should be the\n                // same as the base state. Currently these only diverge in the case of\n                // useOptimistic, because useOptimistic accepts a new baseState on\n                // every render.\n                hook.memoizedState = baseState; // We don't need to call markWorkInProgressReceivedUpdate because\n            // baseState is derived from other reactive values.\n            } else {\n                // We have a queue to process.\n                var first = baseQueue.next;\n                var newState = baseState;\n                var newBaseState = null;\n                var newBaseQueueFirst = null;\n                var newBaseQueueLast = null;\n                var update = first;\n                var didReadFromEntangledAsyncAction = false;\n                do {\n                    // An extra OffscreenLane bit is added to updates that were made to\n                    // a hidden tree, so that we can distinguish them from updates that were\n                    // already there when the tree was hidden.\n                    var updateLane = removeLanes(update.lane, OffscreenLane);\n                    var isHiddenUpdate = updateLane !== update.lane; // Check if this update was made while the tree was hidden. If so, then\n                    // it's not a \"base\" update and we should disregard the extra base lanes\n                    // that were added to renderLanes when we entered the Offscreen tree.\n                    var shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes, updateLane);\n                    if (shouldSkipUpdate) {\n                        // Priority is insufficient. Skip this update. If this is the first\n                        // skipped update, the previous update/state is the new base\n                        // update/state.\n                        var clone = {\n                            lane: updateLane,\n                            revertLane: update.revertLane,\n                            action: update.action,\n                            hasEagerState: update.hasEagerState,\n                            eagerState: update.eagerState,\n                            next: null\n                        };\n                        if (newBaseQueueLast === null) {\n                            newBaseQueueFirst = newBaseQueueLast = clone;\n                            newBaseState = newState;\n                        } else {\n                            newBaseQueueLast = newBaseQueueLast.next = clone;\n                        } // Update the remaining priority in the queue.\n                        // TODO: Don't need to accumulate this. Instead, we can remove\n                        // renderLanes from the original lanes.\n                        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n                        markSkippedUpdateLanes(updateLane);\n                    } else {\n                        // This update does have sufficient priority.\n                        // Check if this is an optimistic update.\n                        var revertLane = update.revertLane;\n                        if (revertLane === NoLane) {\n                            // This is not an optimistic update, and we're going to apply it now.\n                            // But, if there were earlier updates that were skipped, we need to\n                            // leave this update in the queue so it can be rebased later.\n                            if (newBaseQueueLast !== null) {\n                                var _clone = {\n                                    // This update is going to be committed so we never want uncommit\n                                    // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                                    // this will never be skipped by the check above.\n                                    lane: NoLane,\n                                    revertLane: NoLane,\n                                    action: update.action,\n                                    hasEagerState: update.hasEagerState,\n                                    eagerState: update.eagerState,\n                                    next: null\n                                };\n                                newBaseQueueLast = newBaseQueueLast.next = _clone;\n                            } // Check if this update is part of a pending async action. If so,\n                            // we'll need to suspend until the action has finished, so that it's\n                            // batched together with future updates in the same action.\n                            if (updateLane === peekEntangledActionLane()) {\n                                didReadFromEntangledAsyncAction = true;\n                            }\n                        } else {\n                            // This is an optimistic update. If the \"revert\" priority is\n                            // sufficient, don't apply the update. Otherwise, apply the update,\n                            // but leave it in the queue so it can be either reverted or\n                            // rebased in a subsequent render.\n                            if (isSubsetOfLanes(renderLanes, revertLane)) {\n                                // The transition that this optimistic update is associated with\n                                // has finished. Pretend the update doesn't exist by skipping\n                                // over it.\n                                update = update.next; // Check if this update is part of a pending async action. If so,\n                                // we'll need to suspend until the action has finished, so that it's\n                                // batched together with future updates in the same action.\n                                if (revertLane === peekEntangledActionLane()) {\n                                    didReadFromEntangledAsyncAction = true;\n                                }\n                                continue;\n                            } else {\n                                var _clone2 = {\n                                    // Once we commit an optimistic update, we shouldn't uncommit it\n                                    // until the transition it is associated with has finished\n                                    // (represented by revertLane). Using NoLane here works because 0\n                                    // is a subset of all bitmasks, so this will never be skipped by\n                                    // the check above.\n                                    lane: NoLane,\n                                    // Reuse the same revertLane so we know when the transition\n                                    // has finished.\n                                    revertLane: update.revertLane,\n                                    action: update.action,\n                                    hasEagerState: update.hasEagerState,\n                                    eagerState: update.eagerState,\n                                    next: null\n                                };\n                                if (newBaseQueueLast === null) {\n                                    newBaseQueueFirst = newBaseQueueLast = _clone2;\n                                    newBaseState = newState;\n                                } else {\n                                    newBaseQueueLast = newBaseQueueLast.next = _clone2;\n                                } // Update the remaining priority in the queue.\n                                // TODO: Don't need to accumulate this. Instead, we can remove\n                                // renderLanes from the original lanes.\n                                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, revertLane);\n                                markSkippedUpdateLanes(revertLane);\n                            }\n                        } // Process this update.\n                        var action = update.action;\n                        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n                            reducer(newState, action);\n                        }\n                        if (update.hasEagerState) {\n                            // If this update is a state update (not a reducer) and was processed eagerly,\n                            // we can use the eagerly computed state\n                            newState = update.eagerState;\n                        } else {\n                            newState = reducer(newState, action);\n                        }\n                    }\n                    update = update.next;\n                }while (update !== null && update !== first);\n                if (newBaseQueueLast === null) {\n                    newBaseState = newState;\n                } else {\n                    newBaseQueueLast.next = newBaseQueueFirst;\n                } // Mark that the fiber performed work, but only if the new state is\n                // different from the current state.\n                if (!objectIs(newState, hook.memoizedState)) {\n                    markWorkInProgressReceivedUpdate(); // Check if this update is part of a pending async action. If so, we'll\n                    // need to suspend until the action has finished, so that it's batched\n                    // together with future updates in the same action.\n                    // TODO: Once we support hooks inside useMemo (or an equivalent\n                    // memoization boundary like Forget), hoist this logic so that it only\n                    // suspends if the memo boundary produces a new value.\n                    if (didReadFromEntangledAsyncAction) {\n                        var entangledActionThenable = peekEntangledActionThenable();\n                        if (entangledActionThenable !== null) {\n                            // TODO: Instead of the throwing the thenable directly, throw a\n                            // special object like `use` does so we can detect if it's captured\n                            // by userspace.\n                            throw entangledActionThenable;\n                        }\n                    }\n                }\n                hook.memoizedState = newState;\n                hook.baseState = newBaseState;\n                hook.baseQueue = newBaseQueueLast;\n                queue.lastRenderedState = newState;\n            }\n            if (baseQueue === null) {\n                // `queue.lanes` is used for entangling transitions. We can set it back to\n                // zero once the queue is empty.\n                queue.lanes = NoLanes;\n            }\n            var dispatch = queue.dispatch;\n            return [\n                hook.memoizedState,\n                dispatch\n            ];\n        }\n        function rerenderReducer(reducer, initialArg, init) {\n            var hook = updateWorkInProgressHook();\n            var queue = hook.queue;\n            if (queue === null) {\n                throw new Error('Should have a queue. You are likely calling Hooks conditionally, ' + 'which is not allowed. (https://react.dev/link/invalid-hook-call)');\n            }\n            queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n            // work-in-progress hook.\n            var dispatch = queue.dispatch;\n            var lastRenderPhaseUpdate = queue.pending;\n            var newState = hook.memoizedState;\n            if (lastRenderPhaseUpdate !== null) {\n                // The queue doesn't persist past this render pass.\n                queue.pending = null;\n                var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n                var update = firstRenderPhaseUpdate;\n                do {\n                    // Process this render phase update. We don't have to check the\n                    // priority because it will always be the same as the current\n                    // render's.\n                    var action = update.action;\n                    newState = reducer(newState, action);\n                    update = update.next;\n                }while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n                // different from the current state.\n                if (!objectIs(newState, hook.memoizedState)) {\n                    markWorkInProgressReceivedUpdate();\n                }\n                hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n                // the base state unless the queue is empty.\n                // TODO: Not sure if this is the desired semantics, but it's what we\n                // do for gDSFP. I can't remember why.\n                if (hook.baseQueue === null) {\n                    hook.baseState = newState;\n                }\n                queue.lastRenderedState = newState;\n            }\n            return [\n                newState,\n                dispatch\n            ];\n        }\n        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n            var fiber = currentlyRenderingFiber$1;\n            var hook = mountWorkInProgressHook();\n            var nextSnapshot;\n            var isHydrating = getIsHydrating();\n            if (isHydrating) {\n                if (getServerSnapshot === undefined) {\n                    throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n                }\n                nextSnapshot = getServerSnapshot();\n                {\n                    if (!didWarnUncachedGetSnapshot) {\n                        if (nextSnapshot !== getServerSnapshot()) {\n                            error('The result of getServerSnapshot should be cached to avoid an infinite loop');\n                            didWarnUncachedGetSnapshot = true;\n                        }\n                    }\n                }\n            } else {\n                nextSnapshot = getSnapshot();\n                {\n                    if (!didWarnUncachedGetSnapshot) {\n                        var cachedSnapshot = getSnapshot();\n                        if (!objectIs(nextSnapshot, cachedSnapshot)) {\n                            error('The result of getSnapshot should be cached to avoid an infinite loop');\n                            didWarnUncachedGetSnapshot = true;\n                        }\n                    }\n                }\n                // Right before committing, we will walk the tree and check if any of the\n                // stores were mutated.\n                //\n                // We won't do this if we're hydrating server-rendered content, because if\n                // the content is stale, it's already visible anyway. Instead we'll patch\n                // it up in a passive effect.\n                var root = getWorkInProgressRoot();\n                if (root === null) {\n                    throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n                }\n                var rootRenderLanes = getWorkInProgressRootRenderLanes();\n                if (!includesBlockingLane(root, rootRenderLanes)) {\n                    pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n                }\n            } // Read the current snapshot from the store on every render. This breaks the\n            // normal rules of React, and only works because store updates are\n            // always synchronous.\n            hook.memoizedState = nextSnapshot;\n            var inst = {\n                value: nextSnapshot,\n                getSnapshot: getSnapshot\n            };\n            hook.queue = inst; // Schedule an effect to subscribe to the store.\n            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n                subscribe\n            ]); // Schedule an effect to update the mutable instance fields. We will update\n            // this whenever subscribe, getSnapshot, or value changes. Because there's no\n            // clean-up function, and we track the deps correctly, we can call pushEffect\n            // directly, without storing any additional state. For the same reason, we\n            // don't need to set a static flag, either.\n            fiber.flags |= Passive$1;\n            pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null);\n            return nextSnapshot;\n        }\n        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n            var fiber = currentlyRenderingFiber$1;\n            var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n            // normal rules of React, and only works because store updates are\n            // always synchronous.\n            var nextSnapshot;\n            var isHydrating = getIsHydrating();\n            if (isHydrating) {\n                // Needed for strict mode double render\n                if (getServerSnapshot === undefined) {\n                    throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n                }\n                nextSnapshot = getServerSnapshot();\n            } else {\n                nextSnapshot = getSnapshot();\n                {\n                    if (!didWarnUncachedGetSnapshot) {\n                        var cachedSnapshot = getSnapshot();\n                        if (!objectIs(nextSnapshot, cachedSnapshot)) {\n                            error('The result of getSnapshot should be cached to avoid an infinite loop');\n                            didWarnUncachedGetSnapshot = true;\n                        }\n                    }\n                }\n            }\n            var prevSnapshot = (currentHook || hook).memoizedState;\n            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n            if (snapshotChanged) {\n                hook.memoizedState = nextSnapshot;\n                markWorkInProgressReceivedUpdate();\n            }\n            var inst = hook.queue;\n            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n                subscribe\n            ]); // Whenever getSnapshot or subscribe changes, we need to check in the\n            // commit phase if there was an interleaved mutation. In concurrent mode\n            // this can happen all the time, but even in synchronous mode, an earlier\n            // effect may have mutated the store.\n            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the subscribe function changed. We can save some memory by\n            // checking whether we scheduled a subscription effect above.\n            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n                fiber.flags |= Passive$1;\n                pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null); // Unless we're rendering a blocking lane, schedule a consistency check.\n                // Right before committing, we will walk the tree and check if any of the\n                // stores were mutated.\n                var root = getWorkInProgressRoot();\n                if (root === null) {\n                    throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n                }\n                if (!isHydrating && !includesBlockingLane(root, renderLanes)) {\n                    pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n                }\n            }\n            return nextSnapshot;\n        }\n        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n            fiber.flags |= StoreConsistency;\n            var check = {\n                getSnapshot: getSnapshot,\n                value: renderedSnapshot\n            };\n            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n            if (componentUpdateQueue === null) {\n                componentUpdateQueue = createFunctionComponentUpdateQueue();\n                currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n                componentUpdateQueue.stores = [\n                    check\n                ];\n            } else {\n                var stores = componentUpdateQueue.stores;\n                if (stores === null) {\n                    componentUpdateQueue.stores = [\n                        check\n                    ];\n                } else {\n                    stores.push(check);\n                }\n            }\n        }\n        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n            // These are updated in the passive phase\n            inst.value = nextSnapshot;\n            inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n            // have been in an event that fired before the passive effects, or it could\n            // have been in a layout effect. In that case, we would have used the old\n            // snapsho and getSnapshot values to bail out. We need to check one more time.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceStoreRerender(fiber);\n            }\n        }\n        function subscribeToStore(fiber, inst, subscribe) {\n            var handleStoreChange = function() {\n                // The store changed. Check if the snapshot changed since the last time we\n                // read from the store.\n                if (checkIfSnapshotChanged(inst)) {\n                    // Force a re-render.\n                    forceStoreRerender(fiber);\n                }\n            }; // Subscribe to the store and return a clean-up function.\n            return subscribe(handleStoreChange);\n        }\n        function checkIfSnapshotChanged(inst) {\n            var latestGetSnapshot = inst.getSnapshot;\n            var prevValue = inst.value;\n            try {\n                var nextValue = latestGetSnapshot();\n                return !objectIs(prevValue, nextValue);\n            } catch (error) {\n                return true;\n            }\n        }\n        function forceStoreRerender(fiber) {\n            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n            if (root !== null) {\n                scheduleUpdateOnFiber(root, fiber, SyncLane);\n            }\n        }\n        function mountStateImpl(initialState) {\n            var hook = mountWorkInProgressHook();\n            if (typeof initialState === 'function') {\n                var initialStateInitializer = initialState; // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n                initialState = initialStateInitializer();\n                if (shouldDoubleInvokeUserFnsInHooksDEV) {\n                    setIsStrictModeForDevtools(true); // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n                    initialStateInitializer();\n                    setIsStrictModeForDevtools(false);\n                }\n            }\n            hook.memoizedState = hook.baseState = initialState;\n            var queue = {\n                pending: null,\n                lanes: NoLanes,\n                dispatch: null,\n                lastRenderedReducer: basicStateReducer,\n                lastRenderedState: initialState\n            };\n            hook.queue = queue;\n            return hook;\n        }\n        function mountState(initialState) {\n            var hook = mountStateImpl(initialState);\n            var queue = hook.queue;\n            var dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n            queue.dispatch = dispatch;\n            return [\n                hook.memoizedState,\n                dispatch\n            ];\n        }\n        function updateState(initialState) {\n            return updateReducer(basicStateReducer);\n        }\n        function rerenderState(initialState) {\n            return rerenderReducer(basicStateReducer);\n        }\n        function mountOptimistic(passthrough, reducer) {\n            var hook = mountWorkInProgressHook();\n            hook.memoizedState = hook.baseState = passthrough;\n            var queue = {\n                pending: null,\n                lanes: NoLanes,\n                dispatch: null,\n                // Optimistic state does not use the eager update optimization.\n                lastRenderedReducer: null,\n                lastRenderedState: null\n            };\n            hook.queue = queue; // This is different than the normal setState function.\n            var dispatch = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, true, queue);\n            queue.dispatch = dispatch;\n            return [\n                passthrough,\n                dispatch\n            ];\n        }\n        function updateOptimistic(passthrough, reducer) {\n            var hook = updateWorkInProgressHook();\n            return updateOptimisticImpl(hook, currentHook, passthrough, reducer);\n        }\n        function updateOptimisticImpl(hook, current, passthrough, reducer) {\n            // Optimistic updates are always rebased on top of the latest value passed in\n            // as an argument. It's called a passthrough because if there are no pending\n            // updates, it will be returned as-is.\n            //\n            // Reset the base state to the passthrough. Future updates will be applied\n            // on top of this.\n            hook.baseState = passthrough; // If a reducer is not provided, default to the same one used by useState.\n            var resolvedReducer = typeof reducer === 'function' ? reducer : basicStateReducer;\n            return updateReducerImpl(hook, currentHook, resolvedReducer);\n        }\n        function rerenderOptimistic(passthrough, reducer) {\n            // Unlike useState, useOptimistic doesn't support render phase updates.\n            // Also unlike useState, we need to replay all pending updates again in case\n            // the passthrough value changed.\n            //\n            // So instead of a forked re-render implementation that knows how to handle\n            // render phase udpates, we can use the same implementation as during a\n            // regular mount or update.\n            var hook = updateWorkInProgressHook();\n            if (currentHook !== null) {\n                // This is an update. Process the update queue.\n                return updateOptimisticImpl(hook, currentHook, passthrough, reducer);\n            } // This is a mount. No updates to process.\n            // Reset the base state to the passthrough. Future updates will be applied\n            // on top of this.\n            hook.baseState = passthrough;\n            var dispatch = hook.queue.dispatch;\n            return [\n                passthrough,\n                dispatch\n            ];\n        } // useActionState actions run sequentially, because each action receives the\n        // previous state as an argument. We store pending actions on a queue.\n        function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {\n            if (isRenderPhaseUpdate(fiber)) {\n                throw new Error('Cannot update form state while rendering.');\n            }\n            var currentAction = actionQueue.action;\n            if (currentAction === null) {\n                // An earlier action errored. Subsequent actions should not run.\n                return;\n            }\n            var actionNode = {\n                payload: payload,\n                action: currentAction,\n                next: null,\n                // circular\n                isTransition: true,\n                status: 'pending',\n                value: null,\n                reason: null,\n                listeners: [],\n                then: function(listener) {\n                    // We know the only thing that subscribes to these promises is `use` so\n                    // this implementation is simpler than a generic thenable. E.g. we don't\n                    // bother to check if the thenable is still pending because `use` already\n                    // does that.\n                    actionNode.listeners.push(listener);\n                }\n            }; // Check if we're inside a transition. If so, we'll need to restore the\n            // transition context when the action is run.\n            var prevTransition = ReactSharedInternals.T;\n            if (prevTransition !== null) {\n                // Optimistically update the pending state, similar to useTransition.\n                // This will be reverted automatically when all actions are finished.\n                setPendingState(true); // `actionNode` is a thenable that resolves to the return value of\n                // the action.\n                setState(actionNode);\n            } else {\n                // This is not a transition.\n                actionNode.isTransition = false;\n                setState(actionNode);\n            }\n            var last = actionQueue.pending;\n            if (last === null) {\n                // There are no pending actions; this is the first one. We can run\n                // it immediately.\n                actionNode.next = actionQueue.pending = actionNode;\n                runActionStateAction(actionQueue, actionNode);\n            } else {\n                // There's already an action running. Add to the queue.\n                var first = last.next;\n                actionNode.next = first;\n                actionQueue.pending = last.next = actionNode;\n            }\n        }\n        function runActionStateAction(actionQueue, node) {\n            // `node.action` represents the action function at the time it was dispatched.\n            // If this action was queued, it might be stale, i.e. it's not necessarily the\n            // most current implementation of the action, stored on `actionQueue`. This is\n            // intentional. The conceptual model for queued actions is that they are\n            // queued in a remote worker; the dispatch happens immediately, only the\n            // execution is delayed.\n            var action = node.action;\n            var payload = node.payload;\n            var prevState = actionQueue.state;\n            if (node.isTransition) {\n                // The original dispatch was part of a transition. We restore its\n                // transition context here.\n                // This is a fork of startTransition\n                var prevTransition = ReactSharedInternals.T;\n                var currentTransition = {};\n                ReactSharedInternals.T = currentTransition;\n                {\n                    ReactSharedInternals.T._updatedFibers = new Set();\n                }\n                try {\n                    var returnValue = action(prevState, payload);\n                    var onStartTransitionFinish = ReactSharedInternals.S;\n                    if (onStartTransitionFinish !== null) {\n                        onStartTransitionFinish(currentTransition, returnValue);\n                    }\n                    handleActionReturnValue(actionQueue, node, returnValue);\n                } catch (error) {\n                    onActionError(actionQueue, node, error);\n                } finally{\n                    ReactSharedInternals.T = prevTransition;\n                    {\n                        if (prevTransition === null && currentTransition._updatedFibers) {\n                            var updatedFibersCount = currentTransition._updatedFibers.size;\n                            currentTransition._updatedFibers.clear();\n                            if (updatedFibersCount > 10) {\n                                warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n                            }\n                        }\n                    }\n                }\n            } else {\n                // The original dispatch was not part of a transition.\n                try {\n                    var _returnValue = action(prevState, payload);\n                    handleActionReturnValue(actionQueue, node, _returnValue);\n                } catch (error) {\n                    onActionError(actionQueue, node, error);\n                }\n            }\n        }\n        function handleActionReturnValue(actionQueue, node, returnValue) {\n            if (returnValue !== null && typeof returnValue === 'object' && // $FlowFixMe[method-unbinding]\n            typeof returnValue.then === 'function') {\n                var thenable = returnValue; // Attach a listener to read the return state of the action. As soon as\n                // this resolves, we can run the next action in the sequence.\n                thenable.then(function(nextState) {\n                    onActionSuccess(actionQueue, node, nextState);\n                }, function(error) {\n                    return onActionError(actionQueue, node, error);\n                });\n                {\n                    if (!node.isTransition) {\n                        error('An async function was passed to useActionState, but it was ' + 'dispatched outside of an action context. This is likely not ' + 'what you intended. Either pass the dispatch function to an ' + '`action` prop, or dispatch manually inside `startTransition`');\n                    }\n                }\n            } else {\n                var nextState = returnValue;\n                onActionSuccess(actionQueue, node, nextState);\n            }\n        }\n        function onActionSuccess(actionQueue, actionNode, nextState) {\n            // The action finished running.\n            actionNode.status = 'fulfilled';\n            actionNode.value = nextState;\n            notifyActionListeners(actionNode);\n            actionQueue.state = nextState; // Pop the action from the queue and run the next pending action, if there\n            // are any.\n            var last = actionQueue.pending;\n            if (last !== null) {\n                var first = last.next;\n                if (first === last) {\n                    // This was the last action in the queue.\n                    actionQueue.pending = null;\n                } else {\n                    // Remove the first node from the circular queue.\n                    var next = first.next;\n                    last.next = next; // Run the next action.\n                    runActionStateAction(actionQueue, next);\n                }\n            }\n        }\n        function onActionError(actionQueue, actionNode, error) {\n            // Mark all the following actions as rejected.\n            var last = actionQueue.pending;\n            actionQueue.pending = null;\n            if (last !== null) {\n                var first = last.next;\n                do {\n                    actionNode.status = 'rejected';\n                    actionNode.reason = error;\n                    notifyActionListeners(actionNode);\n                    actionNode = actionNode.next;\n                }while (actionNode !== first);\n            } // Prevent subsequent actions from being dispatched.\n            actionQueue.action = null;\n        }\n        function notifyActionListeners(actionNode) {\n            // Notify React that the action has finished.\n            var listeners = actionNode.listeners;\n            for(var i = 0; i < listeners.length; i++){\n                // This is always a React internal listener, so we don't need to worry\n                // about it throwing.\n                var listener = listeners[i];\n                listener();\n            }\n        }\n        function actionStateReducer(oldState, newState) {\n            return newState;\n        }\n        function mountActionState(action, initialStateProp, permalink) {\n            var initialState = initialStateProp;\n            if (getIsHydrating()) {\n                var root = getWorkInProgressRoot();\n                var ssrFormState = root.formState; // If a formState option was passed to the root, there are form state\n                // markers that we need to hydrate. These indicate whether the form state\n                // matches this hook instance.\n                if (ssrFormState !== null) {\n                    var isMatching = tryToClaimNextHydratableFormMarkerInstance(currentlyRenderingFiber$1);\n                    if (isMatching) {\n                        initialState = ssrFormState[0];\n                    }\n                }\n            } // State hook. The state is stored in a thenable which is then unwrapped by\n            // the `use` algorithm during render.\n            var stateHook = mountWorkInProgressHook();\n            stateHook.memoizedState = stateHook.baseState = initialState; // TODO: Typing this \"correctly\" results in recursion limit errors\n            // const stateQueue: UpdateQueue<S | Awaited<S>, S | Awaited<S>> = {\n            var stateQueue = {\n                pending: null,\n                lanes: NoLanes,\n                dispatch: null,\n                lastRenderedReducer: actionStateReducer,\n                lastRenderedState: initialState\n            };\n            stateHook.queue = stateQueue;\n            var setState = dispatchSetState.bind(null, currentlyRenderingFiber$1, stateQueue);\n            stateQueue.dispatch = setState; // Pending state. This is used to store the pending state of the action.\n            // Tracked optimistically, like a transition pending state.\n            var pendingStateHook = mountStateImpl(false);\n            var setPendingState = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, false, pendingStateHook.queue); // Action queue hook. This is used to queue pending actions. The queue is\n            // shared between all instances of the hook. Similar to a regular state queue,\n            // but different because the actions are run sequentially, and they run in\n            // an event instead of during render.\n            var actionQueueHook = mountWorkInProgressHook();\n            var actionQueue = {\n                state: initialState,\n                dispatch: null,\n                // circular\n                action: action,\n                pending: null\n            };\n            actionQueueHook.queue = actionQueue;\n            var dispatch = dispatchActionState.bind(null, currentlyRenderingFiber$1, actionQueue, setPendingState, setState);\n            actionQueue.dispatch = dispatch; // Stash the action function on the memoized state of the hook. We'll use this\n            // to detect when the action function changes so we can update it in\n            // an effect.\n            actionQueueHook.memoizedState = action;\n            return [\n                initialState,\n                dispatch,\n                false\n            ];\n        }\n        function updateActionState(action, initialState, permalink) {\n            var stateHook = updateWorkInProgressHook();\n            var currentStateHook = currentHook;\n            return updateActionStateImpl(stateHook, currentStateHook, action);\n        }\n        function updateActionStateImpl(stateHook, currentStateHook, action, initialState, permalink) {\n            var _updateReducerImpl = updateReducerImpl(stateHook, currentStateHook, actionStateReducer), actionResult = _updateReducerImpl[0];\n            var _updateState = updateState(), isPending = _updateState[0]; // This will suspend until the action finishes.\n            var state = typeof actionResult === 'object' && actionResult !== null && // $FlowFixMe[method-unbinding]\n            typeof actionResult.then === 'function' ? useThenable(actionResult) : actionResult;\n            var actionQueueHook = updateWorkInProgressHook();\n            var actionQueue = actionQueueHook.queue;\n            var dispatch = actionQueue.dispatch; // Check if a new action was passed. If so, update it in an effect.\n            var prevAction = actionQueueHook.memoizedState;\n            if (action !== prevAction) {\n                currentlyRenderingFiber$1.flags |= Passive$1;\n                pushEffect(HasEffect | Passive, actionStateActionEffect.bind(null, actionQueue, action), createEffectInstance(), null);\n            }\n            return [\n                state,\n                dispatch,\n                isPending\n            ];\n        }\n        function actionStateActionEffect(actionQueue, action) {\n            actionQueue.action = action;\n        }\n        function rerenderActionState(action, initialState, permalink) {\n            // Unlike useState, useActionState doesn't support render phase updates.\n            // Also unlike useState, we need to replay all pending updates again in case\n            // the passthrough value changed.\n            //\n            // So instead of a forked re-render implementation that knows how to handle\n            // render phase udpates, we can use the same implementation as during a\n            // regular mount or update.\n            var stateHook = updateWorkInProgressHook();\n            var currentStateHook = currentHook;\n            if (currentStateHook !== null) {\n                // This is an update. Process the update queue.\n                return updateActionStateImpl(stateHook, currentStateHook, action);\n            }\n            updateWorkInProgressHook(); // State\n            // This is a mount. No updates to process.\n            var state = stateHook.memoizedState;\n            var actionQueueHook = updateWorkInProgressHook();\n            var actionQueue = actionQueueHook.queue;\n            var dispatch = actionQueue.dispatch; // This may have changed during the rerender.\n            actionQueueHook.memoizedState = action; // For mount, pending is always false.\n            return [\n                state,\n                dispatch,\n                false\n            ];\n        }\n        function pushEffect(tag, create, inst, deps) {\n            var effect = {\n                tag: tag,\n                create: create,\n                inst: inst,\n                deps: deps,\n                // Circular\n                next: null\n            };\n            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n            if (componentUpdateQueue === null) {\n                componentUpdateQueue = createFunctionComponentUpdateQueue();\n                currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n                componentUpdateQueue.lastEffect = effect.next = effect;\n            } else {\n                var lastEffect = componentUpdateQueue.lastEffect;\n                if (lastEffect === null) {\n                    componentUpdateQueue.lastEffect = effect.next = effect;\n                } else {\n                    var firstEffect = lastEffect.next;\n                    lastEffect.next = effect;\n                    effect.next = firstEffect;\n                    componentUpdateQueue.lastEffect = effect;\n                }\n            }\n            return effect;\n        }\n        function createEffectInstance() {\n            return {\n                destroy: undefined\n            };\n        }\n        function mountRef(initialValue) {\n            var hook = mountWorkInProgressHook();\n            var ref = {\n                current: initialValue\n            };\n            hook.memoizedState = ref;\n            return ref;\n        }\n        function updateRef(initialValue) {\n            var hook = updateWorkInProgressHook();\n            return hook.memoizedState;\n        }\n        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n            var hook = mountWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            currentlyRenderingFiber$1.flags |= fiberFlags;\n            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, createEffectInstance(), nextDeps);\n        }\n        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n            var hook = updateWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            var effect = hook.memoizedState;\n            var inst = effect.inst; // currentHook is null on initial mount when rerendering after a render phase\n            // state update or for strict mode.\n            if (currentHook !== null) {\n                if (nextDeps !== null) {\n                    var prevEffect = currentHook.memoizedState;\n                    var prevDeps = prevEffect.deps;\n                    if (areHookInputsEqual(nextDeps, prevDeps)) {\n                        hook.memoizedState = pushEffect(hookFlags, create, inst, nextDeps);\n                        return;\n                    }\n                }\n            }\n            currentlyRenderingFiber$1.flags |= fiberFlags;\n            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, inst, nextDeps);\n        }\n        function mountEffect(create, deps) {\n            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (currentlyRenderingFiber$1.mode & NoStrictPassiveEffectsMode) === NoMode) {\n                mountEffectImpl(MountPassiveDev | Passive$1 | PassiveStatic, Passive, create, deps);\n            } else {\n                mountEffectImpl(Passive$1 | PassiveStatic, Passive, create, deps);\n            }\n        }\n        function updateEffect(create, deps) {\n            updateEffectImpl(Passive$1, Passive, create, deps);\n        }\n        function mountInsertionEffect(create, deps) {\n            mountEffectImpl(Update, Insertion, create, deps);\n        }\n        function updateInsertionEffect(create, deps) {\n            return updateEffectImpl(Update, Insertion, create, deps);\n        }\n        function mountLayoutEffect(create, deps) {\n            var fiberFlags = Update | LayoutStatic;\n            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n                fiberFlags |= MountLayoutDev;\n            }\n            return mountEffectImpl(fiberFlags, Layout, create, deps);\n        }\n        function updateLayoutEffect(create, deps) {\n            return updateEffectImpl(Update, Layout, create, deps);\n        }\n        function imperativeHandleEffect(create, ref) {\n            if (typeof ref === 'function') {\n                var refCallback = ref;\n                var inst = create();\n                var refCleanup = refCallback(inst);\n                return function() {\n                    if (typeof refCleanup === 'function') {\n                        // $FlowFixMe[incompatible-use] we need to assume no parameters\n                        refCleanup();\n                    } else {\n                        refCallback(null);\n                    }\n                };\n            } else if (ref !== null && ref !== undefined) {\n                var refObject = ref;\n                {\n                    if (!refObject.hasOwnProperty('current')) {\n                        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n                    }\n                }\n                var _inst = create();\n                refObject.current = _inst;\n                return function() {\n                    refObject.current = null;\n                };\n            }\n        }\n        function mountImperativeHandle(ref, create, deps) {\n            {\n                if (typeof create !== 'function') {\n                    error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n                }\n            }\n            var effectDeps = deps !== null && deps !== undefined ? deps.concat([\n                ref\n            ]) : null;\n            var fiberFlags = Update | LayoutStatic;\n            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n                fiberFlags |= MountLayoutDev;\n            }\n            mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n        }\n        function updateImperativeHandle(ref, create, deps) {\n            {\n                if (typeof create !== 'function') {\n                    error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n                }\n            }\n            var effectDeps = deps !== null && deps !== undefined ? deps.concat([\n                ref\n            ]) : null;\n            updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n        }\n        function mountDebugValue(value, formatterFn) {\n        // The react-debug-hooks package injects its own implementation\n        // so that e.g. DevTools can display custom hook values.\n        }\n        var updateDebugValue = mountDebugValue;\n        function mountCallback(callback, deps) {\n            var hook = mountWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            hook.memoizedState = [\n                callback,\n                nextDeps\n            ];\n            return callback;\n        }\n        function updateCallback(callback, deps) {\n            var hook = updateWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            var prevState = hook.memoizedState;\n            if (nextDeps !== null) {\n                var prevDeps = prevState[1];\n                if (areHookInputsEqual(nextDeps, prevDeps)) {\n                    return prevState[0];\n                }\n            }\n            hook.memoizedState = [\n                callback,\n                nextDeps\n            ];\n            return callback;\n        }\n        function mountMemo(nextCreate, deps) {\n            var hook = mountWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            var nextValue = nextCreate();\n            if (shouldDoubleInvokeUserFnsInHooksDEV) {\n                setIsStrictModeForDevtools(true);\n                nextCreate();\n                setIsStrictModeForDevtools(false);\n            }\n            hook.memoizedState = [\n                nextValue,\n                nextDeps\n            ];\n            return nextValue;\n        }\n        function updateMemo(nextCreate, deps) {\n            var hook = updateWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            var prevState = hook.memoizedState; // Assume these are defined. If they're not, areHookInputsEqual will warn.\n            if (nextDeps !== null) {\n                var prevDeps = prevState[1];\n                if (areHookInputsEqual(nextDeps, prevDeps)) {\n                    return prevState[0];\n                }\n            }\n            var nextValue = nextCreate();\n            if (shouldDoubleInvokeUserFnsInHooksDEV) {\n                setIsStrictModeForDevtools(true);\n                nextCreate();\n                setIsStrictModeForDevtools(false);\n            }\n            hook.memoizedState = [\n                nextValue,\n                nextDeps\n            ];\n            return nextValue;\n        }\n        function mountDeferredValue(value, initialValue) {\n            var hook = mountWorkInProgressHook();\n            return mountDeferredValueImpl(hook, value, initialValue);\n        }\n        function updateDeferredValue(value, initialValue) {\n            var hook = updateWorkInProgressHook();\n            var resolvedCurrentHook = currentHook;\n            var prevValue = resolvedCurrentHook.memoizedState;\n            return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n        }\n        function rerenderDeferredValue(value, initialValue) {\n            var hook = updateWorkInProgressHook();\n            if (currentHook === null) {\n                // This is a rerender during a mount.\n                return mountDeferredValueImpl(hook, value, initialValue);\n            } else {\n                // This is a rerender during an update.\n                var prevValue = currentHook.memoizedState;\n                return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n            }\n        }\n        function mountDeferredValueImpl(hook, value, initialValue) {\n            if (// current render is not synchronous.\n            initialValue !== undefined && // However, to avoid waterfalls, we do not defer if this render\n            // was itself spawned by an earlier useDeferredValue. Check if DeferredLane\n            // is part of the render lanes.\n            !includesSomeLane(renderLanes, DeferredLane)) {\n                // Render with the initial value\n                hook.memoizedState = initialValue; // Schedule a deferred render to switch to the final value.\n                var deferredLane = requestDeferredLane();\n                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n                markSkippedUpdateLanes(deferredLane);\n                return initialValue;\n            } else {\n                hook.memoizedState = value;\n                return value;\n            }\n        }\n        function updateDeferredValueImpl(hook, prevValue, value, initialValue) {\n            if (objectIs(value, prevValue)) {\n                // The incoming value is referentially identical to the currently rendered\n                // value, so we can bail out quickly.\n                return value;\n            } else {\n                // Received a new value that's different from the current value.\n                // Check if we're inside a hidden tree\n                if (isCurrentTreeHidden()) {\n                    // Revealing a prerendered tree is considered the same as mounting new\n                    // one, so we reuse the \"mount\" path in this case.\n                    var resultValue = mountDeferredValueImpl(hook, value, initialValue); // Unlike during an actual mount, we need to mark this as an update if\n                    // the value changed.\n                    if (!objectIs(resultValue, prevValue)) {\n                        markWorkInProgressReceivedUpdate();\n                    }\n                    return resultValue;\n                }\n                var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n                if (shouldDeferValue) {\n                    // This is an urgent update. Since the value has changed, keep using the\n                    // previous value and spawn a deferred render to update it later.\n                    // Schedule a deferred render\n                    var deferredLane = requestDeferredLane();\n                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n                    markSkippedUpdateLanes(deferredLane); // Reuse the previous value. We do not need to mark this as an update,\n                    // because we did not render a new value.\n                    return prevValue;\n                } else {\n                    // This is not an urgent update, so we can use the latest value regardless\n                    // of what it is. No need to defer it.\n                    // Mark this as an update to prevent the fiber from bailing out.\n                    markWorkInProgressReceivedUpdate();\n                    hook.memoizedState = value;\n                    return value;\n                }\n            }\n        }\n        function startTransition(fiber, queue, pendingState, finishedState, callback, options) {\n            var previousPriority = getCurrentUpdatePriority();\n            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n            var prevTransition = ReactSharedInternals.T;\n            var currentTransition = {};\n            {\n                // We don't really need to use an optimistic update here, because we\n                // schedule a second \"revert\" update below (which we use to suspend the\n                // transition until the async action scope has finished). But we'll use an\n                // optimistic update anyway to make it less likely the behavior accidentally\n                // diverges; for example, both an optimistic update and this one should\n                // share the same lane.\n                ReactSharedInternals.T = currentTransition;\n                dispatchOptimisticSetState(fiber, false, queue, pendingState);\n            }\n            {\n                currentTransition._updatedFibers = new Set();\n            }\n            try {\n                if (enableAsyncActions) {\n                    var returnValue = callback();\n                    var onStartTransitionFinish = ReactSharedInternals.S;\n                    if (onStartTransitionFinish !== null) {\n                        onStartTransitionFinish(currentTransition, returnValue);\n                    } // Check if we're inside an async action scope. If so, we'll entangle\n                    // this new action with the existing scope.\n                    //\n                    // If we're not already inside an async action scope, and this action is\n                    // async, then we'll create a new async scope.\n                    //\n                    // In the async case, the resulting render will suspend until the async\n                    // action scope has finished.\n                    if (returnValue !== null && typeof returnValue === 'object' && typeof returnValue.then === 'function') {\n                        var thenable = returnValue; // Create a thenable that resolves to `finishedState` once the async\n                        // action has completed.\n                        var thenableForFinishedState = chainThenableValue(thenable, finishedState);\n                        dispatchSetState(fiber, queue, thenableForFinishedState);\n                    } else {\n                        dispatchSetState(fiber, queue, finishedState);\n                    }\n                }\n            } catch (error) {\n                {\n                    // This is a trick to get the `useTransition` hook to rethrow the error.\n                    // When it unwraps the thenable with the `use` algorithm, the error\n                    // will be thrown.\n                    var rejectedThenable = {\n                        then: function() {},\n                        status: 'rejected',\n                        reason: error\n                    };\n                    dispatchSetState(fiber, queue, rejectedThenable);\n                }\n            } finally{\n                setCurrentUpdatePriority(previousPriority);\n                ReactSharedInternals.T = prevTransition;\n                {\n                    if (prevTransition === null && currentTransition._updatedFibers) {\n                        var updatedFibersCount = currentTransition._updatedFibers.size;\n                        currentTransition._updatedFibers.clear();\n                        if (updatedFibersCount > 10) {\n                            warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n                        }\n                    }\n                }\n            }\n        }\n        var noop = function() {};\n        function startHostTransition(formFiber, pendingState, action, formData) {\n            if (formFiber.tag !== HostComponent) {\n                throw new Error('Expected the form instance to be a HostComponent. This ' + 'is a bug in React.');\n            }\n            var stateHook = ensureFormComponentIsStateful(formFiber);\n            var queue = stateHook.queue;\n            startTransition(formFiber, queue, pendingState, NotPendingTransition, // the action, if one is provided. Consider refactoring these two\n            // concerns to avoid the extra lambda.\n            action === null ? // set the pending form status.\n            noop : function() {\n                // Automatically reset the form when the action completes.\n                requestFormReset(formFiber);\n                return action(formData);\n            });\n        }\n        function ensureFormComponentIsStateful(formFiber) {\n            var existingStateHook = formFiber.memoizedState;\n            if (existingStateHook !== null) {\n                // This fiber was already upgraded to be stateful.\n                return existingStateHook;\n            } // Upgrade this host component fiber to be stateful. We're going to pretend\n            // it was stateful all along so we can reuse most of the implementation\n            // for function components and useTransition.\n            //\n            // Create the state hook used by TransitionAwareHostComponent. This is\n            // essentially an inlined version of mountState.\n            var newQueue = {\n                pending: null,\n                lanes: NoLanes,\n                // We're going to cheat and intentionally not create a bound dispatch\n                // method, because we can call it directly in startTransition.\n                dispatch: null,\n                lastRenderedReducer: basicStateReducer,\n                lastRenderedState: NotPendingTransition\n            };\n            var stateHook = {\n                memoizedState: NotPendingTransition,\n                baseState: NotPendingTransition,\n                baseQueue: null,\n                queue: newQueue,\n                next: null\n            }; // We use another state hook to track whether the form needs to be reset.\n            // The state is an empty object. To trigger a reset, we update the state\n            // to a new object. Then during rendering, we detect that the state has\n            // changed and schedule a commit effect.\n            var initialResetState = {};\n            var newResetStateQueue = {\n                pending: null,\n                lanes: NoLanes,\n                // We're going to cheat and intentionally not create a bound dispatch\n                // method, because we can call it directly in startTransition.\n                dispatch: null,\n                lastRenderedReducer: basicStateReducer,\n                lastRenderedState: initialResetState\n            };\n            var resetStateHook = {\n                memoizedState: initialResetState,\n                baseState: initialResetState,\n                baseQueue: null,\n                queue: newResetStateQueue,\n                next: null\n            };\n            stateHook.next = resetStateHook; // Add the hook list to both fiber alternates. The idea is that the fiber\n            // had this hook all along.\n            formFiber.memoizedState = stateHook;\n            var alternate = formFiber.alternate;\n            if (alternate !== null) {\n                alternate.memoizedState = stateHook;\n            }\n            return stateHook;\n        }\n        function requestFormReset(formFiber) {\n            var transition = requestCurrentTransition();\n            {\n                if (transition === null) {\n                    // An optimistic update occurred, but startTransition is not on the stack.\n                    // The form reset will be scheduled at default (sync) priority, which\n                    // is probably not what the user intended. Most likely because the\n                    // requestFormReset call happened after an `await`.\n                    // TODO: Theoretically, requestFormReset is still useful even for\n                    // non-transition updates because it allows you to update defaultValue\n                    // synchronously and then wait to reset until after the update commits.\n                    // I've chosen to warn anyway because it's more likely the `await` mistake\n                    // described above. But arguably we shouldn't.\n                    error('requestFormReset was called outside a transition or action. To ' + 'fix, move to an action, or wrap with startTransition.');\n                }\n            }\n            var stateHook = ensureFormComponentIsStateful(formFiber);\n            var newResetState = {};\n            var resetStateHook = stateHook.next;\n            var resetStateQueue = resetStateHook.queue;\n            dispatchSetState(formFiber, resetStateQueue, newResetState);\n        }\n        function mountTransition() {\n            var stateHook = mountStateImpl(false); // The `start` method never changes.\n            var start = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, true, false);\n            var hook = mountWorkInProgressHook();\n            hook.memoizedState = start;\n            return [\n                false,\n                start\n            ];\n        }\n        function updateTransition() {\n            var _updateState2 = updateState(), booleanOrThenable = _updateState2[0];\n            var hook = updateWorkInProgressHook();\n            var start = hook.memoizedState;\n            var isPending = typeof booleanOrThenable === 'boolean' ? booleanOrThenable : useThenable(booleanOrThenable);\n            return [\n                isPending,\n                start\n            ];\n        }\n        function rerenderTransition() {\n            var _rerenderState = rerenderState(), booleanOrThenable = _rerenderState[0];\n            var hook = updateWorkInProgressHook();\n            var start = hook.memoizedState;\n            var isPending = typeof booleanOrThenable === 'boolean' ? booleanOrThenable : useThenable(booleanOrThenable);\n            return [\n                isPending,\n                start\n            ];\n        }\n        function useHostTransitionStatus() {\n            var status = readContext(HostTransitionContext);\n            return status !== null ? status : NotPendingTransition;\n        }\n        function mountId() {\n            var hook = mountWorkInProgressHook();\n            var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n            // should do this in Fiber, too? Deferring this decision for now because\n            // there's no other place to store the prefix except for an internal field on\n            // the public createRoot object, which the fiber tree does not currently have\n            // a reference to.\n            var identifierPrefix = root.identifierPrefix;\n            var id;\n            if (getIsHydrating()) {\n                var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n                id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n                // that represents the position of this useId hook among all the useId\n                // hooks for this fiber.\n                var localId = localIdCounter++;\n                if (localId > 0) {\n                    id += 'H' + localId.toString(32);\n                }\n                id += ':';\n            } else {\n                // Use a lowercase r prefix for client-generated ids.\n                var globalClientId = globalClientIdCounter++;\n                id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n            }\n            hook.memoizedState = id;\n            return id;\n        }\n        function updateId() {\n            var hook = updateWorkInProgressHook();\n            var id = hook.memoizedState;\n            return id;\n        }\n        function mountRefresh() {\n            var hook = mountWorkInProgressHook();\n            var refresh = hook.memoizedState = refreshCache.bind(null, currentlyRenderingFiber$1);\n            return refresh;\n        }\n        function updateRefresh() {\n            var hook = updateWorkInProgressHook();\n            return hook.memoizedState;\n        }\n        function refreshCache(fiber, seedKey, seedValue) {\n            // TODO: Consider warning if the refresh is at discrete priority, or if we\n            // otherwise suspect that it wasn't batched properly.\n            var provider = fiber.return;\n            while(provider !== null){\n                switch(provider.tag){\n                    case CacheComponent:\n                    case HostRoot:\n                        {\n                            // Schedule an update on the cache boundary to trigger a refresh.\n                            var lane = requestUpdateLane(provider);\n                            var refreshUpdate = createUpdate(lane);\n                            var root = enqueueUpdate(provider, refreshUpdate, lane);\n                            if (root !== null) {\n                                scheduleUpdateOnFiber(root, provider, lane);\n                                entangleTransitions(root, provider, lane);\n                            } // TODO: If a refresh never commits, the new cache created here must be\n                            // released. A simple case is start refreshing a cache boundary, but then\n                            // unmount that boundary before the refresh completes.\n                            var seededCache = createCache();\n                            if (seedKey !== null && seedKey !== undefined && root !== null) {\n                                {\n                                    {\n                                        error('The seed argument is not enabled outside experimental channels.');\n                                    }\n                                }\n                            }\n                            var payload = {\n                                cache: seededCache\n                            };\n                            refreshUpdate.payload = payload;\n                            return;\n                        }\n                }\n                provider = provider.return;\n            } // TODO: Warn if unmounted?\n        }\n        function dispatchReducerAction(fiber, queue, action) {\n            {\n                if (typeof arguments[3] === 'function') {\n                    error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n                }\n            }\n            var lane = requestUpdateLane(fiber);\n            var update = {\n                lane: lane,\n                revertLane: NoLane,\n                action: action,\n                hasEagerState: false,\n                eagerState: null,\n                next: null\n            };\n            if (isRenderPhaseUpdate(fiber)) {\n                enqueueRenderPhaseUpdate(queue, update);\n            } else {\n                var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n                if (root !== null) {\n                    scheduleUpdateOnFiber(root, fiber, lane);\n                    entangleTransitionUpdate(root, queue, lane);\n                }\n            }\n            markUpdateInDevTools(fiber, lane);\n        }\n        function dispatchSetState(fiber, queue, action) {\n            {\n                if (typeof arguments[3] === 'function') {\n                    error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n                }\n            }\n            var lane = requestUpdateLane(fiber);\n            var update = {\n                lane: lane,\n                revertLane: NoLane,\n                action: action,\n                hasEagerState: false,\n                eagerState: null,\n                next: null\n            };\n            if (isRenderPhaseUpdate(fiber)) {\n                enqueueRenderPhaseUpdate(queue, update);\n            } else {\n                var alternate = fiber.alternate;\n                if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n                    // The queue is currently empty, which means we can eagerly compute the\n                    // next state before entering the render phase. If the new state is the\n                    // same as the current state, we may be able to bail out entirely.\n                    var lastRenderedReducer = queue.lastRenderedReducer;\n                    if (lastRenderedReducer !== null) {\n                        var prevDispatcher = null;\n                        {\n                            prevDispatcher = ReactSharedInternals.H;\n                            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                        }\n                        try {\n                            var currentState = queue.lastRenderedState;\n                            var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n                            // it, on the update object. If the reducer hasn't changed by the\n                            // time we enter the render phase, then the eager state can be used\n                            // without calling the reducer again.\n                            update.hasEagerState = true;\n                            update.eagerState = eagerState;\n                            if (objectIs(eagerState, currentState)) {\n                                // Fast path. We can bail out without scheduling React to re-render.\n                                // It's still possible that we'll need to rebase this update later,\n                                // if the component re-renders for a different reason and by that\n                                // time the reducer has changed.\n                                // TODO: Do we still need to entangle transitions in this case?\n                                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update);\n                                return;\n                            }\n                        } catch (error) {} finally{\n                            {\n                                ReactSharedInternals.H = prevDispatcher;\n                            }\n                        }\n                    }\n                }\n                var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n                if (root !== null) {\n                    scheduleUpdateOnFiber(root, fiber, lane);\n                    entangleTransitionUpdate(root, queue, lane);\n                }\n            }\n            markUpdateInDevTools(fiber, lane);\n        }\n        function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {\n            var transition = requestCurrentTransition();\n            {\n                if (transition === null) {\n                    // An optimistic update occurred, but startTransition is not on the stack.\n                    // There are two likely scenarios.\n                    // One possibility is that the optimistic update is triggered by a regular\n                    // event handler (e.g. `onSubmit`) instead of an action. This is a mistake\n                    // and we will warn.\n                    // The other possibility is the optimistic update is inside an async\n                    // action, but after an `await`. In this case, we can make it \"just work\"\n                    // by associating the optimistic update with the pending async action.\n                    // Technically it's possible that the optimistic update is unrelated to\n                    // the pending action, but we don't have a way of knowing this for sure\n                    // because browsers currently do not provide a way to track async scope.\n                    // (The AsyncContext proposal, if it lands, will solve this in the\n                    // future.) However, this is no different than the problem of unrelated\n                    // transitions being grouped together — it's not wrong per se, but it's\n                    // not ideal.\n                    // Once AsyncContext starts landing in browsers, we will provide better\n                    // warnings in development for these cases.\n                    if (peekEntangledActionLane() !== NoLane) ;\n                    else {\n                        // There's no pending async action. The most likely cause is that we're\n                        // inside a regular event handler (e.g. onSubmit) instead of an action.\n                        error('An optimistic state update occurred outside a transition or ' + 'action. To fix, move the update to an action, or wrap ' + 'with startTransition.');\n                    }\n                }\n            }\n            var update = {\n                // An optimistic update commits synchronously.\n                lane: SyncLane,\n                // After committing, the optimistic update is \"reverted\" using the same\n                // lane as the transition it's associated with.\n                revertLane: requestTransitionLane(),\n                action: action,\n                hasEagerState: false,\n                eagerState: null,\n                next: null\n            };\n            if (isRenderPhaseUpdate(fiber)) {\n                // When calling startTransition during render, this warns instead of\n                // throwing because throwing would be a breaking change. setOptimisticState\n                // is a new API so it's OK to throw.\n                if (throwIfDuringRender) {\n                    throw new Error('Cannot update optimistic state while rendering.');\n                } else {\n                    // startTransition was called during render. We don't need to do anything\n                    // besides warn here because the render phase update would be overidden by\n                    // the second update, anyway. We can remove this branch and make it throw\n                    // in a future release.\n                    {\n                        error('Cannot call startTransition while rendering.');\n                    }\n                }\n            } else {\n                var root = enqueueConcurrentHookUpdate(fiber, queue, update, SyncLane);\n                if (root !== null) {\n                    // NOTE: The optimistic update implementation assumes that the transition\n                    // will never be attempted before the optimistic update. This currently\n                    // holds because the optimistic update is always synchronous. If we ever\n                    // change that, we'll need to account for this.\n                    scheduleUpdateOnFiber(root, fiber, SyncLane); // Optimistic updates are always synchronous, so we don't need to call\n                // entangleTransitionUpdate here.\n                }\n            }\n            markUpdateInDevTools(fiber, SyncLane);\n        }\n        function isRenderPhaseUpdate(fiber) {\n            var alternate = fiber.alternate;\n            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n        }\n        function enqueueRenderPhaseUpdate(queue, update) {\n            // This is a render phase update. Stash it in a lazily-created map of\n            // queue -> linked list of updates. After this render pass, we'll restart\n            // and apply the stashed updates on top of the work-in-progress hook.\n            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n            var pending = queue.pending;\n            if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n            } else {\n                update.next = pending.next;\n                pending.next = update;\n            }\n            queue.pending = update;\n        } // TODO: Move to ReactFiberConcurrentUpdates?\n        function entangleTransitionUpdate(root, queue, lane) {\n            if (isTransitionLane(lane)) {\n                var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n                // must have finished. We can remove them from the shared queue, which\n                // represents a superset of the actually pending lanes. In some cases we\n                // may entangle more than we need to, but that's OK. In fact it's worse if\n                // we *don't* entangle when we should.\n                queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n                var newQueueLanes = mergeLanes(queueLanes, lane);\n                queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n                // the lane finished since the last time we entangled it. So we need to\n                // entangle it again, just to be sure.\n                markRootEntangled(root, newQueueLanes);\n            }\n        }\n        function markUpdateInDevTools(fiber, lane, action) {\n            {\n                markStateUpdateScheduled(fiber, lane);\n            }\n        }\n        var ContextOnlyDispatcher = {\n            readContext: readContext,\n            use: use,\n            useCallback: throwInvalidHookError,\n            useContext: throwInvalidHookError,\n            useEffect: throwInvalidHookError,\n            useImperativeHandle: throwInvalidHookError,\n            useLayoutEffect: throwInvalidHookError,\n            useInsertionEffect: throwInvalidHookError,\n            useMemo: throwInvalidHookError,\n            useReducer: throwInvalidHookError,\n            useRef: throwInvalidHookError,\n            useState: throwInvalidHookError,\n            useDebugValue: throwInvalidHookError,\n            useDeferredValue: throwInvalidHookError,\n            useTransition: throwInvalidHookError,\n            useSyncExternalStore: throwInvalidHookError,\n            useId: throwInvalidHookError\n        };\n        {\n            ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;\n        }\n        {\n            ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;\n        }\n        {\n            ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;\n            ContextOnlyDispatcher.useFormState = throwInvalidHookError;\n            ContextOnlyDispatcher.useActionState = throwInvalidHookError;\n        }\n        {\n            ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;\n        }\n        var HooksDispatcherOnMountInDEV = null;\n        var HooksDispatcherOnMountWithHookTypesInDEV = null;\n        var HooksDispatcherOnUpdateInDEV = null;\n        var HooksDispatcherOnRerenderInDEV = null;\n        var InvalidNestedHooksDispatcherOnMountInDEV = null;\n        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n        {\n            var warnInvalidContextAccess = function() {\n                error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n            };\n            var warnInvalidHookAccess = function() {\n                error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://react.dev/link/rules-of-hooks');\n            };\n            HooksDispatcherOnMountInDEV = {\n                readContext: function(context) {\n                    return readContext(context);\n                },\n                use: use,\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = 'useCallback';\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    return mountCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = 'useContext';\n                    mountHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = 'useEffect';\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    return mountEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = 'useImperativeHandle';\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    return mountImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = 'useInsertionEffect';\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    return mountInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = 'useLayoutEffect';\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    return mountLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = 'useMemo';\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountMemo(create, deps);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = 'useReducer';\n                    mountHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = 'useRef';\n                    mountHookTypesDev();\n                    return mountRef(initialValue);\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = 'useState';\n                    mountHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountState(initialState);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = 'useDebugValue';\n                    mountHookTypesDev();\n                    return mountDebugValue();\n                },\n                useDeferredValue: function(value, initialValue) {\n                    currentHookNameInDev = 'useDeferredValue';\n                    mountHookTypesDev();\n                    return mountDeferredValue(value, initialValue);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = 'useTransition';\n                    mountHookTypesDev();\n                    return mountTransition();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = 'useSyncExternalStore';\n                    mountHookTypesDev();\n                    return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = 'useId';\n                    mountHookTypesDev();\n                    return mountId();\n                }\n            };\n            {\n                HooksDispatcherOnMountInDEV.useCacheRefresh = function useCacheRefresh() {\n                    currentHookNameInDev = 'useCacheRefresh';\n                    mountHookTypesDev();\n                    return mountRefresh();\n                };\n            }\n            {\n                HooksDispatcherOnMountInDEV.useMemoCache = useMemoCache;\n            }\n            {\n                HooksDispatcherOnMountInDEV.useHostTransitionStatus = useHostTransitionStatus;\n                HooksDispatcherOnMountInDEV.useFormState = function useFormState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useFormState';\n                    mountHookTypesDev();\n                    return mountActionState(action, initialState);\n                };\n                HooksDispatcherOnMountInDEV.useActionState = function useActionState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useActionState';\n                    mountHookTypesDev();\n                    return mountActionState(action, initialState);\n                };\n            }\n            {\n                HooksDispatcherOnMountInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {\n                    currentHookNameInDev = 'useOptimistic';\n                    mountHookTypesDev();\n                    return mountOptimistic(passthrough);\n                };\n            }\n            HooksDispatcherOnMountWithHookTypesInDEV = {\n                readContext: function(context) {\n                    return readContext(context);\n                },\n                use: use,\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = 'useCallback';\n                    updateHookTypesDev();\n                    return mountCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = 'useContext';\n                    updateHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = 'useEffect';\n                    updateHookTypesDev();\n                    return mountEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = 'useImperativeHandle';\n                    updateHookTypesDev();\n                    return mountImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = 'useInsertionEffect';\n                    updateHookTypesDev();\n                    return mountInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = 'useLayoutEffect';\n                    updateHookTypesDev();\n                    return mountLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = 'useMemo';\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountMemo(create, deps);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = 'useReducer';\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = 'useRef';\n                    updateHookTypesDev();\n                    return mountRef(initialValue);\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = 'useState';\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountState(initialState);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = 'useDebugValue';\n                    updateHookTypesDev();\n                    return mountDebugValue();\n                },\n                useDeferredValue: function(value, initialValue) {\n                    currentHookNameInDev = 'useDeferredValue';\n                    updateHookTypesDev();\n                    return mountDeferredValue(value, initialValue);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = 'useTransition';\n                    updateHookTypesDev();\n                    return mountTransition();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = 'useSyncExternalStore';\n                    updateHookTypesDev();\n                    return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = 'useId';\n                    updateHookTypesDev();\n                    return mountId();\n                }\n            };\n            {\n                HooksDispatcherOnMountWithHookTypesInDEV.useCacheRefresh = function useCacheRefresh() {\n                    currentHookNameInDev = 'useCacheRefresh';\n                    updateHookTypesDev();\n                    return mountRefresh();\n                };\n            }\n            {\n                HooksDispatcherOnMountWithHookTypesInDEV.useMemoCache = useMemoCache;\n            }\n            {\n                HooksDispatcherOnMountWithHookTypesInDEV.useHostTransitionStatus = useHostTransitionStatus;\n                HooksDispatcherOnMountWithHookTypesInDEV.useFormState = function useFormState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useFormState';\n                    updateHookTypesDev();\n                    warnOnUseFormStateInDev();\n                    return mountActionState(action, initialState);\n                };\n                HooksDispatcherOnMountWithHookTypesInDEV.useActionState = function useActionState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useActionState';\n                    updateHookTypesDev();\n                    return mountActionState(action, initialState);\n                };\n            }\n            {\n                HooksDispatcherOnMountWithHookTypesInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {\n                    currentHookNameInDev = 'useOptimistic';\n                    updateHookTypesDev();\n                    return mountOptimistic(passthrough);\n                };\n            }\n            HooksDispatcherOnUpdateInDEV = {\n                readContext: function(context) {\n                    return readContext(context);\n                },\n                use: use,\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = 'useCallback';\n                    updateHookTypesDev();\n                    return updateCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = 'useContext';\n                    updateHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = 'useEffect';\n                    updateHookTypesDev();\n                    return updateEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = 'useImperativeHandle';\n                    updateHookTypesDev();\n                    return updateImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = 'useInsertionEffect';\n                    updateHookTypesDev();\n                    return updateInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = 'useLayoutEffect';\n                    updateHookTypesDev();\n                    return updateLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = 'useMemo';\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateMemo(create, deps);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = 'useReducer';\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = 'useRef';\n                    updateHookTypesDev();\n                    return updateRef();\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = 'useState';\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateState(initialState);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = 'useDebugValue';\n                    updateHookTypesDev();\n                    return updateDebugValue();\n                },\n                useDeferredValue: function(value, initialValue) {\n                    currentHookNameInDev = 'useDeferredValue';\n                    updateHookTypesDev();\n                    return updateDeferredValue(value, initialValue);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = 'useTransition';\n                    updateHookTypesDev();\n                    return updateTransition();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = 'useSyncExternalStore';\n                    updateHookTypesDev();\n                    return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = 'useId';\n                    updateHookTypesDev();\n                    return updateId();\n                }\n            };\n            {\n                HooksDispatcherOnUpdateInDEV.useCacheRefresh = function useCacheRefresh() {\n                    currentHookNameInDev = 'useCacheRefresh';\n                    updateHookTypesDev();\n                    return updateRefresh();\n                };\n            }\n            {\n                HooksDispatcherOnUpdateInDEV.useMemoCache = useMemoCache;\n            }\n            {\n                HooksDispatcherOnUpdateInDEV.useHostTransitionStatus = useHostTransitionStatus;\n                HooksDispatcherOnUpdateInDEV.useFormState = function useFormState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useFormState';\n                    updateHookTypesDev();\n                    warnOnUseFormStateInDev();\n                    return updateActionState(action);\n                };\n                HooksDispatcherOnUpdateInDEV.useActionState = function useActionState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useActionState';\n                    updateHookTypesDev();\n                    return updateActionState(action);\n                };\n            }\n            {\n                HooksDispatcherOnUpdateInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {\n                    currentHookNameInDev = 'useOptimistic';\n                    updateHookTypesDev();\n                    return updateOptimistic(passthrough, reducer);\n                };\n            }\n            HooksDispatcherOnRerenderInDEV = {\n                readContext: function(context) {\n                    return readContext(context);\n                },\n                use: use,\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = 'useCallback';\n                    updateHookTypesDev();\n                    return updateCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = 'useContext';\n                    updateHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = 'useEffect';\n                    updateHookTypesDev();\n                    return updateEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = 'useImperativeHandle';\n                    updateHookTypesDev();\n                    return updateImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = 'useInsertionEffect';\n                    updateHookTypesDev();\n                    return updateInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = 'useLayoutEffect';\n                    updateHookTypesDev();\n                    return updateLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = 'useMemo';\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;\n                    try {\n                        return updateMemo(create, deps);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = 'useReducer';\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;\n                    try {\n                        return rerenderReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = 'useRef';\n                    updateHookTypesDev();\n                    return updateRef();\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = 'useState';\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;\n                    try {\n                        return rerenderState(initialState);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = 'useDebugValue';\n                    updateHookTypesDev();\n                    return updateDebugValue();\n                },\n                useDeferredValue: function(value, initialValue) {\n                    currentHookNameInDev = 'useDeferredValue';\n                    updateHookTypesDev();\n                    return rerenderDeferredValue(value, initialValue);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = 'useTransition';\n                    updateHookTypesDev();\n                    return rerenderTransition();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = 'useSyncExternalStore';\n                    updateHookTypesDev();\n                    return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = 'useId';\n                    updateHookTypesDev();\n                    return updateId();\n                }\n            };\n            {\n                HooksDispatcherOnRerenderInDEV.useCacheRefresh = function useCacheRefresh() {\n                    currentHookNameInDev = 'useCacheRefresh';\n                    updateHookTypesDev();\n                    return updateRefresh();\n                };\n            }\n            {\n                HooksDispatcherOnRerenderInDEV.useMemoCache = useMemoCache;\n            }\n            {\n                HooksDispatcherOnRerenderInDEV.useHostTransitionStatus = useHostTransitionStatus;\n                HooksDispatcherOnRerenderInDEV.useFormState = function useFormState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useFormState';\n                    updateHookTypesDev();\n                    warnOnUseFormStateInDev();\n                    return rerenderActionState(action);\n                };\n                HooksDispatcherOnRerenderInDEV.useActionState = function useActionState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useActionState';\n                    updateHookTypesDev();\n                    return rerenderActionState(action);\n                };\n            }\n            {\n                HooksDispatcherOnRerenderInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {\n                    currentHookNameInDev = 'useOptimistic';\n                    updateHookTypesDev();\n                    return rerenderOptimistic(passthrough, reducer);\n                };\n            }\n            InvalidNestedHooksDispatcherOnMountInDEV = {\n                readContext: function(context) {\n                    warnInvalidContextAccess();\n                    return readContext(context);\n                },\n                use: function(usable) {\n                    warnInvalidHookAccess();\n                    return use(usable);\n                },\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = 'useCallback';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = 'useContext';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = 'useEffect';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = 'useImperativeHandle';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = 'useInsertionEffect';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = 'useLayoutEffect';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = 'useMemo';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountMemo(create, deps);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = 'useReducer';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = 'useRef';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountRef(initialValue);\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = 'useState';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountState(initialState);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = 'useDebugValue';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountDebugValue();\n                },\n                useDeferredValue: function(value, initialValue) {\n                    currentHookNameInDev = 'useDeferredValue';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountDeferredValue(value, initialValue);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = 'useTransition';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountTransition();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = 'useSyncExternalStore';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = 'useId';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountId();\n                }\n            };\n            {\n                InvalidNestedHooksDispatcherOnMountInDEV.useCacheRefresh = function useCacheRefresh() {\n                    currentHookNameInDev = 'useCacheRefresh';\n                    mountHookTypesDev();\n                    return mountRefresh();\n                };\n            }\n            {\n                InvalidNestedHooksDispatcherOnMountInDEV.useMemoCache = function(size) {\n                    warnInvalidHookAccess();\n                    return useMemoCache(size);\n                };\n            }\n            {\n                InvalidNestedHooksDispatcherOnMountInDEV.useHostTransitionStatus = useHostTransitionStatus;\n                InvalidNestedHooksDispatcherOnMountInDEV.useFormState = function useFormState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useFormState';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountActionState(action, initialState);\n                };\n                InvalidNestedHooksDispatcherOnMountInDEV.useActionState = function useActionState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useActionState';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountActionState(action, initialState);\n                };\n            }\n            {\n                InvalidNestedHooksDispatcherOnMountInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {\n                    currentHookNameInDev = 'useOptimistic';\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountOptimistic(passthrough);\n                };\n            }\n            InvalidNestedHooksDispatcherOnUpdateInDEV = {\n                readContext: function(context) {\n                    warnInvalidContextAccess();\n                    return readContext(context);\n                },\n                use: function(usable) {\n                    warnInvalidHookAccess();\n                    return use(usable);\n                },\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = 'useCallback';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = 'useContext';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = 'useEffect';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = 'useImperativeHandle';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = 'useInsertionEffect';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = 'useLayoutEffect';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = 'useMemo';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateMemo(create, deps);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = 'useReducer';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = 'useRef';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateRef();\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = 'useState';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateState(initialState);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = 'useDebugValue';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateDebugValue();\n                },\n                useDeferredValue: function(value, initialValue) {\n                    currentHookNameInDev = 'useDeferredValue';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateDeferredValue(value, initialValue);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = 'useTransition';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateTransition();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = 'useSyncExternalStore';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = 'useId';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateId();\n                }\n            };\n            {\n                InvalidNestedHooksDispatcherOnUpdateInDEV.useCacheRefresh = function useCacheRefresh() {\n                    currentHookNameInDev = 'useCacheRefresh';\n                    updateHookTypesDev();\n                    return updateRefresh();\n                };\n            }\n            {\n                InvalidNestedHooksDispatcherOnUpdateInDEV.useMemoCache = function(size) {\n                    warnInvalidHookAccess();\n                    return useMemoCache(size);\n                };\n            }\n            {\n                InvalidNestedHooksDispatcherOnUpdateInDEV.useHostTransitionStatus = useHostTransitionStatus;\n                InvalidNestedHooksDispatcherOnUpdateInDEV.useFormState = function useFormState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useFormState';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateActionState(action);\n                };\n                InvalidNestedHooksDispatcherOnUpdateInDEV.useActionState = function useActionState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useActionState';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateActionState(action);\n                };\n            }\n            {\n                InvalidNestedHooksDispatcherOnUpdateInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {\n                    currentHookNameInDev = 'useOptimistic';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateOptimistic(passthrough, reducer);\n                };\n            }\n            InvalidNestedHooksDispatcherOnRerenderInDEV = {\n                readContext: function(context) {\n                    warnInvalidContextAccess();\n                    return readContext(context);\n                },\n                use: function(usable) {\n                    warnInvalidHookAccess();\n                    return use(usable);\n                },\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = 'useCallback';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = 'useContext';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = 'useEffect';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = 'useImperativeHandle';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = 'useInsertionEffect';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = 'useLayoutEffect';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = 'useMemo';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateMemo(create, deps);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = 'useReducer';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return rerenderReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = 'useRef';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateRef();\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = 'useState';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactSharedInternals.H;\n                    ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return rerenderState(initialState);\n                    } finally{\n                        ReactSharedInternals.H = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = 'useDebugValue';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateDebugValue();\n                },\n                useDeferredValue: function(value, initialValue) {\n                    currentHookNameInDev = 'useDeferredValue';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return rerenderDeferredValue(value, initialValue);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = 'useTransition';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return rerenderTransition();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = 'useSyncExternalStore';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = 'useId';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateId();\n                }\n            };\n            {\n                InvalidNestedHooksDispatcherOnRerenderInDEV.useCacheRefresh = function useCacheRefresh() {\n                    currentHookNameInDev = 'useCacheRefresh';\n                    updateHookTypesDev();\n                    return updateRefresh();\n                };\n            }\n            {\n                InvalidNestedHooksDispatcherOnRerenderInDEV.useMemoCache = function(size) {\n                    warnInvalidHookAccess();\n                    return useMemoCache(size);\n                };\n            }\n            {\n                InvalidNestedHooksDispatcherOnRerenderInDEV.useHostTransitionStatus = useHostTransitionStatus;\n                InvalidNestedHooksDispatcherOnRerenderInDEV.useFormState = function useFormState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useFormState';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return rerenderActionState(action);\n                };\n                InvalidNestedHooksDispatcherOnRerenderInDEV.useActionState = function useActionState(action, initialState, permalink) {\n                    currentHookNameInDev = 'useActionState';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return rerenderActionState(action);\n                };\n            }\n            {\n                InvalidNestedHooksDispatcherOnRerenderInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {\n                    currentHookNameInDev = 'useOptimistic';\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return rerenderOptimistic(passthrough, reducer);\n                };\n            }\n        }\n        var now = Scheduler.unstable_now;\n        var commitTime = 0;\n        var layoutEffectStartTime = -1;\n        var profilerStartTime = -1;\n        var passiveEffectStartTime = -1;\n        /**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */ var currentUpdateIsNested = false;\n        var nestedUpdateScheduled = false;\n        function isCurrentUpdateNested() {\n            return currentUpdateIsNested;\n        }\n        function markNestedUpdateScheduled() {\n            {\n                nestedUpdateScheduled = true;\n            }\n        }\n        function resetNestedUpdateFlag() {\n            {\n                currentUpdateIsNested = false;\n                nestedUpdateScheduled = false;\n            }\n        }\n        function syncNestedUpdateFlag() {\n            {\n                currentUpdateIsNested = nestedUpdateScheduled;\n                nestedUpdateScheduled = false;\n            }\n        }\n        function getCommitTime() {\n            return commitTime;\n        }\n        function recordCommitTime() {\n            commitTime = now();\n        }\n        function startProfilerTimer(fiber) {\n            profilerStartTime = now();\n            if (fiber.actualStartTime < 0) {\n                fiber.actualStartTime = now();\n            }\n        }\n        function stopProfilerTimerIfRunning(fiber) {\n            profilerStartTime = -1;\n        }\n        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n            if (profilerStartTime >= 0) {\n                var elapsedTime = now() - profilerStartTime;\n                fiber.actualDuration += elapsedTime;\n                if (overrideBaseTime) {\n                    fiber.selfBaseDuration = elapsedTime;\n                }\n                profilerStartTime = -1;\n            }\n        }\n        function recordLayoutEffectDuration(fiber) {\n            if (layoutEffectStartTime >= 0) {\n                var elapsedTime = now() - layoutEffectStartTime;\n                layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n                // Or the root (for the DevTools Profiler to read)\n                var parentFiber = fiber.return;\n                while(parentFiber !== null){\n                    switch(parentFiber.tag){\n                        case HostRoot:\n                            var root = parentFiber.stateNode;\n                            root.effectDuration += elapsedTime;\n                            return;\n                        case Profiler:\n                            var parentStateNode = parentFiber.stateNode;\n                            parentStateNode.effectDuration += elapsedTime;\n                            return;\n                    }\n                    parentFiber = parentFiber.return;\n                }\n            }\n        }\n        function recordPassiveEffectDuration(fiber) {\n            if (passiveEffectStartTime >= 0) {\n                var elapsedTime = now() - passiveEffectStartTime;\n                passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n                // Or the root (for the DevTools Profiler to read)\n                var parentFiber = fiber.return;\n                while(parentFiber !== null){\n                    switch(parentFiber.tag){\n                        case HostRoot:\n                            var root = parentFiber.stateNode;\n                            if (root !== null) {\n                                root.passiveEffectDuration += elapsedTime;\n                            }\n                            return;\n                        case Profiler:\n                            var parentStateNode = parentFiber.stateNode;\n                            if (parentStateNode !== null) {\n                                // Detached fibers have their state node cleared out.\n                                // In this case, the return pointer is also cleared out,\n                                // so we won't be able to report the time spent in this Profiler's subtree.\n                                parentStateNode.passiveEffectDuration += elapsedTime;\n                            }\n                            return;\n                    }\n                    parentFiber = parentFiber.return;\n                }\n            }\n        }\n        function startLayoutEffectTimer() {\n            layoutEffectStartTime = now();\n        }\n        function startPassiveEffectTimer() {\n            passiveEffectStartTime = now();\n        }\n        function transferActualDuration(fiber) {\n            // Transfer time spent rendering these children so we don't lose it\n            // after we rerender. This is used as a helper in special cases\n            // where we should count the work of multiple passes.\n            var child = fiber.child;\n            while(child){\n                // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n                fiber.actualDuration += child.actualDuration;\n                child = child.sibling;\n            }\n        }\n        var fakeInternalInstance = {};\n        var didWarnAboutStateAssignmentForComponent;\n        var didWarnAboutUninitializedState;\n        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n        var didWarnAboutLegacyLifecyclesAndDerivedState;\n        var didWarnAboutUndefinedDerivedState;\n        var didWarnAboutDirectlyAssigningPropsToState;\n        var didWarnAboutInvalidateContextType;\n        var didWarnOnInvalidCallback;\n        {\n            didWarnAboutStateAssignmentForComponent = new Set();\n            didWarnAboutUninitializedState = new Set();\n            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n            didWarnAboutDirectlyAssigningPropsToState = new Set();\n            didWarnAboutUndefinedDerivedState = new Set();\n            didWarnAboutInvalidateContextType = new Set();\n            didWarnOnInvalidCallback = new Set(); // This is so gross but it's at least non-critical and can be removed if\n            // it causes problems. This is meant to give a nicer error message for\n            // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n            // ...)) which otherwise throws a \"_processChildContext is not a function\"\n            // exception.\n            Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n                enumerable: false,\n                value: function() {\n                    throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n                }\n            });\n            Object.freeze(fakeInternalInstance);\n        }\n        function warnOnInvalidCallback(callback) {\n            {\n                if (callback === null || typeof callback === 'function') {\n                    return;\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var key = String(callback);\n                if (!didWarnOnInvalidCallback.has(key)) {\n                    didWarnOnInvalidCallback.add(key);\n                    error('Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n                }\n            }\n        }\n        function warnOnUndefinedDerivedState(type, partialState) {\n            {\n                if (partialState === undefined) {\n                    var componentName = getComponentNameFromType(type) || 'Component';\n                    if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n                        didWarnAboutUndefinedDerivedState.add(componentName);\n                        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n                    }\n                }\n            }\n        }\n        function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n            var prevState = workInProgress.memoizedState;\n            var partialState = getDerivedStateFromProps(nextProps, prevState);\n            {\n                if (workInProgress.mode & StrictLegacyMode) {\n                    setIsStrictModeForDevtools(true);\n                    try {\n                        // Invoke the function an extra time to help detect side-effects.\n                        partialState = getDerivedStateFromProps(nextProps, prevState);\n                    } finally{\n                        setIsStrictModeForDevtools(false);\n                    }\n                }\n                warnOnUndefinedDerivedState(ctor, partialState);\n            }\n            var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n            workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n            // base state.\n            if (workInProgress.lanes === NoLanes) {\n                // Queue is always non-null for classes\n                var updateQueue = workInProgress.updateQueue;\n                updateQueue.baseState = memoizedState;\n            }\n        }\n        var classComponentUpdater = {\n            isMounted: isMounted,\n            // $FlowFixMe[missing-local-annot]\n            enqueueSetState: function(inst, payload, callback) {\n                var fiber = get(inst);\n                var lane = requestUpdateLane(fiber);\n                var update = createUpdate(lane);\n                update.payload = payload;\n                if (callback !== undefined && callback !== null) {\n                    {\n                        warnOnInvalidCallback(callback);\n                    }\n                    update.callback = callback;\n                }\n                var root = enqueueUpdate(fiber, update, lane);\n                if (root !== null) {\n                    scheduleUpdateOnFiber(root, fiber, lane);\n                    entangleTransitions(root, fiber, lane);\n                }\n                {\n                    markStateUpdateScheduled(fiber, lane);\n                }\n            },\n            enqueueReplaceState: function(inst, payload, callback) {\n                var fiber = get(inst);\n                var lane = requestUpdateLane(fiber);\n                var update = createUpdate(lane);\n                update.tag = ReplaceState;\n                update.payload = payload;\n                if (callback !== undefined && callback !== null) {\n                    {\n                        warnOnInvalidCallback(callback);\n                    }\n                    update.callback = callback;\n                }\n                var root = enqueueUpdate(fiber, update, lane);\n                if (root !== null) {\n                    scheduleUpdateOnFiber(root, fiber, lane);\n                    entangleTransitions(root, fiber, lane);\n                }\n                {\n                    markStateUpdateScheduled(fiber, lane);\n                }\n            },\n            // $FlowFixMe[missing-local-annot]\n            enqueueForceUpdate: function(inst, callback) {\n                var fiber = get(inst);\n                var lane = requestUpdateLane(fiber);\n                var update = createUpdate(lane);\n                update.tag = ForceUpdate;\n                if (callback !== undefined && callback !== null) {\n                    {\n                        warnOnInvalidCallback(callback);\n                    }\n                    update.callback = callback;\n                }\n                var root = enqueueUpdate(fiber, update, lane);\n                if (root !== null) {\n                    scheduleUpdateOnFiber(root, fiber, lane);\n                    entangleTransitions(root, fiber, lane);\n                }\n                {\n                    markForceUpdateScheduled(fiber, lane);\n                }\n            }\n        };\n        function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n            var instance = workInProgress.stateNode;\n            if (typeof instance.shouldComponentUpdate === 'function') {\n                var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n                {\n                    if (workInProgress.mode & StrictLegacyMode) {\n                        setIsStrictModeForDevtools(true);\n                        try {\n                            // Invoke the function an extra time to help detect side-effects.\n                            shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n                        } finally{\n                            setIsStrictModeForDevtools(false);\n                        }\n                    }\n                    if (shouldUpdate === undefined) {\n                        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n                    }\n                }\n                return shouldUpdate;\n            }\n            if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n                return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n            }\n            return true;\n        }\n        function checkClassInstance(workInProgress, ctor, newProps) {\n            var instance = workInProgress.stateNode;\n            {\n                var name = getComponentNameFromType(ctor) || 'Component';\n                var renderPresent = instance.render;\n                if (!renderPresent) {\n                    if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n                        error('No `render` method found on the %s ' + 'instance: did you accidentally return an object from the constructor?', name);\n                    } else {\n                        error('No `render` method found on the %s ' + 'instance: you may have forgotten to define `render`.', name);\n                    }\n                }\n                if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n                    error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n                }\n                if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n                    error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n                }\n                if (instance.propTypes) {\n                    error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n                }\n                if (instance.contextType) {\n                    error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n                }\n                {\n                    if (ctor.childContextTypes) {\n                        error('%s uses the legacy childContextTypes API which was removed in React 19. ' + 'Use React.createContext() instead.', name);\n                    }\n                    if (ctor.contextTypes) {\n                        error('%s uses the legacy contextTypes API which was removed in React 19. ' + 'Use React.createContext() with static contextType instead.', name);\n                    }\n                }\n                if (typeof instance.componentShouldUpdate === 'function') {\n                    error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n                }\n                if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n                    error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n                }\n                if (typeof instance.componentDidUnmount === 'function') {\n                    error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n                }\n                if (typeof instance.componentDidReceiveProps === 'function') {\n                    error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n                }\n                if (typeof instance.componentWillRecieveProps === 'function') {\n                    error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n                }\n                if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n                    error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n                }\n                var hasMutatedProps = instance.props !== newProps;\n                if (instance.props !== undefined && hasMutatedProps) {\n                    error('When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name);\n                }\n                if (instance.defaultProps) {\n                    error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n                    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n                    error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n                }\n                if (typeof instance.getDerivedStateFromProps === 'function') {\n                    error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n                }\n                if (typeof instance.getDerivedStateFromError === 'function') {\n                    error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n                }\n                if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n                    error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n                }\n                var state = instance.state;\n                if (state && (typeof state !== 'object' || isArray(state))) {\n                    error('%s.state: must be set to an object or null', name);\n                }\n                if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n                    error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n                }\n            }\n        }\n        function constructClassInstance(workInProgress, ctor, props) {\n            var context = emptyContextObject;\n            var contextType = ctor.contextType;\n            {\n                if ('contextType' in ctor) {\n                    var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE;\n                    if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n                        didWarnAboutInvalidateContextType.add(ctor);\n                        var addendum = '';\n                        if (contextType === undefined) {\n                            addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n                        } else if (typeof contextType !== 'object') {\n                            addendum = ' However, it is set to a ' + typeof contextType + '.';\n                        } else if (contextType.$$typeof === REACT_CONSUMER_TYPE) {\n                            addendum = ' Did you accidentally pass the Context.Consumer instead?';\n                        } else {\n                            addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n                        }\n                        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n                    }\n                }\n            }\n            if (typeof contextType === 'object' && contextType !== null) {\n                context = readContext(contextType);\n            }\n            var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n            {\n                if (workInProgress.mode & StrictLegacyMode) {\n                    setIsStrictModeForDevtools(true);\n                    try {\n                        instance = new ctor(props, context); // eslint-disable-line no-new\n                    } finally{\n                        setIsStrictModeForDevtools(false);\n                    }\n                }\n            }\n            var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n            instance.updater = classComponentUpdater;\n            workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n            set(instance, workInProgress);\n            {\n                instance._reactInternalInstance = fakeInternalInstance;\n            }\n            {\n                if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n                    var componentName = getComponentNameFromType(ctor) || 'Component';\n                    if (!didWarnAboutUninitializedState.has(componentName)) {\n                        didWarnAboutUninitializedState.add(componentName);\n                        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n                    }\n                } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n                // Warn about these lifecycles if they are present.\n                // Don't warn about react-lifecycles-compat polyfilled methods though.\n                if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n                    var foundWillMountName = null;\n                    var foundWillReceivePropsName = null;\n                    var foundWillUpdateName = null;\n                    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                        foundWillMountName = 'componentWillMount';\n                    } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n                        foundWillMountName = 'UNSAFE_componentWillMount';\n                    }\n                    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n                        foundWillReceivePropsName = 'componentWillReceiveProps';\n                    } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n                        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n                    }\n                    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n                        foundWillUpdateName = 'componentWillUpdate';\n                    } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n                        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n                    }\n                    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n                        var _componentName = getComponentNameFromType(ctor) || 'Component';\n                        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n                        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n                            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n                            error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://react.dev/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n                        }\n                    }\n                }\n            }\n            return instance;\n        }\n        function callComponentWillMount(workInProgress, instance) {\n            var oldState = instance.state;\n            if (typeof instance.componentWillMount === 'function') {\n                instance.componentWillMount();\n            }\n            if (typeof instance.UNSAFE_componentWillMount === 'function') {\n                instance.UNSAFE_componentWillMount();\n            }\n            if (oldState !== instance.state) {\n                {\n                    error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n                }\n                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n            }\n        }\n        function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n            var oldState = instance.state;\n            if (typeof instance.componentWillReceiveProps === 'function') {\n                instance.componentWillReceiveProps(newProps, nextContext);\n            }\n            if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n                instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n            }\n            if (instance.state !== oldState) {\n                {\n                    var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n                    if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n                        didWarnAboutStateAssignmentForComponent.add(componentName);\n                        error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n                    }\n                }\n                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n            }\n        } // Invokes the mount life-cycles on a previously never rendered instance.\n        function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n            {\n                checkClassInstance(workInProgress, ctor, newProps);\n            }\n            var instance = workInProgress.stateNode;\n            instance.props = newProps;\n            instance.state = workInProgress.memoizedState;\n            instance.refs = {};\n            initializeUpdateQueue(workInProgress);\n            var contextType = ctor.contextType;\n            if (typeof contextType === 'object' && contextType !== null) {\n                instance.context = readContext(contextType);\n            } else {\n                instance.context = emptyContextObject;\n            }\n            {\n                if (instance.state === newProps) {\n                    var componentName = getComponentNameFromType(ctor) || 'Component';\n                    if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n                        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n                        error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n                    }\n                }\n                if (workInProgress.mode & StrictLegacyMode) {\n                    ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n                }\n                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n            }\n            instance.state = workInProgress.memoizedState;\n            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n            if (typeof getDerivedStateFromProps === 'function') {\n                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n                instance.state = workInProgress.memoizedState;\n            } // In order to support react-lifecycles-compat polyfilled components,\n            // Unsafe lifecycles should not be invoked for components using the new APIs.\n            if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n                callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n                // process them now.\n                processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n                suspendIfUpdateReadFromEntangledAsyncAction();\n                instance.state = workInProgress.memoizedState;\n            }\n            if (typeof instance.componentDidMount === 'function') {\n                workInProgress.flags |= Update | LayoutStatic;\n            }\n            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n                workInProgress.flags |= MountLayoutDev;\n            }\n        }\n        function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n            var instance = workInProgress.stateNode;\n            var unresolvedOldProps = workInProgress.memoizedProps;\n            var oldProps = resolveClassComponentProps(ctor, unresolvedOldProps);\n            instance.props = oldProps;\n            var oldContext = instance.context;\n            var contextType = ctor.contextType;\n            var nextContext = emptyContextObject;\n            if (typeof contextType === 'object' && contextType !== null) {\n                nextContext = readContext(contextType);\n            }\n            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n            var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // When comparing whether props changed, we should compare using the\n            // unresolved props object that is stored on the fiber, rather than the\n            // one that gets assigned to the instance, because that object may have been\n            // cloned to resolve default props and/or remove `ref`.\n            var unresolvedNewProps = workInProgress.pendingProps;\n            var didReceiveNewProps = unresolvedNewProps !== unresolvedOldProps; // Note: During these life-cycles, instance.props/instance.state are what\n            // ever the previously attempted to render - not the \"current\". However,\n            // during componentDidUpdate we pass the \"current\" props.\n            // In order to support react-lifecycles-compat polyfilled components,\n            // Unsafe lifecycles should not be invoked for components using the new APIs.\n            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n                if (didReceiveNewProps || oldContext !== nextContext) {\n                    callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n                }\n            }\n            resetHasForceUpdateBeforeProcessing();\n            var oldState = workInProgress.memoizedState;\n            var newState = instance.state = oldState;\n            processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n            suspendIfUpdateReadFromEntangledAsyncAction();\n            newState = workInProgress.memoizedState;\n            if (!didReceiveNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n                // If an update was already in progress, we should schedule an Update\n                // effect even though we're bailing out, so that cWU/cDU are called.\n                if (typeof instance.componentDidMount === 'function') {\n                    workInProgress.flags |= Update | LayoutStatic;\n                }\n                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n                    workInProgress.flags |= MountLayoutDev;\n                }\n                return false;\n            }\n            if (typeof getDerivedStateFromProps === 'function') {\n                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n                newState = workInProgress.memoizedState;\n            }\n            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n            if (shouldUpdate) {\n                // In order to support react-lifecycles-compat polyfilled components,\n                // Unsafe lifecycles should not be invoked for components using the new APIs.\n                if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n                    if (typeof instance.componentWillMount === 'function') {\n                        instance.componentWillMount();\n                    }\n                    if (typeof instance.UNSAFE_componentWillMount === 'function') {\n                        instance.UNSAFE_componentWillMount();\n                    }\n                }\n                if (typeof instance.componentDidMount === 'function') {\n                    workInProgress.flags |= Update | LayoutStatic;\n                }\n                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n                    workInProgress.flags |= MountLayoutDev;\n                }\n            } else {\n                // If an update was already in progress, we should schedule an Update\n                // effect even though we're bailing out, so that cWU/cDU are called.\n                if (typeof instance.componentDidMount === 'function') {\n                    workInProgress.flags |= Update | LayoutStatic;\n                }\n                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n                    workInProgress.flags |= MountLayoutDev;\n                } // If shouldComponentUpdate returned false, we should still update the\n                // memoized state to indicate that this work can be reused.\n                workInProgress.memoizedProps = newProps;\n                workInProgress.memoizedState = newState;\n            } // Update the existing instance's state, props, and context pointers even\n            // if shouldComponentUpdate returns false.\n            instance.props = newProps;\n            instance.state = newState;\n            instance.context = nextContext;\n            return shouldUpdate;\n        } // Invokes the update life-cycles and returns false if it shouldn't rerender.\n        function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n            var instance = workInProgress.stateNode;\n            cloneUpdateQueue(current, workInProgress);\n            var unresolvedOldProps = workInProgress.memoizedProps;\n            var oldProps = resolveClassComponentProps(ctor, unresolvedOldProps);\n            instance.props = oldProps;\n            var unresolvedNewProps = workInProgress.pendingProps;\n            var oldContext = instance.context;\n            var contextType = ctor.contextType;\n            var nextContext = emptyContextObject;\n            if (typeof contextType === 'object' && contextType !== null) {\n                nextContext = readContext(contextType);\n            }\n            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n            var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n            // ever the previously attempted to render - not the \"current\". However,\n            // during componentDidUpdate we pass the \"current\" props.\n            // In order to support react-lifecycles-compat polyfilled components,\n            // Unsafe lifecycles should not be invoked for components using the new APIs.\n            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n                if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n                    callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n                }\n            }\n            resetHasForceUpdateBeforeProcessing();\n            var oldState = workInProgress.memoizedState;\n            var newState = instance.state = oldState;\n            processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n            suspendIfUpdateReadFromEntangledAsyncAction();\n            newState = workInProgress.memoizedState;\n            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {\n                // If an update was already in progress, we should schedule an Update\n                // effect even though we're bailing out, so that cWU/cDU are called.\n                if (typeof instance.componentDidUpdate === 'function') {\n                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n                        workInProgress.flags |= Update;\n                    }\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n                        workInProgress.flags |= Snapshot;\n                    }\n                }\n                return false;\n            }\n            if (typeof getDerivedStateFromProps === 'function') {\n                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n                newState = workInProgress.memoizedState;\n            }\n            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n            // both before and after `shouldComponentUpdate` has been called. Not ideal,\n            // but I'm loath to refactor this function. This only happens for memoized\n            // components so it's not that common.\n            enableLazyContextPropagation;\n            if (shouldUpdate) {\n                // In order to support react-lifecycles-compat polyfilled components,\n                // Unsafe lifecycles should not be invoked for components using the new APIs.\n                if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n                    if (typeof instance.componentWillUpdate === 'function') {\n                        instance.componentWillUpdate(newProps, newState, nextContext);\n                    }\n                    if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n                        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n                    }\n                }\n                if (typeof instance.componentDidUpdate === 'function') {\n                    workInProgress.flags |= Update;\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n                    workInProgress.flags |= Snapshot;\n                }\n            } else {\n                // If an update was already in progress, we should schedule an Update\n                // effect even though we're bailing out, so that cWU/cDU are called.\n                if (typeof instance.componentDidUpdate === 'function') {\n                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n                        workInProgress.flags |= Update;\n                    }\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n                        workInProgress.flags |= Snapshot;\n                    }\n                } // If shouldComponentUpdate returned false, we should still update the\n                // memoized props/state to indicate that this work can be reused.\n                workInProgress.memoizedProps = newProps;\n                workInProgress.memoizedState = newState;\n            } // Update the existing instance's state, props, and context pointers even\n            // if shouldComponentUpdate returns false.\n            instance.props = newProps;\n            instance.state = newState;\n            instance.context = nextContext;\n            return shouldUpdate;\n        }\n        function resolveClassComponentProps(Component, baseProps, // would have already been resolved by the JSX runtime.\n        // TODO: We're going to remove default prop resolution from the JSX runtime\n        // and keep it only for class components. As part of that change, we should\n        // remove this extra check.\n        alreadyResolvedDefaultProps) {\n            var newProps = baseProps;\n            {\n                // Remove ref from the props object, if it exists.\n                if ('ref' in baseProps) {\n                    newProps = {};\n                    for(var propName in baseProps){\n                        if (propName !== 'ref') {\n                            newProps[propName] = baseProps[propName];\n                        }\n                    }\n                }\n            }\n            var defaultProps = Component.defaultProps;\n            if (defaultProps && // default props here in the reconciler, rather than in the JSX runtime.\n            disableDefaultPropsExceptForClasses) {\n                // We may have already copied the props object above to remove ref. If so,\n                // we can modify that. Otherwise, copy the props object with Object.assign.\n                if (newProps === baseProps) {\n                    newProps = assign({}, newProps);\n                } // Taken from old JSX runtime, where this used to live.\n                for(var _propName in defaultProps){\n                    if (newProps[_propName] === undefined) {\n                        newProps[_propName] = defaultProps[_propName];\n                    }\n                }\n            }\n            return newProps;\n        }\n        var reportGlobalError = typeof reportError === 'function' ? // emulating an uncaught JavaScript error.\n        reportError : function(error) {\n            if (false) { var shouldLog, event, message; } else if (typeof process === 'object' && // $FlowFixMe[method-unbinding]\n            typeof process.emit === 'function') {\n                // Node Polyfill\n                process.emit('uncaughtException', error);\n                return;\n            } // eslint-disable-next-line react-internal/no-production-logging\n            console['error'](error);\n        };\n        var componentName = null;\n        var errorBoundaryName = null;\n        function defaultOnUncaughtError(error, errorInfo) {\n            // Overriding this can silence these warnings e.g. for tests.\n            // See https://github.com/facebook/react/pull/13384\n            // For uncaught root errors we report them as uncaught to the browser's\n            // onerror callback. This won't have component stacks and the error addendum.\n            // So we add those into a separate console.warn.\n            reportGlobalError(error);\n            {\n                var componentNameMessage = componentName ? \"An error occurred in the <\" + componentName + \"> component.\" : 'An error occurred in one of your React components.';\n                var errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://react.dev/link/error-boundaries to learn more about error boundaries.';\n                {\n                    // The current Fiber is disconnected at this point which means that console printing\n                    // cannot add a component stack since it terminates at the deletion node. This is not\n                    // a problem for owner stacks which are not disconnected but for the parent component\n                    // stacks we need to use the snapshot we've previously extracted.\n                    var componentStack = errorInfo.componentStack != null ? errorInfo.componentStack : ''; // Don't transform to our wrapper\n                    console['warn']('%s\\n\\n%s\\n%s', componentNameMessage, errorBoundaryMessage, componentStack);\n                }\n            }\n        }\n        function defaultOnCaughtError(error$1, errorInfo) {\n            // Overriding this can silence these warnings e.g. for tests.\n            // See https://github.com/facebook/react/pull/13384\n            // Caught by error boundary\n            {\n                var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component.\" : 'The above error occurred in one of your React components.'; // In development, we provide our own message which includes the component stack\n                // in addition to the error.\n                var recreateMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + (errorBoundaryName || 'Anonymous') + \".\");\n                {\n                    // The current Fiber is disconnected at this point which means that console printing\n                    // cannot add a component stack since it terminates at the deletion node. This is not\n                    // a problem for owner stacks which are not disconnected but for the parent component\n                    // stacks we need to use the snapshot we've previously extracted.\n                    var componentStack = errorInfo.componentStack != null ? errorInfo.componentStack : ''; // Don't transform to our wrapper\n                    console['error']('%o\\n\\n%s\\n\\n%s\\n%s', error$1, componentNameMessage, recreateMessage, componentStack);\n                }\n            }\n        }\n        function defaultOnRecoverableError(error, errorInfo) {\n            reportGlobalError(error);\n        }\n        function logUncaughtError(root, errorInfo) {\n            try {\n                if (true) {\n                    componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;\n                    errorBoundaryName = null;\n                }\n                var error = errorInfo.value;\n                if ( true && ReactSharedInternals.actQueue !== null) {\n                    // For uncaught errors inside act, we track them on the act and then\n                    // rethrow them into the test.\n                    ReactSharedInternals.thrownErrors.push(error);\n                    return;\n                }\n                var onUncaughtError = root.onUncaughtError;\n                onUncaughtError(error, {\n                    componentStack: errorInfo.stack\n                });\n            } catch (e) {\n                // This method must not throw, or React internal state will get messed up.\n                // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n                // we want to report this error outside of the normal stack as a last resort.\n                // https://github.com/facebook/react/issues/13188\n                setTimeout(function() {\n                    throw e;\n                });\n            }\n        }\n        function logCaughtError(root, boundary, errorInfo) {\n            try {\n                if (true) {\n                    componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;\n                    errorBoundaryName = getComponentNameFromFiber(boundary);\n                }\n                var error = errorInfo.value;\n                var onCaughtError = root.onCaughtError;\n                onCaughtError(error, {\n                    componentStack: errorInfo.stack,\n                    errorBoundary: boundary.tag === ClassComponent ? boundary.stateNode // This should always be the case as long as we only have class boundaries\n                     : null\n                });\n            } catch (e) {\n                // This method must not throw, or React internal state will get messed up.\n                // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n                // we want to report this error outside of the normal stack as a last resort.\n                // https://github.com/facebook/react/issues/13188\n                setTimeout(function() {\n                    throw e;\n                });\n            }\n        }\n        function createRootErrorUpdate(root, errorInfo, lane) {\n            var update = createUpdate(lane); // Unmount the root by rendering null.\n            update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n            // being called \"element\".\n            update.payload = {\n                element: null\n            };\n            update.callback = function() {\n                {\n                    runWithFiberInDEV(errorInfo.source, logUncaughtError, root, errorInfo);\n                }\n            };\n            return update;\n        }\n        function createClassErrorUpdate(lane) {\n            var update = createUpdate(lane);\n            update.tag = CaptureUpdate;\n            return update;\n        }\n        function initializeClassErrorUpdate(update, root, fiber, errorInfo) {\n            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n            if (typeof getDerivedStateFromError === 'function') {\n                var error$1 = errorInfo.value;\n                update.payload = function() {\n                    return getDerivedStateFromError(error$1);\n                };\n                update.callback = function() {\n                    {\n                        markFailedErrorBoundaryForHotReloading(fiber);\n                    }\n                    {\n                        runWithFiberInDEV(errorInfo.source, logCaughtError, root, fiber, errorInfo);\n                    }\n                };\n            }\n            var inst = fiber.stateNode;\n            if (inst !== null && typeof inst.componentDidCatch === 'function') {\n                // $FlowFixMe[missing-this-annot]\n                update.callback = function callback() {\n                    {\n                        markFailedErrorBoundaryForHotReloading(fiber);\n                    }\n                    {\n                        runWithFiberInDEV(errorInfo.source, logCaughtError, root, fiber, errorInfo);\n                    }\n                    if (typeof getDerivedStateFromError !== 'function') {\n                        // To preserve the preexisting retry behavior of error boundaries,\n                        // we keep track of which ones already failed during this batch.\n                        // This gets reset before we yield back to the browser.\n                        // TODO: Warn in strict mode if getDerivedStateFromError is\n                        // not defined.\n                        markLegacyErrorBoundaryAsFailed(this);\n                    }\n                    var error$1 = errorInfo.value;\n                    var stack = errorInfo.stack;\n                    this.componentDidCatch(error$1, {\n                        componentStack: stack !== null ? stack : ''\n                    });\n                    {\n                        if (typeof getDerivedStateFromError !== 'function') {\n                            // If componentDidCatch is the only error boundary method defined,\n                            // then it needs to call setState to recover from errors.\n                            // If no state update is scheduled then the boundary will swallow the error.\n                            if (!includesSomeLane(fiber.lanes, SyncLane)) {\n                                error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n                            }\n                        }\n                    }\n                };\n            }\n        }\n        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n            // with the normal suspend path.\n            //\n            // After this we'll use a set of heuristics to determine whether this\n            // render pass will run to completion or restart or \"suspend\" the commit.\n            // The actual logic for this is spread out in different places.\n            //\n            // This first principle is that if we're going to suspend when we complete\n            // a root, then we should also restart if we get an update or ping that\n            // might unsuspend it, and vice versa. The only reason to suspend is\n            // because you think you might want to restart before committing. However,\n            // it doesn't make sense to restart only while in the period we're suspended.\n            //\n            // Restarting too aggressively is also not good because it starves out any\n            // intermediate loading state. So we use heuristics to determine when.\n            // Suspense Heuristics\n            //\n            // If nothing threw a Promise or all the same fallbacks are already showing,\n            // then don't suspend/restart.\n            //\n            // If this is an initial render of a new tree of Suspense boundaries and\n            // those trigger a fallback, then don't suspend/restart. We want to ensure\n            // that we can show the initial loading state as quickly as possible.\n            //\n            // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n            // a fallback, then we should always suspend/restart. Transitions apply\n            // to this case. If none is defined, JND is used instead.\n            //\n            // If we're already showing a fallback and it gets \"retried\", allowing us to show\n            // another level, but there's still an inner boundary that would show a fallback,\n            // then we suspend/restart for 500ms since the last time we showed a fallback\n            // anywhere in the tree. This effectively throttles progressive loading into a\n            // consistent train of commits. This also gives us an opportunity to restart to\n            // get to the completed state slightly earlier.\n            //\n            // If there's ambiguity due to batching it's resolved in preference of:\n            // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n            //\n            // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n            // ensure that new initial loading states can commit as soon as possible.\n            suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n            // the begin phase to prevent an early bailout.\n            suspenseBoundary.lanes = rootRenderLanes;\n            return suspenseBoundary;\n        }\n        function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n            // The source fiber did not complete.\n            sourceFiber.flags |= Incomplete;\n            {\n                if (isDevToolsPresent) {\n                    // If we have pending work still, restore the original updaters\n                    restorePendingUpdaters(root, rootRenderLanes);\n                }\n            }\n            if (value !== null && typeof value === 'object') {\n                if (typeof value.then === 'function') {\n                    // This is a wakeable. The component suspended.\n                    var wakeable = value;\n                    {\n                        if (getIsHydrating() && disableLegacyMode) {\n                            markDidThrowWhileHydratingDEV();\n                        }\n                    }\n                    var suspenseBoundary = getSuspenseHandler();\n                    if (suspenseBoundary !== null) {\n                        switch(suspenseBoundary.tag){\n                            case SuspenseComponent:\n                                {\n                                    // If this suspense boundary is not already showing a fallback, mark\n                                    // the in-progress render as suspended. We try to perform this logic\n                                    // as soon as soon as possible during the render phase, so the work\n                                    // loop can know things like whether it's OK to switch to other tasks,\n                                    // or whether it can wait for data to resolve before continuing.\n                                    // TODO: Most of these checks are already performed when entering a\n                                    // Suspense boundary. We should track the information on the stack so\n                                    // we don't have to recompute it on demand. This would also allow us\n                                    // to unify with `use` which needs to perform this logic even sooner,\n                                    // before `throwException` is called.\n                                    {\n                                        if (getShellBoundary() === null) {\n                                            // Suspended in the \"shell\" of the app. This is an undesirable\n                                            // loading state. We should avoid committing this tree.\n                                            renderDidSuspendDelayIfPossible();\n                                        } else {\n                                            // If we suspended deeper than the shell, we don't need to delay\n                                            // the commmit. However, we still call renderDidSuspend if this is\n                                            // a new boundary, to tell the work loop that a new fallback has\n                                            // appeared during this render.\n                                            // TODO: Theoretically we should be able to delete this branch.\n                                            // It's currently used for two things: 1) to throttle the\n                                            // appearance of successive loading states, and 2) in\n                                            // SuspenseList, to determine whether the children include any\n                                            // pending fallbacks. For 1, we should apply throttling to all\n                                            // retries, not just ones that render an additional fallback. For\n                                            // 2, we should check subtreeFlags instead. Then we can delete\n                                            // this branch.\n                                            var current = suspenseBoundary.alternate;\n                                            if (current === null) {\n                                                renderDidSuspend();\n                                            }\n                                        }\n                                    }\n                                    suspenseBoundary.flags &= ~ForceClientRender;\n                                    markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Retry listener\n                                    //\n                                    // If the fallback does commit, we need to attach a different type of\n                                    // listener. This one schedules an update on the Suspense boundary to\n                                    // turn the fallback state off.\n                                    //\n                                    // Stash the wakeable on the boundary fiber so we can access it in the\n                                    // commit phase.\n                                    //\n                                    // When the wakeable resolves, we'll attempt to render the boundary\n                                    // again (\"retry\").\n                                    // Check if this is a Suspensey resource. We do not attach retry\n                                    // listeners to these, because we don't actually need them for\n                                    // rendering. Only for committing. Instead, if a fallback commits\n                                    // and the only thing that suspended was a Suspensey resource, we\n                                    // retry immediately.\n                                    // TODO: Refactor throwException so that we don't have to do this type\n                                    // check. The caller already knows what the cause was.\n                                    var isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;\n                                    if (isSuspenseyResource) {\n                                        suspenseBoundary.flags |= ScheduleRetry;\n                                    } else {\n                                        var retryQueue = suspenseBoundary.updateQueue;\n                                        if (retryQueue === null) {\n                                            suspenseBoundary.updateQueue = new Set([\n                                                wakeable\n                                            ]);\n                                        } else {\n                                            retryQueue.add(wakeable);\n                                        } // We only attach ping listeners in concurrent mode. Legacy\n                                        // Suspense always commits fallbacks synchronously, so there are\n                                        // no pings.\n                                        {\n                                            attachPingListener(root, wakeable, rootRenderLanes);\n                                        }\n                                    }\n                                    return false;\n                                }\n                            case OffscreenComponent:\n                                {\n                                    {\n                                        suspenseBoundary.flags |= ShouldCapture;\n                                        var _isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;\n                                        if (_isSuspenseyResource) {\n                                            suspenseBoundary.flags |= ScheduleRetry;\n                                        } else {\n                                            var offscreenQueue = suspenseBoundary.updateQueue;\n                                            if (offscreenQueue === null) {\n                                                var newOffscreenQueue = {\n                                                    transitions: null,\n                                                    markerInstances: null,\n                                                    retryQueue: new Set([\n                                                        wakeable\n                                                    ])\n                                                };\n                                                suspenseBoundary.updateQueue = newOffscreenQueue;\n                                            } else {\n                                                var _retryQueue = offscreenQueue.retryQueue;\n                                                if (_retryQueue === null) {\n                                                    offscreenQueue.retryQueue = new Set([\n                                                        wakeable\n                                                    ]);\n                                                } else {\n                                                    _retryQueue.add(wakeable);\n                                                }\n                                            }\n                                            attachPingListener(root, wakeable, rootRenderLanes);\n                                        }\n                                        return false;\n                                    }\n                                }\n                        }\n                        throw new Error(\"Unexpected Suspense handler tag (\" + suspenseBoundary.tag + \"). This \" + 'is a bug in React.');\n                    } else {\n                        // No boundary was found. Unless this is a sync update, this is OK.\n                        // We can suspend and wait for more data to arrive.\n                        {\n                            // In a concurrent root, suspending without a Suspense boundary is\n                            // allowed. It will suspend indefinitely without committing.\n                            //\n                            // TODO: Should we have different behavior for discrete updates? What\n                            // about flushSync? Maybe it should put the tree into an inert state,\n                            // and potentially log a warning. Revisit this for a future release.\n                            attachPingListener(root, wakeable, rootRenderLanes);\n                            renderDidSuspendDelayIfPossible();\n                            return false;\n                        }\n                    }\n                }\n            } // This is a regular error, not a Suspense wakeable.\n            if (getIsHydrating() && disableLegacyMode) {\n                markDidThrowWhileHydratingDEV();\n                var _suspenseBoundary = getSuspenseHandler(); // If the error was thrown during hydration, we may be able to recover by\n                // discarding the dehydrated content and switching to a client render.\n                // Instead of surfacing the error, find the nearest Suspense boundary\n                // and render it again without hydration.\n                if (_suspenseBoundary !== null) {\n                    if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags$1) {\n                        // Set a flag to indicate that we should try rendering the normal\n                        // children again, not the fallback.\n                        _suspenseBoundary.flags |= ForceClientRender;\n                    }\n                    markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n                    // still log it so it can be fixed.\n                    if (value !== HydrationMismatchException) {\n                        var _wrapperError = new Error('There was an error while hydrating but React was able to recover by ' + 'instead client rendering from the nearest Suspense boundary.', {\n                            cause: value\n                        });\n                        queueHydrationError(createCapturedValueAtFiber(_wrapperError, sourceFiber));\n                    }\n                    return false;\n                } else {\n                    if (value !== HydrationMismatchException) {\n                        var _wrapperError2 = new Error('There was an error while hydrating but React was able to recover by ' + 'instead client rendering the entire root.', {\n                            cause: value\n                        });\n                        queueHydrationError(createCapturedValueAtFiber(_wrapperError2, sourceFiber));\n                    }\n                    var _workInProgress = root.current.alternate; // Schedule an update at the root to log the error but this shouldn't\n                    // actually happen because we should recover.\n                    _workInProgress.flags |= ShouldCapture;\n                    var lane = pickArbitraryLane(rootRenderLanes);\n                    _workInProgress.lanes = mergeLanes(_workInProgress.lanes, lane);\n                    var rootErrorInfo = createCapturedValueAtFiber(value, sourceFiber);\n                    var update = createRootErrorUpdate(_workInProgress.stateNode, rootErrorInfo, lane);\n                    enqueueCapturedUpdate(_workInProgress, update);\n                    renderDidError();\n                    return false;\n                }\n            }\n            var wrapperError = new Error('There was an error during concurrent rendering but React was able to recover by ' + 'instead synchronously rendering the entire root.', {\n                cause: value\n            });\n            queueConcurrentError(createCapturedValueAtFiber(wrapperError, sourceFiber));\n            renderDidError(); // We didn't find a boundary that could handle this type of exception. Start\n            // over and traverse parent path again, this time treating the exception\n            // as an error.\n            if (returnFiber === null) {\n                // There's no return fiber, which means the root errored. This should never\n                // happen. Return `true` to trigger a fatal error (panic).\n                return true;\n            }\n            var errorInfo = createCapturedValueAtFiber(value, sourceFiber);\n            var workInProgress = returnFiber;\n            do {\n                switch(workInProgress.tag){\n                    case HostRoot:\n                        {\n                            workInProgress.flags |= ShouldCapture;\n                            var _lane = pickArbitraryLane(rootRenderLanes);\n                            workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane);\n                            var _update = createRootErrorUpdate(workInProgress.stateNode, errorInfo, _lane);\n                            enqueueCapturedUpdate(workInProgress, _update);\n                            return false;\n                        }\n                    case ClassComponent:\n                        // Capture and retry\n                        var ctor = workInProgress.type;\n                        var instance = workInProgress.stateNode;\n                        if ((workInProgress.flags & DidCapture) === NoFlags$1 && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n                            workInProgress.flags |= ShouldCapture;\n                            var _lane2 = pickArbitraryLane(rootRenderLanes);\n                            workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane2); // Schedule the error boundary to re-render using updated state\n                            var _update2 = createClassErrorUpdate(_lane2);\n                            initializeClassErrorUpdate(_update2, root, workInProgress, errorInfo);\n                            enqueueCapturedUpdate(workInProgress, _update2);\n                            return false;\n                        }\n                        break;\n                } // $FlowFixMe[incompatible-type] we bail out when we get a null\n                workInProgress = workInProgress.return;\n            }while (workInProgress !== null);\n            return false;\n        }\n        // into a dehydrated boundary.\n        var SelectiveHydrationException = new Error(\"This is not a real error. It's an implementation detail of React's \" + \"selective hydration feature. If this leaks into userspace, it's a bug in \" + 'React. Please file an issue.');\n        var didReceiveUpdate = false;\n        var didWarnAboutBadClass;\n        var didWarnAboutContextTypeOnFunctionComponent;\n        var didWarnAboutGetDerivedStateOnFunctionComponent;\n        var didWarnAboutReassigningProps;\n        var didWarnAboutRevealOrder;\n        var didWarnAboutTailOptions;\n        {\n            didWarnAboutBadClass = {};\n            didWarnAboutContextTypeOnFunctionComponent = {};\n            didWarnAboutGetDerivedStateOnFunctionComponent = {};\n            didWarnAboutReassigningProps = false;\n            didWarnAboutRevealOrder = {};\n            didWarnAboutTailOptions = {};\n        }\n        function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n            if (current === null) {\n                // If this is a fresh new component that hasn't been rendered yet, we\n                // won't update its child set by applying minimal side-effects. Instead,\n                // we will add them all to the child before it gets rendered. That means\n                // we can optimize this reconciliation pass by not tracking side-effects.\n                workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n            } else {\n                // If the current child is the same as the work in progress, it means that\n                // we haven't yet started any work on these children. Therefore, we use\n                // the clone algorithm to create a copy of all the current children.\n                // If we had any progressed work already, that is invalid at this point so\n                // let's throw it out.\n                workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n            }\n        }\n        function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n            // This function is fork of reconcileChildren. It's used in cases where we\n            // want to reconcile without matching against the existing set. This has the\n            // effect of all current children being unmounted; even if the type and key\n            // are the same, the old child is unmounted and a new child is created.\n            //\n            // To do this, we're going to go through the reconcile algorithm twice. In\n            // the first pass, we schedule a deletion for all the current children by\n            // passing null.\n            workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n            // pass null in place of where we usually pass the current child set. This has\n            // the effect of remounting all children regardless of whether their\n            // identities match.\n            workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n        }\n        function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n            // TODO: current can be non-null here even if the component\n            // hasn't yet mounted. This happens after the first render suspends.\n            // We'll need to figure out if this is fine or can cause issues.\n            var render = Component.render;\n            var ref = workInProgress.ref;\n            var propsWithoutRef;\n            if ('ref' in nextProps) {\n                // `ref` is just a prop now, but `forwardRef` expects it to not appear in\n                // the props object. This used to happen in the JSX runtime, but now we do\n                // it here.\n                propsWithoutRef = {};\n                for(var key in nextProps){\n                    // Since `ref` should only appear in props via the JSX transform, we can\n                    // assume that this is a plain object. So we don't need a\n                    // hasOwnProperty check.\n                    if (key !== 'ref') {\n                        propsWithoutRef[key] = nextProps[key];\n                    }\n                }\n            } else {\n                propsWithoutRef = nextProps;\n            } // The rest is a fork of updateFunctionComponent\n            var nextChildren;\n            var hasId;\n            prepareToReadContext(workInProgress, renderLanes);\n            {\n                markComponentRenderStarted(workInProgress);\n            }\n            {\n                nextChildren = renderWithHooks(current, workInProgress, render, propsWithoutRef, ref, renderLanes);\n                hasId = checkDidRenderIdHook();\n            }\n            {\n                markComponentRenderStopped();\n            }\n            if (current !== null && !didReceiveUpdate) {\n                bailoutHooks(current, workInProgress, renderLanes);\n                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n            if (getIsHydrating() && hasId) {\n                pushMaterializedTreeId(workInProgress);\n            } // React DevTools reads this flag.\n            workInProgress.flags |= PerformedWork;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n            if (current === null) {\n                var type = Component.type;\n                if (isSimpleFunctionComponent(type) && Component.compare === null && disableDefaultPropsExceptForClasses) {\n                    var resolvedType = type;\n                    {\n                        resolvedType = resolveFunctionForHotReloading(type);\n                    }\n                    // and with only the default shallow comparison, we upgrade it\n                    // to a SimpleMemoComponent to allow fast path updates.\n                    workInProgress.tag = SimpleMemoComponent;\n                    workInProgress.type = resolvedType;\n                    {\n                        validateFunctionComponentInDev(workInProgress, type);\n                    }\n                    return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n                }\n                var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n                child.ref = workInProgress.ref;\n                child.return = workInProgress;\n                workInProgress.child = child;\n                return child;\n            }\n            var currentChild = current.child; // This is always exactly one child\n            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n            if (!hasScheduledUpdateOrContext) {\n                // This will be the props with resolved defaultProps,\n                // unlike current.memoizedProps which will be the unresolved ones.\n                var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n                var compare = Component.compare;\n                compare = compare !== null ? compare : shallowEqual;\n                if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                }\n            } // React DevTools reads this flag.\n            workInProgress.flags |= PerformedWork;\n            var newChild = createWorkInProgress(currentChild, nextProps);\n            newChild.ref = workInProgress.ref;\n            newChild.return = workInProgress;\n            workInProgress.child = newChild;\n            return newChild;\n        }\n        function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n            // TODO: current can be non-null here even if the component\n            // hasn't yet mounted. This happens when the inner render suspends.\n            // We'll need to figure out if this is fine or can cause issues.\n            if (current !== null) {\n                var prevProps = current.memoizedProps;\n                if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {\n                    didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\n                    // would during a normal fiber bailout.\n                    //\n                    // We don't have strong guarantees that the props object is referentially\n                    // equal during updates where we can't bail out anyway — like if the props\n                    // are shallowly equal, but there's a local state or context update in the\n                    // same batch.\n                    //\n                    // However, as a principle, we should aim to make the behavior consistent\n                    // across different ways of memoizing a component. For example, React.memo\n                    // has a different internal Fiber layout if you pass a normal function\n                    // component (SimpleMemoComponent) versus if you pass a different type\n                    // like forwardRef (MemoComponent). But this is an implementation detail.\n                    // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n                    // affect whether the props object is reused during a bailout.\n                    workInProgress.pendingProps = nextProps = prevProps;\n                    if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n                        // The pending lanes were cleared at the beginning of beginWork. We're\n                        // about to bail out, but there might be other lanes that weren't\n                        // included in the current render. Usually, the priority level of the\n                        // remaining updates is accumulated during the evaluation of the\n                        // component (i.e. when processing the update queue). But since since\n                        // we're bailing out early *without* evaluating the component, we need\n                        // to account for it here, too. Reset to the value of the current fiber.\n                        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n                        // because a MemoComponent fiber does not have hooks or an update queue;\n                        // rather, it wraps around an inner component, which may or may not\n                        // contains hooks.\n                        // TODO: Move the reset at in beginWork out of the common path so that\n                        // this is no longer necessary.\n                        workInProgress.lanes = current.lanes;\n                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                    } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {\n                        // This is a special case that only exists for legacy mode.\n                        // See https://github.com/facebook/react/pull/19216.\n                        didReceiveUpdate = true;\n                    }\n                }\n            }\n            return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n        }\n        function updateOffscreenComponent(current, workInProgress, renderLanes) {\n            var nextProps = workInProgress.pendingProps;\n            var nextChildren = nextProps.children;\n            var nextIsDetached = (workInProgress.stateNode._pendingVisibility & OffscreenDetached) !== 0;\n            var prevState = current !== null ? current.memoizedState : null;\n            markRef(current, workInProgress);\n            if (nextProps.mode === 'hidden' || enableLegacyHidden || nextIsDetached) {\n                // Rendering a hidden tree.\n                var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n                if (didSuspend) {\n                    // Something suspended inside a hidden tree\n                    // Include the base lanes from the last render\n                    var nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes) : renderLanes;\n                    if (current !== null) {\n                        // Reset to the current children\n                        var currentChild = workInProgress.child = current.child; // The current render suspended, but there may be other lanes with\n                        // pending work. We can't read `childLanes` from the current Offscreen\n                        // fiber because we reset it when it was deferred; however, we can read\n                        // the pending lanes from the child fibers.\n                        var currentChildLanes = NoLanes;\n                        while(currentChild !== null){\n                            currentChildLanes = mergeLanes(mergeLanes(currentChildLanes, currentChild.lanes), currentChild.childLanes);\n                            currentChild = currentChild.sibling;\n                        }\n                        var lanesWeJustAttempted = nextBaseLanes;\n                        var remainingChildLanes = removeLanes(currentChildLanes, lanesWeJustAttempted);\n                        workInProgress.childLanes = remainingChildLanes;\n                    } else {\n                        workInProgress.childLanes = NoLanes;\n                        workInProgress.child = null;\n                    }\n                    return deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes);\n                }\n                if (!includesSomeLane(renderLanes, OffscreenLane)) {\n                    // We're hidden, and we're not rendering at Offscreen. We will bail out\n                    // and resume this tree later.\n                    // Schedule this fiber to re-render at Offscreen priority\n                    workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane); // Include the base lanes from the last render\n                    var _nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes) : renderLanes;\n                    return deferHiddenOffscreenComponent(current, workInProgress, _nextBaseLanes);\n                } else {\n                    // This is the second render. The surrounding visible content has already\n                    // committed. Now we resume rendering the hidden tree.\n                    // Rendering at offscreen, so we can clear the base lanes.\n                    var _nextState = {\n                        baseLanes: NoLanes,\n                        cachePool: null\n                    };\n                    workInProgress.memoizedState = _nextState;\n                    if (current !== null) {\n                        // If the render that spawned this one accessed the cache pool, resume\n                        // using the same cache. Unless the parent changed, since that means\n                        // there was a refresh.\n                        var prevCachePool = prevState !== null ? prevState.cachePool : null; // TODO: Consider if and how Offscreen pre-rendering should\n                        // be attributed to the transition that spawned it\n                        pushTransition(workInProgress, prevCachePool);\n                    } // Push the lanes that were skipped when we bailed out.\n                    if (prevState !== null) {\n                        pushHiddenContext(workInProgress, prevState);\n                    } else {\n                        reuseHiddenContextOnStack(workInProgress);\n                    }\n                    pushOffscreenSuspenseHandler(workInProgress);\n                }\n            } else {\n                // Rendering a visible tree.\n                if (prevState !== null) {\n                    // We're going from hidden -> visible.\n                    var _prevCachePool = null;\n                    {\n                        // If the render that spawned this one accessed the cache pool, resume\n                        // using the same cache. Unless the parent changed, since that means\n                        // there was a refresh.\n                        _prevCachePool = prevState.cachePool;\n                    }\n                    pushTransition(workInProgress, _prevCachePool); // Push the lanes that were skipped when we bailed out.\n                    pushHiddenContext(workInProgress, prevState);\n                    reuseSuspenseHandlerOnStack(workInProgress); // Since we're not hidden anymore, reset the state\n                    workInProgress.memoizedState = null;\n                } else {\n                    // We weren't previously hidden, and we still aren't, so there's nothing\n                    // special to do. Need to push to the stack regardless, though, to avoid\n                    // a push/pop misalignment.\n                    {\n                        // If the render that spawned this one accessed the cache pool, resume\n                        // using the same cache. Unless the parent changed, since that means\n                        // there was a refresh.\n                        if (current !== null) {\n                            pushTransition(workInProgress, null);\n                        }\n                    }\n                    // to avoid a push/pop misalignment.\n                    reuseHiddenContextOnStack(workInProgress);\n                    reuseSuspenseHandlerOnStack(workInProgress);\n                }\n            }\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes) {\n            var nextState = {\n                baseLanes: nextBaseLanes,\n                // Save the cache pool so we can resume later.\n                cachePool: getOffscreenDeferredCache()\n            };\n            workInProgress.memoizedState = nextState;\n            {\n                // push the cache pool even though we're going to bail out\n                // because otherwise there'd be a context mismatch\n                if (current !== null) {\n                    pushTransition(workInProgress, null);\n                }\n            }\n            // to avoid a push/pop misalignment.\n            reuseHiddenContextOnStack(workInProgress);\n            pushOffscreenSuspenseHandler(workInProgress);\n            return null;\n        } // Note: These happen to have identical begin phases, for now. We shouldn't hold\n        function updateCacheComponent(current, workInProgress, renderLanes) {\n            prepareToReadContext(workInProgress, renderLanes);\n            var parentCache = readContext(CacheContext);\n            if (current === null) {\n                // Initial mount. Request a fresh cache from the pool.\n                var freshCache = requestCacheFromPool(renderLanes);\n                var initialState = {\n                    parent: parentCache,\n                    cache: freshCache\n                };\n                workInProgress.memoizedState = initialState;\n                initializeUpdateQueue(workInProgress);\n                pushCacheProvider(workInProgress, freshCache);\n            } else {\n                // Check for updates\n                if (includesSomeLane(current.lanes, renderLanes)) {\n                    cloneUpdateQueue(current, workInProgress);\n                    processUpdateQueue(workInProgress, null, null, renderLanes);\n                    suspendIfUpdateReadFromEntangledAsyncAction();\n                }\n                var prevState = current.memoizedState;\n                var nextState = workInProgress.memoizedState; // Compare the new parent cache to the previous to see detect there was\n                // a refresh.\n                if (prevState.parent !== parentCache) {\n                    // Refresh in parent. Update the parent.\n                    var derivedState = {\n                        parent: parentCache,\n                        cache: parentCache\n                    }; // Copied from getDerivedStateFromProps implementation. Once the update\n                    // queue is empty, persist the derived state onto the base state.\n                    workInProgress.memoizedState = derivedState;\n                    if (workInProgress.lanes === NoLanes) {\n                        var updateQueue = workInProgress.updateQueue;\n                        workInProgress.memoizedState = updateQueue.baseState = derivedState;\n                    }\n                    pushCacheProvider(workInProgress, parentCache); // No need to propagate a context change because the refreshed parent\n                // already did.\n                } else {\n                    // The parent didn't refresh. Now check if this cache did.\n                    var nextCache = nextState.cache;\n                    pushCacheProvider(workInProgress, nextCache);\n                    if (nextCache !== prevState.cache) {\n                        // This cache refreshed. Propagate a context change.\n                        propagateContextChange(workInProgress, CacheContext, renderLanes);\n                    }\n                }\n            }\n            var nextChildren = workInProgress.pendingProps.children;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        } // This should only be called if the name changes\n        function updateFragment(current, workInProgress, renderLanes) {\n            var nextChildren = workInProgress.pendingProps;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateMode(current, workInProgress, renderLanes) {\n            var nextChildren = workInProgress.pendingProps.children;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateProfiler(current, workInProgress, renderLanes) {\n            {\n                workInProgress.flags |= Update;\n                {\n                    // Reset effect durations for the next eventual effect phase.\n                    // These are reset during render to allow the DevTools commit hook a chance to read them,\n                    var stateNode = workInProgress.stateNode;\n                    stateNode.effectDuration = 0;\n                    stateNode.passiveEffectDuration = 0;\n                }\n            }\n            var nextProps = workInProgress.pendingProps;\n            var nextChildren = nextProps.children;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function markRef(current, workInProgress) {\n            // TODO: Check props.ref instead of fiber.ref when enableRefAsProp is on.\n            var ref = workInProgress.ref;\n            if (ref === null) {\n                if (current !== null && current.ref !== null) {\n                    // Schedule a Ref effect\n                    workInProgress.flags |= Ref | RefStatic;\n                }\n            } else {\n                if (typeof ref !== 'function' && typeof ref !== 'object') {\n                    throw new Error('Expected ref to be a function, an object returned by React.createRef(), or undefined/null.');\n                }\n                if (current === null || current.ref !== ref) {\n                    workInProgress.flags |= Ref | RefStatic;\n                }\n            }\n        }\n        function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n            {\n                if (Component.prototype && typeof Component.prototype.render === 'function') {\n                    var componentName = getComponentNameFromType(Component) || 'Unknown';\n                    if (!didWarnAboutBadClass[componentName]) {\n                        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n                        didWarnAboutBadClass[componentName] = true;\n                    }\n                }\n                if (workInProgress.mode & StrictLegacyMode) {\n                    ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n                }\n                if (current === null) {\n                    // Some validations were previously done in mountIndeterminateComponent however and are now run\n                    // in updateFuntionComponent but only on mount\n                    validateFunctionComponentInDev(workInProgress, workInProgress.type);\n                    if (Component.contextTypes) {\n                        error('%s uses the legacy contextTypes API which was removed in React 19. ' + 'Use React.createContext() with React.useContext() instead.', getComponentNameFromType(Component) || 'Unknown');\n                    }\n                }\n            }\n            var context;\n            var nextChildren;\n            var hasId;\n            prepareToReadContext(workInProgress, renderLanes);\n            {\n                markComponentRenderStarted(workInProgress);\n            }\n            {\n                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n                hasId = checkDidRenderIdHook();\n            }\n            {\n                markComponentRenderStopped();\n            }\n            if (current !== null && !didReceiveUpdate) {\n                bailoutHooks(current, workInProgress, renderLanes);\n                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n            if (getIsHydrating() && hasId) {\n                pushMaterializedTreeId(workInProgress);\n            } // React DevTools reads this flag.\n            workInProgress.flags |= PerformedWork;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function replayFunctionComponent(current, workInProgress, nextProps, Component, secondArg, renderLanes) {\n            // This function is used to replay a component that previously suspended,\n            // after its data resolves. It's a simplified version of\n            // updateFunctionComponent that reuses the hooks from the previous attempt.\n            prepareToReadContext(workInProgress, renderLanes);\n            {\n                markComponentRenderStarted(workInProgress);\n            }\n            var nextChildren = replaySuspendedComponentWithHooks(current, workInProgress, Component, nextProps, secondArg);\n            var hasId = checkDidRenderIdHook();\n            {\n                markComponentRenderStopped();\n            }\n            if (current !== null && !didReceiveUpdate) {\n                bailoutHooks(current, workInProgress, renderLanes);\n                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n            if (getIsHydrating() && hasId) {\n                pushMaterializedTreeId(workInProgress);\n            } // React DevTools reads this flag.\n            workInProgress.flags |= PerformedWork;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n            {\n                // This is used by DevTools to force a boundary to error.\n                switch(shouldError(workInProgress)){\n                    case false:\n                        {\n                            var _instance = workInProgress.stateNode;\n                            var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n                            // Is there a better way to do this?\n                            var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n                            var state = tempInstance.state;\n                            _instance.updater.enqueueSetState(_instance, state, null);\n                            break;\n                        }\n                    case true:\n                        {\n                            workInProgress.flags |= DidCapture;\n                            workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n                            var error$1 = new Error('Simulated error coming from DevTools');\n                            var lane = pickArbitraryLane(renderLanes);\n                            workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n                            var root = getWorkInProgressRoot();\n                            if (root === null) {\n                                throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n                            }\n                            var update = createClassErrorUpdate(lane);\n                            initializeClassErrorUpdate(update, root, workInProgress, createCapturedValueAtFiber(error$1, workInProgress));\n                            enqueueCapturedUpdate(workInProgress, update);\n                            break;\n                        }\n                }\n            }\n            // During mounting we don't know the child context yet as the instance doesn't exist.\n            // We will invalidate the child context in finishClassComponent() right after rendering.\n            var hasContext;\n            if (isContextProvider()) {\n                hasContext = true;\n            } else {\n                hasContext = false;\n            }\n            prepareToReadContext(workInProgress, renderLanes);\n            var instance = workInProgress.stateNode;\n            var shouldUpdate;\n            if (instance === null) {\n                constructClassInstance(workInProgress, Component, nextProps);\n                mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n                shouldUpdate = true;\n            } else if (current === null) {\n                // In a resume, we'll already have an instance we can reuse.\n                shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n            } else {\n                shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n            }\n            var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n            {\n                var inst = workInProgress.stateNode;\n                if (shouldUpdate && inst.props !== nextProps) {\n                    if (!didWarnAboutReassigningProps) {\n                        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n                    }\n                    didWarnAboutReassigningProps = true;\n                }\n            }\n            return nextUnitOfWork;\n        }\n        function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n            // Refs should update even if shouldComponentUpdate returns false\n            markRef(current, workInProgress);\n            var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags$1;\n            if (!shouldUpdate && !didCaptureError) {\n                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n            var instance = workInProgress.stateNode; // Rerender\n            {\n                setCurrentFiber(workInProgress);\n            }\n            var nextChildren;\n            if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n                // If we captured an error, but getDerivedStateFromError is not defined,\n                // unmount all the children. componentDidCatch will schedule an update to\n                // re-render a fallback. This is temporary until we migrate everyone to\n                // the new API.\n                // TODO: Warn in a future release.\n                nextChildren = null;\n                {\n                    stopProfilerTimerIfRunning();\n                }\n            } else {\n                {\n                    markComponentRenderStarted(workInProgress);\n                }\n                {\n                    nextChildren = callRenderInDEV(instance);\n                    if (workInProgress.mode & StrictLegacyMode) {\n                        setIsStrictModeForDevtools(true);\n                        try {\n                            callRenderInDEV(instance);\n                        } finally{\n                            setIsStrictModeForDevtools(false);\n                        }\n                    }\n                }\n                {\n                    markComponentRenderStopped();\n                }\n            } // React DevTools reads this flag.\n            workInProgress.flags |= PerformedWork;\n            if (current !== null && didCaptureError) {\n                // If we're recovering from an error, reconcile without reusing any of\n                // the existing children. Conceptually, the normal children and the children\n                // that are shown on error are two different sets, so we shouldn't reuse\n                // normal children even if their identities match.\n                forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n            } else {\n                reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            } // Memoize state using the values we just used to render.\n            // TODO: Restructure so we never read values from the instance.\n            workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n            return workInProgress.child;\n        }\n        function pushHostRootContext(workInProgress) {\n            var root = workInProgress.stateNode;\n            pushHostContainer(workInProgress, root.containerInfo);\n        }\n        function updateHostRoot(current, workInProgress, renderLanes) {\n            pushHostRootContext(workInProgress);\n            if (current === null) {\n                throw new Error('Should have a current fiber. This is a bug in React.');\n            }\n            var nextProps = workInProgress.pendingProps;\n            var prevState = workInProgress.memoizedState;\n            var prevChildren = prevState.element;\n            cloneUpdateQueue(current, workInProgress);\n            processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n            var nextState = workInProgress.memoizedState;\n            {\n                var nextCache = nextState.cache;\n                pushCacheProvider(workInProgress, nextCache);\n                if (nextCache !== prevState.cache) {\n                    // The root cache refreshed.\n                    propagateContextChange(workInProgress, CacheContext, renderLanes);\n                }\n            }\n            // it needs to happen after the `pushCacheProvider` call above to avoid a\n            // context stack mismatch. A bit unfortunate.\n            suspendIfUpdateReadFromEntangledAsyncAction(); // Caution: React DevTools currently depends on this property\n            // being called \"element\".\n            var nextChildren = nextState.element;\n            if (supportsHydration && prevState.isDehydrated) {\n                // This is a hydration root whose shell has not yet hydrated. We should\n                // attempt to hydrate.\n                // Flip isDehydrated to false to indicate that when this render\n                // finishes, the root will no longer be dehydrated.\n                var overrideState = {\n                    element: nextChildren,\n                    isDehydrated: false,\n                    cache: nextState.cache\n                };\n                var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n                // have reducer functions so it doesn't need rebasing.\n                updateQueue.baseState = overrideState;\n                workInProgress.memoizedState = overrideState;\n                if (workInProgress.flags & ForceClientRender) {\n                    // Something errored during a previous attempt to hydrate the shell, so we\n                    // forced a client render. We should have a recoverable error already scheduled.\n                    return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes);\n                } else if (nextChildren !== prevChildren) {\n                    var recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);\n                    queueHydrationError(recoverableError);\n                    return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes);\n                } else {\n                    // The outermost shell has not hydrated yet. Start hydrating.\n                    enterHydrationState(workInProgress);\n                    var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n                    workInProgress.child = child;\n                    var node = child;\n                    while(node){\n                        // Mark each child as hydrating. This is a fast path to know whether this\n                        // tree is part of a hydrating tree. This is used to determine if a child\n                        // node has fully mounted yet, and for scheduling event replaying.\n                        // Conceptually this is similar to Placement in that a new subtree is\n                        // inserted into the React tree here. It just happens to not need DOM\n                        // mutations because it already exists.\n                        node.flags = node.flags & ~Placement | Hydrating;\n                        node = node.sibling;\n                    }\n                }\n            } else {\n                // Root is not dehydrated. Either this is a client-only root, or it\n                // already hydrated.\n                resetHydrationState();\n                if (nextChildren === prevChildren) {\n                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                }\n                reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            }\n            return workInProgress.child;\n        }\n        function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes) {\n            // Revert to client rendering.\n            resetHydrationState();\n            workInProgress.flags |= ForceClientRender;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateHostComponent$1(current, workInProgress, renderLanes) {\n            if (current === null) {\n                tryToClaimNextHydratableInstance(workInProgress);\n            }\n            pushHostContext(workInProgress);\n            var type = workInProgress.type;\n            var nextProps = workInProgress.pendingProps;\n            var prevProps = current !== null ? current.memoizedProps : null;\n            var nextChildren = nextProps.children;\n            var isDirectTextChild = shouldSetTextContent(type, nextProps);\n            if (isDirectTextChild) {\n                // We special case a direct text child of a host node. This is a common\n                // case. We won't handle it as a reified child. We will instead handle\n                // this in the host environment that also has access to this prop. That\n                // avoids allocating another HostText fiber and traversing it.\n                nextChildren = null;\n            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n                // If we're switching from a direct text child to a normal child, or to\n                // empty, we need to schedule the text content to be reset.\n                workInProgress.flags |= ContentReset;\n            }\n            {\n                var memoizedState = workInProgress.memoizedState;\n                if (memoizedState !== null) {\n                    // This fiber has been upgraded to a stateful component. The only way\n                    // happens currently is for form actions. We use hooks to track the\n                    // pending and error state of the form.\n                    //\n                    // Once a fiber is upgraded to be stateful, it remains stateful for the\n                    // rest of its lifetime.\n                    var newState = renderTransitionAwareHostComponentWithHooks(current, workInProgress, renderLanes); // If the transition state changed, propagate the change to all the\n                    // descendents. We use Context as an implementation detail for this.\n                    //\n                    // This is intentionally set here instead of pushHostContext because\n                    // pushHostContext gets called before we process the state hook, to avoid\n                    // a state mismatch in the event that something suspends.\n                    //\n                    // NOTE: This assumes that there cannot be nested transition providers,\n                    // because the only renderer that implements this feature is React DOM,\n                    // and forms cannot be nested. If we did support nested providers, then\n                    // we would need to push a context value even for host fibers that\n                    // haven't been upgraded yet.\n                    if (isPrimaryRenderer) {\n                        HostTransitionContext._currentValue = newState;\n                    } else {\n                        HostTransitionContext._currentValue2 = newState;\n                    }\n                    {\n                        if (didReceiveUpdate) {\n                            if (current !== null) {\n                                var oldStateHook = current.memoizedState;\n                                var oldState = oldStateHook.memoizedState; // This uses regular equality instead of Object.is because we assume\n                                // that host transition state doesn't include NaN as a valid type.\n                                if (oldState !== newState) {\n                                    propagateContextChange(workInProgress, HostTransitionContext, renderLanes);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            markRef(current, workInProgress);\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateHostHoistable(current, workInProgress, renderLanes) {\n            markRef(current, workInProgress);\n            if (current === null) {\n                var resource = getResource(workInProgress.type, null, workInProgress.pendingProps, null);\n                if (resource) {\n                    workInProgress.memoizedState = resource;\n                } else {\n                    if (!getIsHydrating()) {\n                        // This is not a Resource Hoistable and we aren't hydrating so we construct the instance.\n                        workInProgress.stateNode = createHoistableInstance(workInProgress.type, workInProgress.pendingProps, getRootHostContainer(), workInProgress);\n                    }\n                }\n            } else {\n                // Get Resource may or may not return a resource. either way we stash the result\n                // on memoized state.\n                workInProgress.memoizedState = getResource(workInProgress.type, current.memoizedProps, workInProgress.pendingProps, current.memoizedState);\n            } // Resources never have reconciler managed children. It is possible for\n            // the host implementation of getResource to consider children in the\n            // resource construction but they will otherwise be discarded. In practice\n            // this precludes all but the simplest children and Host specific warnings\n            // should be implemented to warn when children are passsed when otherwise not\n            // expected\n            return null;\n        }\n        function updateHostSingleton(current, workInProgress, renderLanes) {\n            pushHostContext(workInProgress);\n            if (current === null) {\n                claimHydratableSingleton(workInProgress);\n            }\n            var nextChildren = workInProgress.pendingProps.children;\n            if (current === null && !getIsHydrating()) {\n                // Similar to Portals we append Singleton children in the commit phase. So we\n                // Track insertions even on mount.\n                // TODO: Consider unifying this with how the root works.\n                workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n            } else {\n                reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            }\n            markRef(current, workInProgress);\n            return workInProgress.child;\n        }\n        function updateHostText$1(current, workInProgress) {\n            if (current === null) {\n                tryToClaimNextHydratableTextInstance(workInProgress);\n            } // Nothing to do here. This is terminal. We'll do the completion step\n            // immediately after.\n            return null;\n        }\n        function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n            var props = workInProgress.pendingProps;\n            var lazyComponent = elementType;\n            var Component;\n            {\n                Component = callLazyInitInDEV(lazyComponent);\n            }\n            workInProgress.type = Component;\n            if (typeof Component === 'function') {\n                if (isFunctionClassComponent(Component)) {\n                    var resolvedProps = resolveClassComponentProps(Component, props);\n                    workInProgress.tag = ClassComponent;\n                    {\n                        workInProgress.type = Component = resolveClassForHotReloading(Component);\n                    }\n                    return updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n                } else {\n                    var _resolvedProps = props;\n                    workInProgress.tag = FunctionComponent;\n                    {\n                        validateFunctionComponentInDev(workInProgress, Component);\n                        workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n                    }\n                    return updateFunctionComponent(null, workInProgress, Component, _resolvedProps, renderLanes);\n                }\n            } else if (Component !== undefined && Component !== null) {\n                var $$typeof = Component.$$typeof;\n                if ($$typeof === REACT_FORWARD_REF_TYPE) {\n                    var _resolvedProps2 = props;\n                    workInProgress.tag = ForwardRef;\n                    {\n                        workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n                    }\n                    return updateForwardRef(null, workInProgress, Component, _resolvedProps2, renderLanes);\n                } else if ($$typeof === REACT_MEMO_TYPE) {\n                    var _resolvedProps3 = props;\n                    workInProgress.tag = MemoComponent;\n                    return updateMemoComponent(null, workInProgress, Component, _resolvedProps3, renderLanes);\n                }\n            }\n            var hint = '';\n            {\n                if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n                    hint = ' Did you wrap a component in React.lazy() more than once?';\n                }\n            }\n            // because the fact that it's a separate type of work is an\n            // implementation detail.\n            throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n        }\n        function validateFunctionComponentInDev(workInProgress, Component) {\n            {\n                if (Component) {\n                    if (Component.childContextTypes) {\n                        error('childContextTypes cannot be defined on a function component.\\n' + '  %s.childContextTypes = ...', Component.displayName || Component.name || 'Component');\n                    }\n                }\n                if (typeof Component.getDerivedStateFromProps === 'function') {\n                    var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n                    if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {\n                        error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);\n                        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;\n                    }\n                }\n                if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n                    var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n                    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {\n                        error('%s: Function components do not support contextType.', _componentName3);\n                        didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;\n                    }\n                }\n            }\n        }\n        var SUSPENDED_MARKER = {\n            dehydrated: null,\n            treeContext: null,\n            retryLane: NoLane\n        };\n        function mountSuspenseOffscreenState(renderLanes) {\n            return {\n                baseLanes: renderLanes,\n                cachePool: getSuspendedCache()\n            };\n        }\n        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n            var cachePool = null;\n            {\n                var prevCachePool = prevOffscreenState.cachePool;\n                if (prevCachePool !== null) {\n                    var parentCache = isPrimaryRenderer ? CacheContext._currentValue : CacheContext._currentValue2;\n                    if (prevCachePool.parent !== parentCache) {\n                        // Detected a refresh in the parent. This overrides any previously\n                        // suspended cache.\n                        cachePool = {\n                            parent: parentCache,\n                            pool: parentCache\n                        };\n                    } else {\n                        // We can reuse the cache from last time. The only thing that would have\n                        // overridden it is a parent refresh, which we checked for above.\n                        cachePool = prevCachePool;\n                    }\n                } else {\n                    // If there's no previous cache pool, grab the current one.\n                    cachePool = getSuspendedCache();\n                }\n            }\n            return {\n                baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n                cachePool: cachePool\n            };\n        } // TODO: Probably should inline this back\n        function shouldRemainOnFallback(current, workInProgress, renderLanes) {\n            // If we're already showing a fallback, there are cases where we need to\n            // remain on that fallback regardless of whether the content has resolved.\n            // For example, SuspenseList coordinates when nested content appears.\n            // TODO: For compatibility with offscreen prerendering, this should also check\n            // whether the current fiber (if it exists) was visible in the previous tree.\n            if (current !== null) {\n                var suspenseState = current.memoizedState;\n                if (suspenseState === null) {\n                    // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n                    // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n                    // Note: This is a factoring smell. Can't remain on a fallback if there's\n                    // no fallback to remain on.\n                    return false;\n                }\n            } // Not currently showing content. Consult the Suspense context.\n            var suspenseContext = suspenseStackCursor.current;\n            return hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n        }\n        function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes) {\n            var remainingLanes = current !== null ? removeLanes(current.childLanes, renderLanes) : NoLanes;\n            if (primaryTreeDidDefer) {\n                // A useDeferredValue hook spawned a deferred task inside the primary tree.\n                // Ensure that we retry this component at the deferred priority.\n                // TODO: We could make this a per-subtree value instead of a global one.\n                // Would need to track it on the context stack somehow, similar to what\n                // we'd have to do for resumable contexts.\n                remainingLanes = mergeLanes(remainingLanes, peekDeferredLane());\n            }\n            return remainingLanes;\n        }\n        function updateSuspenseComponent(current, workInProgress, renderLanes) {\n            var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n            {\n                if (shouldSuspend(workInProgress)) {\n                    workInProgress.flags |= DidCapture;\n                }\n            }\n            var showFallback = false;\n            var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n            if (didSuspend || shouldRemainOnFallback(current)) {\n                // Something in this boundary's subtree already suspended. Switch to\n                // rendering the fallback children.\n                showFallback = true;\n                workInProgress.flags &= ~DidCapture;\n            } // Check if the primary children spawned a deferred task (useDeferredValue)\n            // during the first pass.\n            var didPrimaryChildrenDefer = (workInProgress.flags & DidDefer) !== NoFlags$1;\n            workInProgress.flags &= ~DidDefer; // OK, the next part is confusing. We're about to reconcile the Suspense\n            // boundary's children. This involves some custom reconciliation logic. Two\n            // main reasons this is so complicated.\n            //\n            // First, Legacy Mode has different semantics for backwards compatibility. The\n            // primary tree will commit in an inconsistent state, so when we do the\n            // second pass to render the fallback, we do some exceedingly, uh, clever\n            // hacks to make that not totally break. Like transferring effects and\n            // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n            // because we bailout on the primary tree completely and leave it in its old\n            // state, no effects. Same as what we do for Offscreen (except that\n            // Offscreen doesn't have the first render pass).\n            //\n            // Second is hydration. During hydration, the Suspense fiber has a slightly\n            // different layout, where the child points to a dehydrated fragment, which\n            // contains the DOM rendered by the server.\n            //\n            // Third, even if you set all that aside, Suspense is like error boundaries in\n            // that we first we try to render one tree, and if that fails, we render again\n            // and switch to a different tree. Like a try/catch block. So we have to track\n            // which branch we're currently rendering. Ideally we would model this using\n            // a stack.\n            if (current === null) {\n                // Initial mount\n                // Special path for hydration\n                // If we're currently hydrating, try to hydrate this boundary.\n                if (getIsHydrating()) {\n                    // We must push the suspense handler context *before* attempting to\n                    // hydrate, to avoid a mismatch in case it errors.\n                    if (showFallback) {\n                        pushPrimaryTreeSuspenseHandler(workInProgress);\n                    } else {\n                        pushFallbackTreeSuspenseHandler(workInProgress);\n                    }\n                    tryToClaimNextHydratableSuspenseInstance(workInProgress); // This could've been a dehydrated suspense component.\n                    var suspenseState = workInProgress.memoizedState;\n                    if (suspenseState !== null) {\n                        var dehydrated = suspenseState.dehydrated;\n                        if (dehydrated !== null) {\n                            return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n                        }\n                    } // If hydration didn't succeed, fall through to the normal Suspense path.\n                    // To avoid a stack mismatch we need to pop the Suspense handler that we\n                    // pushed above. This will become less awkward when move the hydration\n                    // logic to its own fiber.\n                    popSuspenseHandler(workInProgress);\n                }\n                var nextPrimaryChildren = nextProps.children;\n                var nextFallbackChildren = nextProps.fallback;\n                if (showFallback) {\n                    pushFallbackTreeSuspenseHandler(workInProgress);\n                    var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n                    var primaryChildFragment = workInProgress.child;\n                    primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n                    primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n                    workInProgress.memoizedState = SUSPENDED_MARKER;\n                    return fallbackFragment;\n                } else {\n                    pushPrimaryTreeSuspenseHandler(workInProgress);\n                    return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n                }\n            } else {\n                // This is an update.\n                // Special path for hydration\n                var prevState = current.memoizedState;\n                if (prevState !== null) {\n                    var _dehydrated = prevState.dehydrated;\n                    if (_dehydrated !== null) {\n                        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, didPrimaryChildrenDefer, nextProps, _dehydrated, prevState, renderLanes);\n                    }\n                }\n                if (showFallback) {\n                    pushFallbackTreeSuspenseHandler(workInProgress);\n                    var _nextFallbackChildren = nextProps.fallback;\n                    var _nextPrimaryChildren = nextProps.children;\n                    var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n                    var _primaryChildFragment2 = workInProgress.child;\n                    var prevOffscreenState = current.child.memoizedState;\n                    _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n                    _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n                    workInProgress.memoizedState = SUSPENDED_MARKER;\n                    return fallbackChildFragment;\n                } else {\n                    pushPrimaryTreeSuspenseHandler(workInProgress);\n                    var _nextPrimaryChildren2 = nextProps.children;\n                    var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2);\n                    workInProgress.memoizedState = null;\n                    return _primaryChildFragment3;\n                }\n            }\n        }\n        function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n            var mode = workInProgress.mode;\n            var primaryChildProps = {\n                mode: 'visible',\n                children: primaryChildren\n            };\n            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n            primaryChildFragment.return = workInProgress;\n            workInProgress.child = primaryChildFragment;\n            return primaryChildFragment;\n        }\n        function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n            var mode = workInProgress.mode;\n            var primaryChildProps = {\n                mode: 'hidden',\n                children: primaryChildren\n            };\n            var primaryChildFragment;\n            var fallbackChildFragment;\n            {\n                primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n                fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n            }\n            primaryChildFragment.return = workInProgress;\n            fallbackChildFragment.return = workInProgress;\n            primaryChildFragment.sibling = fallbackChildFragment;\n            workInProgress.child = primaryChildFragment;\n            return fallbackChildFragment;\n        }\n        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n            // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n            // this wrapper function to constrain it.\n            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n        }\n        function updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n            // The props argument to `createWorkInProgress` is `any` typed, so we use this\n            // wrapper function to constrain it.\n            return createWorkInProgress(current, offscreenProps);\n        }\n        function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n            var currentPrimaryChildFragment = current.child;\n            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n                mode: 'visible',\n                children: primaryChildren\n            });\n            primaryChildFragment.return = workInProgress;\n            primaryChildFragment.sibling = null;\n            if (currentFallbackChildFragment !== null) {\n                // Delete the fallback child fragment\n                var deletions = workInProgress.deletions;\n                if (deletions === null) {\n                    workInProgress.deletions = [\n                        currentFallbackChildFragment\n                    ];\n                    workInProgress.flags |= ChildDeletion;\n                } else {\n                    deletions.push(currentFallbackChildFragment);\n                }\n            }\n            workInProgress.child = primaryChildFragment;\n            return primaryChildFragment;\n        }\n        function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n            var mode = workInProgress.mode;\n            var currentPrimaryChildFragment = current.child;\n            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n            var primaryChildProps = {\n                mode: 'hidden',\n                children: primaryChildren\n            };\n            var primaryChildFragment;\n            {\n                primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.\n                // (We don't do this in legacy mode, because in legacy mode we don't re-use\n                // the current tree; see previous branch.)\n                primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n            }\n            var fallbackChildFragment;\n            if (currentFallbackChildFragment !== null) {\n                fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n            } else {\n                fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n                // mounted but this is a new fiber.\n                fallbackChildFragment.flags |= Placement;\n            }\n            fallbackChildFragment.return = workInProgress;\n            primaryChildFragment.return = workInProgress;\n            primaryChildFragment.sibling = fallbackChildFragment;\n            workInProgress.child = primaryChildFragment;\n            return fallbackChildFragment;\n        }\n        function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes) {\n            // Falling back to client rendering. Because this has performance\n            // implications, it's considered a recoverable error, even though the user\n            // likely won't observe anything wrong with the UI.\n            // This will add the old fiber to the deletion list\n            reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n            var nextProps = workInProgress.pendingProps;\n            var primaryChildren = nextProps.children;\n            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n            // mounted but this is a new fiber.\n            primaryChildFragment.flags |= Placement;\n            workInProgress.memoizedState = null;\n            return primaryChildFragment;\n        }\n        function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n            var fiberMode = workInProgress.mode;\n            var primaryChildProps = {\n                mode: 'visible',\n                children: primaryChildren\n            };\n            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n            // boundary) already mounted but this is a new fiber.\n            fallbackChildFragment.flags |= Placement;\n            primaryChildFragment.return = workInProgress;\n            fallbackChildFragment.return = workInProgress;\n            primaryChildFragment.sibling = fallbackChildFragment;\n            workInProgress.child = primaryChildFragment;\n            {\n                // We will have dropped the effect list which contains the\n                // deletion. We need to reconcile to delete the current child.\n                reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n            }\n            return fallbackChildFragment;\n        }\n        function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n            // During the first pass, we'll bail out and not drill into the children.\n            // Instead, we'll leave the content in place and try to hydrate it later.\n            if (isSuspenseInstanceFallback(suspenseInstance)) {\n                // This is a client-only boundary. Since we won't get any content from the server\n                // for this, we need to schedule that at a higher priority based on when it would\n                // have timed out. In theory we could render it in this pass but it would have the\n                // wrong priority associated with it and will prevent hydration of parent path.\n                // Instead, we'll leave work left on it to render it in a separate commit.\n                // TODO This time should be the time at which the server rendered response that is\n                // a parent to this boundary was displayed. However, since we currently don't have\n                // a protocol to transfer that time, we'll just estimate it by using the current\n                // time. This will mean that Suspense timeouts are slightly shifted to later than\n                // they should be.\n                // Schedule a normal pri update to render this content.\n                workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n            } else {\n                // We'll continue hydrating the rest at offscreen priority since we'll already\n                // be showing the right content coming from the server, it is no rush.\n                workInProgress.lanes = laneToLanes(OffscreenLane);\n            }\n            return null;\n        }\n        function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, didPrimaryChildrenDefer, nextProps, suspenseInstance, suspenseState, renderLanes) {\n            if (!didSuspend) {\n                // This is the first render pass. Attempt to hydrate.\n                pushPrimaryTreeSuspenseHandler(workInProgress); // We should never be hydrating at this point because it is the first pass,\n                // but after we've already committed once.\n                warnIfHydrating();\n                if (isSuspenseInstanceFallback(suspenseInstance)) {\n                    // This boundary is in a permanent fallback state. In this case, we'll never\n                    // get an update and we'll never be able to hydrate the final content. Let's just try the\n                    // client side render instead.\n                    var digest;\n                    var message;\n                    var stack = null;\n                    var componentStack = null;\n                    {\n                        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);\n                        digest = _getSuspenseInstanceF.digest;\n                        message = _getSuspenseInstanceF.message;\n                        stack = _getSuspenseInstanceF.stack;\n                        componentStack = _getSuspenseInstanceF.componentStack;\n                    }\n                    {\n                        var error;\n                        if (message) {\n                            // eslint-disable-next-line react-internal/prod-error-codes\n                            error = new Error(message);\n                        } else {\n                            error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. ' + 'Switched to client rendering.');\n                        } // Replace the stack with the server stack\n                        error.stack = stack || '';\n                        error.digest = digest;\n                        var capturedValue = createCapturedValueFromError(error, componentStack === undefined ? null : componentStack);\n                        queueHydrationError(capturedValue);\n                    }\n                    return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);\n                }\n                // any context has changed, we need to treat is as if the input might have changed.\n                var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n                if (didReceiveUpdate || hasContextChanged) {\n                    // This boundary has changed since the first render. This means that we are now unable to\n                    // hydrate it. We might still be able to hydrate it using a higher priority lane.\n                    var root = getWorkInProgressRoot();\n                    if (root !== null) {\n                        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n                        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n                            // Intentionally mutating since this render will get interrupted. This\n                            // is one of the very rare times where we mutate the current tree\n                            // during the render phase.\n                            suspenseState.retryLane = attemptHydrationAtLane;\n                            enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n                            scheduleUpdateOnFiber(root, current, attemptHydrationAtLane); // Throw a special object that signals to the work loop that it should\n                            // interrupt the current render.\n                            //\n                            // Because we're inside a React-only execution stack, we don't\n                            // strictly need to throw here — we could instead modify some internal\n                            // work loop state. But using an exception means we don't need to\n                            // check for this case on every iteration of the work loop. So doing\n                            // it this way moves the check out of the fast path.\n                            throw SelectiveHydrationException;\n                        }\n                    } // If we did not selectively hydrate, we'll continue rendering without\n                    // hydrating. Mark this tree as suspended to prevent it from committing\n                    // outside a transition.\n                    //\n                    // This path should only happen if the hydration lane already suspended.\n                    // Currently, it also happens during sync updates because there is no\n                    // hydration lane for sync updates.\n                    // TODO: We should ideally have a sync hydration lane that we can apply to do\n                    // a pass where we hydrate this subtree in place using the previous Context and then\n                    // reapply the update afterwards.\n                    if (isSuspenseInstancePending(suspenseInstance)) ;\n                    else {\n                        renderDidSuspendDelayIfPossible();\n                    }\n                    return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);\n                } else if (isSuspenseInstancePending(suspenseInstance)) {\n                    // This component is still pending more data from the server, so we can't hydrate its\n                    // content. We treat it as if this component suspended itself. It might seem as if\n                    // we could just try to render it client-side instead. However, this will perform a\n                    // lot of unnecessary work and is unlikely to complete since it often will suspend\n                    // on missing data anyway. Additionally, the server might be able to render more\n                    // than we can on the client yet. In that case we'd end up with more fallback states\n                    // on the client than if we just leave it alone. If the server times out or errors\n                    // these should update this boundary to the permanent Fallback state instead.\n                    // Mark it as having captured (i.e. suspended).\n                    workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n                    workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n                    var retry = retryDehydratedSuspenseBoundary.bind(null, current);\n                    registerSuspenseInstanceRetry(suspenseInstance, retry);\n                    return null;\n                } else {\n                    // This is the first attempt.\n                    reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n                    var primaryChildren = nextProps.children;\n                    var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n                    // tree is part of a hydrating tree. This is used to determine if a child\n                    // node has fully mounted yet, and for scheduling event replaying.\n                    // Conceptually this is similar to Placement in that a new subtree is\n                    // inserted into the React tree here. It just happens to not need DOM\n                    // mutations because it already exists.\n                    primaryChildFragment.flags |= Hydrating;\n                    return primaryChildFragment;\n                }\n            } else {\n                // This is the second render pass. We already attempted to hydrated, but\n                // something either suspended or errored.\n                if (workInProgress.flags & ForceClientRender) {\n                    // Something errored during hydration. Try again without hydrating.\n                    // The error should've already been logged in throwException.\n                    pushPrimaryTreeSuspenseHandler(workInProgress);\n                    workInProgress.flags &= ~ForceClientRender;\n                    return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);\n                } else if (workInProgress.memoizedState !== null) {\n                    // Something suspended and we should still be in dehydrated mode.\n                    // Leave the existing child in place.\n                    // Push to avoid a mismatch\n                    pushFallbackTreeSuspenseHandler(workInProgress);\n                    workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n                    // but the normal suspense pass doesn't.\n                    workInProgress.flags |= DidCapture;\n                    return null;\n                } else {\n                    // Suspended but we should no longer be in dehydrated mode.\n                    // Therefore we now have to render the fallback.\n                    pushFallbackTreeSuspenseHandler(workInProgress);\n                    var nextPrimaryChildren = nextProps.children;\n                    var nextFallbackChildren = nextProps.fallback;\n                    var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n                    var _primaryChildFragment4 = workInProgress.child;\n                    _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);\n                    _primaryChildFragment4.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n                    workInProgress.memoizedState = SUSPENDED_MARKER;\n                    return fallbackChildFragment;\n                }\n            }\n        }\n        function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n            var alternate = fiber.alternate;\n            if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n        }\n        function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n            // Mark any Suspense boundaries with fallbacks as having work to do.\n            // If they were previously forced into fallbacks, they may now be able\n            // to unblock.\n            var node = firstChild;\n            while(node !== null){\n                if (node.tag === SuspenseComponent) {\n                    var state = node.memoizedState;\n                    if (state !== null) {\n                        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n                    }\n                } else if (node.tag === SuspenseListComponent) {\n                    // If the tail is hidden there might not be an Suspense boundaries\n                    // to schedule work on. In this case we have to schedule it on the\n                    // list itself.\n                    // We don't have to traverse to the children of the list since\n                    // the list will propagate the change when it rerenders.\n                    scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n                } else if (node.child !== null) {\n                    node.child.return = node;\n                    node = node.child;\n                    continue;\n                }\n                if (node === workInProgress) {\n                    return;\n                } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                while(node.sibling === null){\n                    // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    if (node.return === null || node.return === workInProgress) {\n                        return;\n                    }\n                    node = node.return;\n                } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                node.sibling.return = node.return;\n                node = node.sibling;\n            }\n        }\n        function findLastContentRow(firstChild) {\n            // This is going to find the last row among these children that is already\n            // showing content on the screen, as opposed to being in fallback state or\n            // new. If a row has multiple Suspense boundaries, any of them being in the\n            // fallback state, counts as the whole row being in a fallback state.\n            // Note that the \"rows\" will be workInProgress, but any nested children\n            // will still be current since we haven't rendered them yet. The mounted\n            // order may not be the same as the new order. We use the new order.\n            var row = firstChild;\n            var lastContentRow = null;\n            while(row !== null){\n                var currentRow = row.alternate; // New rows can't be content rows.\n                if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n                    lastContentRow = row;\n                }\n                row = row.sibling;\n            }\n            return lastContentRow;\n        }\n        function validateRevealOrder(revealOrder) {\n            {\n                if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n                    didWarnAboutRevealOrder[revealOrder] = true;\n                    if (typeof revealOrder === 'string') {\n                        switch(revealOrder.toLowerCase()){\n                            case 'together':\n                            case 'forwards':\n                            case 'backwards':\n                                {\n                                    error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n                                    break;\n                                }\n                            case 'forward':\n                            case 'backward':\n                                {\n                                    error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n                                    break;\n                                }\n                            default:\n                                error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n                                break;\n                        }\n                    } else {\n                        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n                    }\n                }\n            }\n        }\n        function validateTailOptions(tailMode, revealOrder) {\n            {\n                if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n                    if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n                        didWarnAboutTailOptions[tailMode] = true;\n                        error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n                    } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n                        didWarnAboutTailOptions[tailMode] = true;\n                        error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n                    }\n                }\n            }\n        }\n        function validateSuspenseListNestedChild(childSlot, index) {\n            {\n                var isAnArray = isArray(childSlot);\n                var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n                if (isAnArray || isIterable) {\n                    var type = isAnArray ? 'array' : 'iterable';\n                    error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n                    return false;\n                }\n            }\n            return true;\n        }\n        function validateSuspenseListChildren(children, revealOrder) {\n            {\n                if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n                    if (isArray(children)) {\n                        for(var i = 0; i < children.length; i++){\n                            if (!validateSuspenseListNestedChild(children[i], i)) {\n                                return;\n                            }\n                        }\n                    } else {\n                        var iteratorFn = getIteratorFn(children);\n                        if (typeof iteratorFn === 'function') {\n                            var childrenIterator = iteratorFn.call(children);\n                            if (childrenIterator) {\n                                var step = childrenIterator.next();\n                                var _i = 0;\n                                for(; !step.done; step = childrenIterator.next()){\n                                    if (!validateSuspenseListNestedChild(step.value, _i)) {\n                                        return;\n                                    }\n                                    _i++;\n                                }\n                            }\n                        } else {\n                            error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n                        }\n                    }\n                }\n            }\n        }\n        function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n            var renderState = workInProgress.memoizedState;\n            if (renderState === null) {\n                workInProgress.memoizedState = {\n                    isBackwards: isBackwards,\n                    rendering: null,\n                    renderingStartTime: 0,\n                    last: lastContentRow,\n                    tail: tail,\n                    tailMode: tailMode\n                };\n            } else {\n                // We can reuse the existing object from previous renders.\n                renderState.isBackwards = isBackwards;\n                renderState.rendering = null;\n                renderState.renderingStartTime = 0;\n                renderState.last = lastContentRow;\n                renderState.tail = tail;\n                renderState.tailMode = tailMode;\n            }\n        } // This can end up rendering this component multiple passes.\n        // The first pass splits the children fibers into two sets. A head and tail.\n        // We first render the head. If anything is in fallback state, we do another\n        // pass through beginWork to rerender all children (including the tail) with\n        // the force suspend context. If the first render didn't have anything in\n        // in fallback state. Then we render each row in the tail one-by-one.\n        // That happens in the completeWork phase without going back to beginWork.\n        function updateSuspenseListComponent(current, workInProgress, renderLanes) {\n            var nextProps = workInProgress.pendingProps;\n            var revealOrder = nextProps.revealOrder;\n            var tailMode = nextProps.tail;\n            var newChildren = nextProps.children;\n            validateRevealOrder(revealOrder);\n            validateTailOptions(tailMode, revealOrder);\n            validateSuspenseListChildren(newChildren, revealOrder);\n            reconcileChildren(current, workInProgress, newChildren, renderLanes);\n            var suspenseContext = suspenseStackCursor.current;\n            var shouldForceFallback = hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n            if (shouldForceFallback) {\n                suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n                workInProgress.flags |= DidCapture;\n            } else {\n                var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags$1;\n                if (didSuspendBefore) {\n                    // If we previously forced a fallback, we need to schedule work\n                    // on any nested boundaries to let them know to try to render\n                    // again. This is the same as context updating.\n                    propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n                }\n                suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n            }\n            pushSuspenseListContext(workInProgress, suspenseContext);\n            {\n                switch(revealOrder){\n                    case 'forwards':\n                        {\n                            var lastContentRow = findLastContentRow(workInProgress.child);\n                            var tail;\n                            if (lastContentRow === null) {\n                                // The whole list is part of the tail.\n                                // TODO: We could fast path by just rendering the tail now.\n                                tail = workInProgress.child;\n                                workInProgress.child = null;\n                            } else {\n                                // Disconnect the tail rows after the content row.\n                                // We're going to render them separately later.\n                                tail = lastContentRow.sibling;\n                                lastContentRow.sibling = null;\n                            }\n                            initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);\n                            break;\n                        }\n                    case 'backwards':\n                        {\n                            // We're going to find the first row that has existing content.\n                            // At the same time we're going to reverse the list of everything\n                            // we pass in the meantime. That's going to be our tail in reverse\n                            // order.\n                            var _tail = null;\n                            var row = workInProgress.child;\n                            workInProgress.child = null;\n                            while(row !== null){\n                                var currentRow = row.alternate; // New rows can't be content rows.\n                                if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n                                    // This is the beginning of the main content.\n                                    workInProgress.child = row;\n                                    break;\n                                }\n                                var nextRow = row.sibling;\n                                row.sibling = _tail;\n                                _tail = row;\n                                row = nextRow;\n                            } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n                            initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);\n                            break;\n                        }\n                    case 'together':\n                        {\n                            initSuspenseListRenderState(workInProgress, false, null, null, undefined);\n                            break;\n                        }\n                    default:\n                        {\n                            // The default reveal order is the same as not having\n                            // a boundary.\n                            workInProgress.memoizedState = null;\n                        }\n                }\n            }\n            return workInProgress.child;\n        }\n        function updatePortalComponent(current, workInProgress, renderLanes) {\n            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n            var nextChildren = workInProgress.pendingProps;\n            if (current === null) {\n                // Portals are special because we don't append the children during mount\n                // but at commit. Therefore we need to track insertions which the normal\n                // flow doesn't do during mount. This doesn't happen at the root because\n                // the root always starts with a \"current\" with a null child.\n                // TODO: Consider unifying this with how the root works.\n                workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n            } else {\n                reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            }\n            return workInProgress.child;\n        }\n        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n        function updateContextProvider(current, workInProgress, renderLanes) {\n            var context;\n            {\n                context = workInProgress.type;\n            }\n            var newProps = workInProgress.pendingProps;\n            var oldProps = workInProgress.memoizedProps;\n            var newValue = newProps.value;\n            {\n                if (!('value' in newProps)) {\n                    if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n                        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n                        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n                    }\n                }\n            }\n            pushProvider(workInProgress, context, newValue);\n            {\n                if (oldProps !== null) {\n                    var oldValue = oldProps.value;\n                    if (objectIs(oldValue, newValue)) {\n                        // No change. Bailout early if children are the same.\n                        if (oldProps.children === newProps.children && !hasContextChanged()) {\n                            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                        }\n                    } else {\n                        // The context value changed. Search for matching consumers and schedule\n                        // them to update.\n                        propagateContextChange(workInProgress, context, renderLanes);\n                    }\n                }\n            }\n            var newChildren = newProps.children;\n            reconcileChildren(current, workInProgress, newChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateContextConsumer(current, workInProgress, renderLanes) {\n            var context;\n            {\n                var consumerType = workInProgress.type;\n                context = consumerType._context;\n            }\n            var newProps = workInProgress.pendingProps;\n            var render = newProps.children;\n            {\n                if (typeof render !== 'function') {\n                    error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n                }\n            }\n            prepareToReadContext(workInProgress, renderLanes);\n            var newValue = readContext(context);\n            {\n                markComponentRenderStarted(workInProgress);\n            }\n            var newChildren;\n            {\n                newChildren = callComponentInDEV(render, newValue, undefined);\n            }\n            {\n                markComponentRenderStopped();\n            }\n            workInProgress.flags |= PerformedWork;\n            reconcileChildren(current, workInProgress, newChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function markWorkInProgressReceivedUpdate() {\n            didReceiveUpdate = true;\n        }\n        function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n            if (current !== null) {\n                // Reuse previous dependencies\n                workInProgress.dependencies = current.dependencies;\n            }\n            {\n                // Don't update \"base\" render times for bailouts.\n                stopProfilerTimerIfRunning();\n            }\n            markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n            if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n                // The children don't have any work either. We can skip them.\n                // TODO: Once we add back resuming, we should check if the children are\n                // a work-in-progress set. If so, we need to transfer their effects.\n                {\n                    return null;\n                }\n            } // This fiber doesn't have work, but its subtree does. Clone the child\n            // fibers and continue.\n            cloneChildFibers(current, workInProgress);\n            return workInProgress.child;\n        }\n        function remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n            {\n                var returnFiber = oldWorkInProgress.return;\n                if (returnFiber === null) {\n                    // eslint-disable-next-line react-internal/prod-error-codes\n                    throw new Error('Cannot swap the root fiber.');\n                } // Disconnect from the old current.\n                // It will get deleted.\n                current.alternate = null;\n                oldWorkInProgress.alternate = null; // Connect to the new tree.\n                newWorkInProgress.index = oldWorkInProgress.index;\n                newWorkInProgress.sibling = oldWorkInProgress.sibling;\n                newWorkInProgress.return = oldWorkInProgress.return;\n                newWorkInProgress.ref = oldWorkInProgress.ref;\n                {\n                    newWorkInProgress._debugInfo = oldWorkInProgress._debugInfo;\n                }\n                if (oldWorkInProgress === returnFiber.child) {\n                    returnFiber.child = newWorkInProgress;\n                } else {\n                    var prevSibling = returnFiber.child;\n                    if (prevSibling === null) {\n                        // eslint-disable-next-line react-internal/prod-error-codes\n                        throw new Error('Expected parent to have a child.');\n                    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    while(prevSibling.sibling !== oldWorkInProgress){\n                        // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        prevSibling = prevSibling.sibling;\n                        if (prevSibling === null) {\n                            // eslint-disable-next-line react-internal/prod-error-codes\n                            throw new Error('Expected to find the previous sibling.');\n                        }\n                    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    prevSibling.sibling = newWorkInProgress;\n                } // Delete the old fiber and place the new one.\n                // Since the old fiber is disconnected, we have to schedule it manually.\n                var deletions = returnFiber.deletions;\n                if (deletions === null) {\n                    returnFiber.deletions = [\n                        current\n                    ];\n                    returnFiber.flags |= ChildDeletion;\n                } else {\n                    deletions.push(current);\n                }\n                newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n                return newWorkInProgress;\n            }\n        }\n        function checkScheduledUpdateOrContext(current, renderLanes) {\n            // Before performing an early bailout, we must check if there are pending\n            // updates or context.\n            var updateLanes = current.lanes;\n            if (includesSomeLane(updateLanes, renderLanes)) {\n                return true;\n            } // No pending update, but because context is propagated lazily, we need\n            return false;\n        }\n        function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n            // This fiber does not have any pending work. Bailout without entering\n            // the begin phase. There's still some bookkeeping we that needs to be done\n            // in this optimized path, mostly pushing stuff onto the stack.\n            switch(workInProgress.tag){\n                case HostRoot:\n                    pushHostRootContext(workInProgress);\n                    {\n                        var cache = current.memoizedState.cache;\n                        pushCacheProvider(workInProgress, cache);\n                    }\n                    resetHydrationState();\n                    break;\n                case HostSingleton:\n                case HostComponent:\n                    pushHostContext(workInProgress);\n                    break;\n                case ClassComponent:\n                    {\n                        break;\n                    }\n                case HostPortal:\n                    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n                    break;\n                case ContextProvider:\n                    {\n                        var newValue = workInProgress.memoizedProps.value;\n                        var context;\n                        {\n                            context = workInProgress.type;\n                        }\n                        pushProvider(workInProgress, context, newValue);\n                        break;\n                    }\n                case Profiler:\n                    {\n                        // Profiler should only call onRender when one of its descendants actually rendered.\n                        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n                        if (hasChildWork) {\n                            workInProgress.flags |= Update;\n                        }\n                        {\n                            // Reset effect durations for the next eventual effect phase.\n                            // These are reset during render to allow the DevTools commit hook a chance to read them,\n                            var stateNode = workInProgress.stateNode;\n                            stateNode.effectDuration = 0;\n                            stateNode.passiveEffectDuration = 0;\n                        }\n                    }\n                    break;\n                case SuspenseComponent:\n                    {\n                        var state = workInProgress.memoizedState;\n                        if (state !== null) {\n                            if (state.dehydrated !== null) {\n                                // We're not going to render the children, so this is just to maintain\n                                // push/pop symmetry\n                                pushPrimaryTreeSuspenseHandler(workInProgress); // We know that this component will suspend again because if it has\n                                // been unsuspended it has committed as a resolved Suspense component.\n                                // If it needs to be retried, it should have work scheduled on it.\n                                workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n                                // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n                                return null;\n                            } // If this boundary is currently timed out, we need to decide\n                            // whether to retry the primary children, or to skip over it and\n                            // go straight to the fallback. Check the priority of the primary\n                            // child fragment.\n                            var primaryChildFragment = workInProgress.child;\n                            var primaryChildLanes = primaryChildFragment.childLanes;\n                            if (includesSomeLane(renderLanes, primaryChildLanes)) {\n                                // The primary children have pending work. Use the normal path\n                                // to attempt to render the primary children again.\n                                return updateSuspenseComponent(current, workInProgress, renderLanes);\n                            } else {\n                                // The primary child fragment does not have pending work marked\n                                // on it\n                                pushPrimaryTreeSuspenseHandler(workInProgress); // The primary children do not have pending work with sufficient\n                                // priority. Bailout.\n                                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                                if (child !== null) {\n                                    // The fallback children have pending work. Skip over the\n                                    // primary children and work on the fallback.\n                                    return child.sibling;\n                                } else {\n                                    // Note: We can return `null` here because we already checked\n                                    // whether there were nested context consumers, via the call to\n                                    // `bailoutOnAlreadyFinishedWork` above.\n                                    return null;\n                                }\n                            }\n                        } else {\n                            pushPrimaryTreeSuspenseHandler(workInProgress);\n                        }\n                        break;\n                    }\n                case SuspenseListComponent:\n                    {\n                        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags$1;\n                        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n                        if (didSuspendBefore) {\n                            if (_hasChildWork) {\n                                // If something was in fallback state last time, and we have all the\n                                // same children then we're still in progressive loading state.\n                                // Something might get unblocked by state updates or retries in the\n                                // tree which will affect the tail. So we need to use the normal\n                                // path to compute the correct tail.\n                                return updateSuspenseListComponent(current, workInProgress, renderLanes);\n                            } // If none of the children had any work, that means that none of\n                            // them got retried so they'll still be blocked in the same way\n                            // as before. We can fast bail out.\n                            workInProgress.flags |= DidCapture;\n                        } // If nothing suspended before and we're rendering the same children,\n                        // then the tail doesn't matter. Anything new that suspends will work\n                        // in the \"together\" mode, so we can continue from the state we had.\n                        var renderState = workInProgress.memoizedState;\n                        if (renderState !== null) {\n                            // Reset to the \"together\" mode in case we've started a different\n                            // update in the past but didn't complete it.\n                            renderState.rendering = null;\n                            renderState.tail = null;\n                            renderState.lastEffect = null;\n                        }\n                        pushSuspenseListContext(workInProgress, suspenseStackCursor.current);\n                        if (_hasChildWork) {\n                            break;\n                        } else {\n                            // If none of the children had any work, that means that none of\n                            // them got retried so they'll still be blocked in the same way\n                            // as before. We can fast bail out.\n                            return null;\n                        }\n                    }\n                case OffscreenComponent:\n                case LegacyHiddenComponent:\n                    {\n                        // Need to check if the tree still needs to be deferred. This is\n                        // almost identical to the logic used in the normal update path,\n                        // so we'll just enter that. The only difference is we'll bail out\n                        // at the next level instead of this one, because the child props\n                        // have not changed. Which is fine.\n                        // TODO: Probably should refactor `beginWork` to split the bailout\n                        // path from the normal path. I'm tempted to do a labeled break here\n                        // but I won't :)\n                        workInProgress.lanes = NoLanes;\n                        return updateOffscreenComponent(current, workInProgress, renderLanes);\n                    }\n                case CacheComponent:\n                    {\n                        {\n                            var _cache = current.memoizedState.cache;\n                            pushCacheProvider(workInProgress, _cache);\n                        }\n                        break;\n                    }\n            }\n            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n        function beginWork(current, workInProgress, renderLanes) {\n            {\n                if (workInProgress._debugNeedsRemount && current !== null) {\n                    // This will restart the begin phase with a new fiber.\n                    var copiedFiber = createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes);\n                    return remountFiber(current, workInProgress, copiedFiber);\n                }\n            }\n            if (current !== null) {\n                var oldProps = current.memoizedProps;\n                var newProps = workInProgress.pendingProps;\n                if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) {\n                    // If props or context changed, mark the fiber as having performed work.\n                    // This may be unset if the props are determined to be equal later (memo).\n                    didReceiveUpdate = true;\n                } else {\n                    // Neither props nor legacy context changes. Check if there's a pending\n                    // update or context change.\n                    var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n                    if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n                    // may not be work scheduled on `current`, so we check for this flag.\n                    (workInProgress.flags & DidCapture) === NoFlags$1) {\n                        // No pending updates or context. Bail out now.\n                        didReceiveUpdate = false;\n                        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n                    }\n                    if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {\n                        // This is a special case that only exists for legacy mode.\n                        // See https://github.com/facebook/react/pull/19216.\n                        didReceiveUpdate = true;\n                    } else {\n                        // An update was scheduled on this fiber, but there are no new props\n                        // nor legacy context. Set this to false. If an update queue or context\n                        // consumer produces a changed value, it will set this to true. Otherwise,\n                        // the component will assume the children have not changed and bail out.\n                        didReceiveUpdate = false;\n                    }\n                }\n            } else {\n                didReceiveUpdate = false;\n                if (getIsHydrating() && isForkedChild(workInProgress)) {\n                    // Check if this child belongs to a list of muliple children in\n                    // its parent.\n                    //\n                    // In a true multi-threaded implementation, we would render children on\n                    // parallel threads. This would represent the beginning of a new render\n                    // thread for this subtree.\n                    //\n                    // We only use this for id generation during hydration, which is why the\n                    // logic is located in this special branch.\n                    var slotIndex = workInProgress.index;\n                    var numberOfForks = getForksAtLevel();\n                    pushTreeId(workInProgress, numberOfForks, slotIndex);\n                }\n            } // Before entering the begin phase, clear pending update priority.\n            // TODO: This assumes that we're about to evaluate the component and process\n            // the update queue. However, there's an exception: SimpleMemoComponent\n            // sometimes bails out later in the begin phase. This indicates that we should\n            // move this assignment out of the common path and into each branch.\n            workInProgress.lanes = NoLanes;\n            switch(workInProgress.tag){\n                case LazyComponent:\n                    {\n                        var elementType = workInProgress.elementType;\n                        return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n                    }\n                case FunctionComponent:\n                    {\n                        var Component = workInProgress.type;\n                        var unresolvedProps = workInProgress.pendingProps;\n                        var resolvedProps = unresolvedProps;\n                        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n                    }\n                case ClassComponent:\n                    {\n                        var _Component = workInProgress.type;\n                        var _unresolvedProps = workInProgress.pendingProps;\n                        var _resolvedProps4 = resolveClassComponentProps(_Component, _unresolvedProps);\n                        return updateClassComponent(current, workInProgress, _Component, _resolvedProps4, renderLanes);\n                    }\n                case HostRoot:\n                    return updateHostRoot(current, workInProgress, renderLanes);\n                case HostHoistable:\n                    if (supportsResources) {\n                        return updateHostHoistable(current, workInProgress);\n                    }\n                // Fall through\n                case HostSingleton:\n                    if (supportsSingletons) {\n                        return updateHostSingleton(current, workInProgress, renderLanes);\n                    }\n                // Fall through\n                case HostComponent:\n                    return updateHostComponent$1(current, workInProgress, renderLanes);\n                case HostText:\n                    return updateHostText$1(current, workInProgress);\n                case SuspenseComponent:\n                    return updateSuspenseComponent(current, workInProgress, renderLanes);\n                case HostPortal:\n                    return updatePortalComponent(current, workInProgress, renderLanes);\n                case ForwardRef:\n                    {\n                        var type = workInProgress.type;\n                        var _unresolvedProps2 = workInProgress.pendingProps;\n                        var _resolvedProps5 = _unresolvedProps2;\n                        return updateForwardRef(current, workInProgress, type, _resolvedProps5, renderLanes);\n                    }\n                case Fragment:\n                    return updateFragment(current, workInProgress, renderLanes);\n                case Mode:\n                    return updateMode(current, workInProgress, renderLanes);\n                case Profiler:\n                    return updateProfiler(current, workInProgress, renderLanes);\n                case ContextProvider:\n                    return updateContextProvider(current, workInProgress, renderLanes);\n                case ContextConsumer:\n                    return updateContextConsumer(current, workInProgress, renderLanes);\n                case MemoComponent:\n                    {\n                        var _type = workInProgress.type;\n                        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n                        var _resolvedProps6 = _unresolvedProps3;\n                        _resolvedProps6 = _resolvedProps6;\n                        return updateMemoComponent(current, workInProgress, _type, _resolvedProps6, renderLanes);\n                    }\n                case SimpleMemoComponent:\n                    {\n                        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n                    }\n                case IncompleteClassComponent:\n                    {\n                        {\n                            break;\n                        }\n                    }\n                case IncompleteFunctionComponent:\n                    {\n                        {\n                            break;\n                        }\n                    }\n                case SuspenseListComponent:\n                    {\n                        return updateSuspenseListComponent(current, workInProgress, renderLanes);\n                    }\n                case ScopeComponent:\n                    {\n                        break;\n                    }\n                case OffscreenComponent:\n                    {\n                        return updateOffscreenComponent(current, workInProgress, renderLanes);\n                    }\n                case LegacyHiddenComponent:\n                    {\n                        break;\n                    }\n                case CacheComponent:\n                    {\n                        {\n                            return updateCacheComponent(current, workInProgress, renderLanes);\n                        }\n                    }\n            }\n            throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n        }\n        var valueCursor = createCursor(null);\n        var rendererCursorDEV;\n        {\n            rendererCursorDEV = createCursor(null);\n        }\n        var renderer2CursorDEV;\n        {\n            renderer2CursorDEV = createCursor(null);\n        }\n        var rendererSigil;\n        {\n            // Use this to detect multiple renderers using the same context\n            rendererSigil = {};\n        }\n        var currentlyRenderingFiber = null;\n        var lastContextDependency = null;\n        var lastFullyObservedContext = null;\n        var isDisallowedContextReadInDEV = false;\n        function resetContextDependencies() {\n            // This is called right before React yields execution, to ensure `readContext`\n            // cannot be called outside the render phase.\n            currentlyRenderingFiber = null;\n            lastContextDependency = null;\n            lastFullyObservedContext = null;\n            {\n                isDisallowedContextReadInDEV = false;\n            }\n        }\n        function enterDisallowedContextReadInDEV() {\n            {\n                isDisallowedContextReadInDEV = true;\n            }\n        }\n        function exitDisallowedContextReadInDEV() {\n            {\n                isDisallowedContextReadInDEV = false;\n            }\n        }\n        function pushProvider(providerFiber, context, nextValue) {\n            if (isPrimaryRenderer) {\n                push(valueCursor, context._currentValue, providerFiber);\n                context._currentValue = nextValue;\n                {\n                    push(rendererCursorDEV, context._currentRenderer, providerFiber);\n                    if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n                        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n                    }\n                    context._currentRenderer = rendererSigil;\n                }\n            } else {\n                push(valueCursor, context._currentValue2, providerFiber);\n                context._currentValue2 = nextValue;\n                {\n                    push(renderer2CursorDEV, context._currentRenderer2, providerFiber);\n                    if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n                        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n                    }\n                    context._currentRenderer2 = rendererSigil;\n                }\n            }\n        }\n        function popProvider(context, providerFiber) {\n            var currentValue = valueCursor.current;\n            if (isPrimaryRenderer) {\n                context._currentValue = currentValue;\n                {\n                    var currentRenderer = rendererCursorDEV.current;\n                    pop(rendererCursorDEV, providerFiber);\n                    context._currentRenderer = currentRenderer;\n                }\n            } else {\n                context._currentValue2 = currentValue;\n                {\n                    var currentRenderer2 = renderer2CursorDEV.current;\n                    pop(renderer2CursorDEV, providerFiber);\n                    context._currentRenderer2 = currentRenderer2;\n                }\n            }\n            pop(valueCursor, providerFiber);\n        }\n        function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n            // Update the child lanes of all the ancestors, including the alternates.\n            var node = parent;\n            while(node !== null){\n                var alternate = node.alternate;\n                if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n                    node.childLanes = mergeLanes(node.childLanes, renderLanes);\n                    if (alternate !== null) {\n                        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n                    }\n                } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n                    alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n                } else ;\n                if (node === propagationRoot) {\n                    break;\n                }\n                node = node.return;\n            }\n            {\n                if (node !== propagationRoot) {\n                    error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n                }\n            }\n        }\n        function propagateContextChange(workInProgress, context, renderLanes) {\n            {\n                propagateContextChange_eager(workInProgress, context, renderLanes);\n            }\n        }\n        function propagateContextChange_eager(workInProgress, context, renderLanes) {\n            var fiber = workInProgress.child;\n            if (fiber !== null) {\n                // Set the return pointer of the child to the work-in-progress fiber.\n                fiber.return = workInProgress;\n            }\n            while(fiber !== null){\n                var nextFiber = void 0; // Visit this fiber.\n                var list = fiber.dependencies;\n                if (list !== null) {\n                    nextFiber = fiber.child;\n                    var dependency = list.firstContext;\n                    while(dependency !== null){\n                        // Check if the context matches.\n                        if (dependency.context === context) {\n                            // Match! Schedule an update on this fiber.\n                            if (fiber.tag === ClassComponent) {\n                                // Schedule a force update on the work-in-progress.\n                                var lane = pickArbitraryLane(renderLanes);\n                                var update = createUpdate(lane);\n                                update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n                                // update to the current fiber, too, which means it will persist even if\n                                // this render is thrown away. Since it's a race condition, not sure it's\n                                // worth fixing.\n                                // Inlined `enqueueUpdate` to remove interleaved update check\n                                var updateQueue = fiber.updateQueue;\n                                if (updateQueue === null) ;\n                                else {\n                                    var sharedQueue = updateQueue.shared;\n                                    var pending = sharedQueue.pending;\n                                    if (pending === null) {\n                                        // This is the first update. Create a circular list.\n                                        update.next = update;\n                                    } else {\n                                        update.next = pending.next;\n                                        pending.next = update;\n                                    }\n                                    sharedQueue.pending = update;\n                                }\n                            }\n                            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n                            var alternate = fiber.alternate;\n                            if (alternate !== null) {\n                                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n                            }\n                            scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n                            list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n                            break;\n                        }\n                        dependency = dependency.next;\n                    }\n                } else if (fiber.tag === ContextProvider) {\n                    // Don't scan deeper if this is a matching provider\n                    nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n                } else if (fiber.tag === DehydratedFragment) {\n                    // If a dehydrated suspense boundary is in this subtree, we don't know\n                    // if it will have any context consumers in it. The best we can do is\n                    // mark it as having updates.\n                    var parentSuspense = fiber.return;\n                    if (parentSuspense === null) {\n                        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n                    }\n                    parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n                    var _alternate = parentSuspense.alternate;\n                    if (_alternate !== null) {\n                        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n                    } // This is intentionally passing this fiber as the parent\n                    // because we want to schedule this fiber as having work\n                    // on its children. We'll use the childLanes on\n                    // this fiber to indicate that a context has changed.\n                    scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n                    nextFiber = fiber.sibling;\n                } else {\n                    // Traverse down.\n                    nextFiber = fiber.child;\n                }\n                if (nextFiber !== null) {\n                    // Set the return pointer of the child to the work-in-progress fiber.\n                    nextFiber.return = fiber;\n                } else {\n                    // No child. Traverse to next sibling.\n                    nextFiber = fiber;\n                    while(nextFiber !== null){\n                        if (nextFiber === workInProgress) {\n                            // We're back to the root of this subtree. Exit.\n                            nextFiber = null;\n                            break;\n                        }\n                        var sibling = nextFiber.sibling;\n                        if (sibling !== null) {\n                            // Set the return pointer of the sibling to the work-in-progress fiber.\n                            sibling.return = nextFiber.return;\n                            nextFiber = sibling;\n                            break;\n                        } // No more siblings. Traverse up.\n                        nextFiber = nextFiber.return;\n                    }\n                }\n                fiber = nextFiber;\n            }\n        }\n        function prepareToReadContext(workInProgress, renderLanes) {\n            currentlyRenderingFiber = workInProgress;\n            lastContextDependency = null;\n            lastFullyObservedContext = null;\n            var dependencies = workInProgress.dependencies;\n            if (dependencies !== null) {\n                {\n                    var firstContext = dependencies.firstContext;\n                    if (firstContext !== null) {\n                        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n                            // Context list has a pending update. Mark that this fiber performed work.\n                            markWorkInProgressReceivedUpdate();\n                        } // Reset the work-in-progress list\n                        dependencies.firstContext = null;\n                    }\n                }\n            }\n        }\n        function readContext(context) {\n            {\n                // This warning would fire if you read context inside a Hook like useMemo.\n                // Unlike the class check below, it's not enforced in production for perf.\n                if (isDisallowedContextReadInDEV) {\n                    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n                }\n            }\n            return readContextForConsumer(currentlyRenderingFiber, context);\n        }\n        function readContextDuringReconciliation(consumer, context, renderLanes) {\n            if (currentlyRenderingFiber === null) {\n                prepareToReadContext(consumer, renderLanes);\n            }\n            return readContextForConsumer(consumer, context);\n        }\n        function readContextForConsumer(consumer, context) {\n            var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n            if (lastFullyObservedContext === context) ;\n            else {\n                var contextItem = {\n                    context: context,\n                    memoizedValue: value,\n                    next: null\n                };\n                if (lastContextDependency === null) {\n                    if (consumer === null) {\n                        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n                    } // This is the first dependency for this component. Create a new list.\n                    lastContextDependency = contextItem;\n                    consumer.dependencies = {\n                        lanes: NoLanes,\n                        firstContext: contextItem\n                    };\n                } else {\n                    // Append a new context item.\n                    lastContextDependency = lastContextDependency.next = contextItem;\n                }\n            }\n            return value;\n        }\n        // replace it with a lightweight shim that only has the features we use.\n        var AbortControllerLocal = typeof AbortController !== 'undefined' ? AbortController : // $FlowFixMe[prop-missing]\n        function AbortControllerShim() {\n            var listeners = [];\n            var signal = this.signal = {\n                aborted: false,\n                addEventListener: function(type, listener) {\n                    listeners.push(listener);\n                }\n            };\n            this.abort = function() {\n                signal.aborted = true;\n                listeners.forEach(function(listener) {\n                    return listener();\n                });\n            };\n        }; // Intentionally not named imports because Rollup would\n        // use dynamic dispatch for CommonJS interop named imports.\n        var scheduleCallback$1 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority;\n        var CacheContext = {\n            $$typeof: REACT_CONTEXT_TYPE,\n            // We don't use Consumer/Provider for Cache components. So we'll cheat.\n            Consumer: null,\n            Provider: null,\n            // We'll initialize these at the root.\n            _currentValue: null,\n            _currentValue2: null,\n            _threadCount: 0\n        };\n        {\n            CacheContext._currentRenderer = null;\n            CacheContext._currentRenderer2 = null;\n        }\n        // for retaining the cache once it is in use (retainCache), and releasing the cache\n        // once it is no longer needed (releaseCache).\n        function createCache() {\n            var cache = {\n                controller: new AbortControllerLocal(),\n                data: new Map(),\n                refCount: 0\n            };\n            return cache;\n        }\n        function retainCache(cache) {\n            {\n                if (cache.controller.signal.aborted) {\n                    warn('A cache instance was retained after it was already freed. ' + 'This likely indicates a bug in React.');\n                }\n            }\n            cache.refCount++;\n        } // Cleanup a cache instance, potentially freeing it if there are no more references\n        function releaseCache(cache) {\n            cache.refCount--;\n            {\n                if (cache.refCount < 0) {\n                    warn('A cache instance was released after it was already freed. ' + 'This likely indicates a bug in React.');\n                }\n            }\n            if (cache.refCount === 0) {\n                scheduleCallback$1(NormalPriority, function() {\n                    cache.controller.abort();\n                });\n            }\n        }\n        function pushCacheProvider(workInProgress, cache) {\n            pushProvider(workInProgress, CacheContext, cache);\n        }\n        function popCacheProvider(workInProgress, cache) {\n            popProvider(CacheContext, workInProgress);\n        }\n        // the shared internals object. This is used by the isomorphic implementation of\n        // startTransition to compose all the startTransitions together.\n        //\n        //   function startTransition(fn) {\n        //     return startTransitionDOM(() => {\n        //       return startTransitionART(() => {\n        //         return startTransitionThreeFiber(() => {\n        //           // and so on...\n        //           return fn();\n        //         });\n        //       });\n        //     });\n        //   }\n        //\n        // Currently we only compose together the code that runs at the end of each\n        // startTransition, because for now that's sufficient — the part that sets\n        // isTransition=true on the stack uses a separate shared internal field. But\n        // really we should delete the shared field and track isTransition per\n        // reconciler. Leaving this for a future PR.\n        var prevOnStartTransitionFinish = ReactSharedInternals.S;\n        ReactSharedInternals.S = function onStartTransitionFinishForReconciler(transition, returnValue) {\n            if (typeof returnValue === 'object' && returnValue !== null && typeof returnValue.then === 'function') {\n                // This is an async action\n                var thenable = returnValue;\n                entangleAsyncAction(transition, thenable);\n            }\n            if (prevOnStartTransitionFinish !== null) {\n                prevOnStartTransitionFinish(transition, returnValue);\n            }\n        };\n        function requestCurrentTransition() {\n            return ReactSharedInternals.T;\n        } // When retrying a Suspense/Offscreen boundary, we restore the cache that was\n        // used during the previous render by placing it here, on the stack.\n        var resumedCache = createCursor(null); // During the render/synchronous commit phase, we don't actually process the\n        function peekCacheFromPool() {\n            // If we're rendering inside a Suspense boundary that is currently hidden,\n            // we should use the same cache that we used during the previous render, if\n            // one exists.\n            var cacheResumedFromPreviousRender = resumedCache.current;\n            if (cacheResumedFromPreviousRender !== null) {\n                return cacheResumedFromPreviousRender;\n            } // Otherwise, check the root's cache pool.\n            var root = getWorkInProgressRoot();\n            var cacheFromRootCachePool = root.pooledCache;\n            return cacheFromRootCachePool;\n        }\n        function requestCacheFromPool(renderLanes) {\n            // Similar to previous function, except if there's not already a cache in the\n            // pool, we allocate a new one.\n            var cacheFromPool = peekCacheFromPool();\n            if (cacheFromPool !== null) {\n                return cacheFromPool;\n            } // Create a fresh cache and add it to the root cache pool. A cache can have\n            // multiple owners:\n            // - A cache pool that lives on the FiberRoot. This is where all fresh caches\n            //   are originally created (TODO: except during refreshes, until we implement\n            //   this correctly). The root takes ownership immediately when the cache is\n            //   created. Conceptually, root.pooledCache is an Option<Arc<Cache>> (owned),\n            //   and the return value of this function is a &Arc<Cache> (borrowed).\n            // - One of several fiber types: host root, cache boundary, suspense\n            //   component. These retain and release in the commit phase.\n            var root = getWorkInProgressRoot();\n            var freshCache = createCache();\n            root.pooledCache = freshCache;\n            retainCache(freshCache);\n            if (freshCache !== null) {\n                root.pooledCacheLanes |= renderLanes;\n            }\n            return freshCache;\n        }\n        function pushTransition(offscreenWorkInProgress, prevCachePool, newTransitions) {\n            {\n                if (prevCachePool === null) {\n                    push(resumedCache, resumedCache.current, offscreenWorkInProgress);\n                } else {\n                    push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);\n                }\n            }\n        }\n        function popTransition(workInProgress, current) {\n            if (current !== null) {\n                {\n                    pop(resumedCache, workInProgress);\n                }\n            }\n        }\n        function getSuspendedCache() {\n            // cache that would have been used to render fresh data during this render,\n            // if there was any, so that we can resume rendering with the same cache when\n            // we receive more data.\n            var cacheFromPool = peekCacheFromPool();\n            if (cacheFromPool === null) {\n                return null;\n            }\n            return {\n                // We must also save the parent, so that when we resume we can detect\n                // a refresh.\n                parent: isPrimaryRenderer ? CacheContext._currentValue : CacheContext._currentValue2,\n                pool: cacheFromPool\n            };\n        }\n        function getOffscreenDeferredCache() {\n            var cacheFromPool = peekCacheFromPool();\n            if (cacheFromPool === null) {\n                return null;\n            }\n            return {\n                // We must also store the parent, so that when we resume we can detect\n                // a refresh.\n                parent: isPrimaryRenderer ? CacheContext._currentValue : CacheContext._currentValue2,\n                pool: cacheFromPool\n            };\n        }\n        /**\n * Tag the fiber with an update effect. This turns a Placement into\n * a PlacementAndUpdate.\n */ function markUpdate(workInProgress) {\n            workInProgress.flags |= Update;\n        }\n        /**\n * In persistent mode, return whether this update needs to clone the subtree.\n */ function doesRequireClone(current, completedWork) {\n            var didBailout = current !== null && current.child === completedWork.child;\n            if (didBailout) {\n                return false;\n            }\n            if ((completedWork.flags & ChildDeletion) !== NoFlags$1) {\n                return true;\n            } // TODO: If we move the `doesRequireClone` call after `bubbleProperties`\n            // then we only have to check the `completedWork.subtreeFlags`.\n            var child = completedWork.child;\n            while(child !== null){\n                if ((child.flags & MutationMask) !== NoFlags$1 || (child.subtreeFlags & MutationMask) !== NoFlags$1) {\n                    return true;\n                }\n                child = child.sibling;\n            }\n            return false;\n        }\n        function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {\n            if (supportsMutation) {\n                // We only have the top Fiber that was created but we need recurse down its\n                // children to find all the terminal nodes.\n                var node = workInProgress.child;\n                while(node !== null){\n                    if (node.tag === HostComponent || node.tag === HostText) {\n                        appendInitialChild(parent, node.stateNode);\n                    } else if (node.tag === HostPortal || (supportsSingletons ? node.tag === HostSingleton : false)) ;\n                    else if (node.child !== null) {\n                        node.child.return = node;\n                        node = node.child;\n                        continue;\n                    }\n                    if (node === workInProgress) {\n                        return;\n                    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    while(node.sibling === null){\n                        // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        if (node.return === null || node.return === workInProgress) {\n                            return;\n                        }\n                        node = node.return;\n                    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    node.sibling.return = node.return;\n                    node = node.sibling;\n                }\n            } else if (supportsPersistence) {\n                // We only have the top Fiber that was created but we need recurse down its\n                // children to find all the terminal nodes.\n                var _node = workInProgress.child;\n                while(_node !== null){\n                    if (_node.tag === HostComponent) {\n                        var instance = _node.stateNode;\n                        if (needsVisibilityToggle && isHidden) {\n                            // This child is inside a timed out tree. Hide it.\n                            var props = _node.memoizedProps;\n                            var type = _node.type;\n                            instance = cloneHiddenInstance(instance, type, props);\n                        }\n                        appendInitialChild(parent, instance);\n                    } else if (_node.tag === HostText) {\n                        var _instance = _node.stateNode;\n                        if (needsVisibilityToggle && isHidden) {\n                            // This child is inside a timed out tree. Hide it.\n                            var text = _node.memoizedProps;\n                            _instance = cloneHiddenTextInstance(_instance, text);\n                        }\n                        appendInitialChild(parent, _instance);\n                    } else if (_node.tag === HostPortal) ;\n                    else if (_node.tag === OffscreenComponent && _node.memoizedState !== null) {\n                        // The children in this boundary are hidden. Toggle their visibility\n                        // before appending.\n                        var child = _node.child;\n                        if (child !== null) {\n                            child.return = _node;\n                        }\n                        appendAllChildren(parent, _node, /* needsVisibilityToggle */ true, /* isHidden */ true);\n                    } else if (_node.child !== null) {\n                        _node.child.return = _node;\n                        _node = _node.child;\n                        continue;\n                    }\n                    if (_node === workInProgress) {\n                        return;\n                    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    while(_node.sibling === null){\n                        // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        if (_node.return === null || _node.return === workInProgress) {\n                            return;\n                        }\n                        _node = _node.return;\n                    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    _node.sibling.return = _node.return;\n                    _node = _node.sibling;\n                }\n            }\n        } // An unfortunate fork of appendAllChildren because we have two different parent types.\n        function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n            if (supportsPersistence) {\n                // We only have the top Fiber that was created but we need recurse down its\n                // children to find all the terminal nodes.\n                var node = workInProgress.child;\n                while(node !== null){\n                    if (node.tag === HostComponent) {\n                        var instance = node.stateNode;\n                        if (needsVisibilityToggle && isHidden) {\n                            // This child is inside a timed out tree. Hide it.\n                            var props = node.memoizedProps;\n                            var type = node.type;\n                            instance = cloneHiddenInstance(instance, type, props);\n                        }\n                        appendChildToContainerChildSet(containerChildSet, instance);\n                    } else if (node.tag === HostText) {\n                        var _instance2 = node.stateNode;\n                        if (needsVisibilityToggle && isHidden) {\n                            // This child is inside a timed out tree. Hide it.\n                            var text = node.memoizedProps;\n                            _instance2 = cloneHiddenTextInstance(_instance2, text);\n                        }\n                        appendChildToContainerChildSet(containerChildSet, _instance2);\n                    } else if (node.tag === HostPortal) ;\n                    else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n                        // The children in this boundary are hidden. Toggle their visibility\n                        // before appending.\n                        var child = node.child;\n                        if (child !== null) {\n                            child.return = node;\n                        } // If Offscreen is not in manual mode, detached tree is hidden from user space.\n                        var _needsVisibilityToggle = !isOffscreenManual(node);\n                        appendAllChildrenToContainer(containerChildSet, node, /* needsVisibilityToggle */ _needsVisibilityToggle, /* isHidden */ true);\n                    } else if (node.child !== null) {\n                        node.child.return = node;\n                        node = node.child;\n                        continue;\n                    }\n                    node = node;\n                    if (node === workInProgress) {\n                        return;\n                    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    while(node.sibling === null){\n                        // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        if (node.return === null || node.return === workInProgress) {\n                            return;\n                        }\n                        node = node.return;\n                    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    node.sibling.return = node.return;\n                    node = node.sibling;\n                }\n            }\n        }\n        function updateHostContainer(current, workInProgress) {\n            if (supportsPersistence) {\n                if (doesRequireClone(current, workInProgress)) {\n                    var portalOrRoot = workInProgress.stateNode;\n                    var container = portalOrRoot.containerInfo;\n                    var newChildSet = createContainerChildSet(); // If children might have changed, we have to add them all to the set.\n                    appendAllChildrenToContainer(newChildSet, workInProgress, /* needsVisibilityToggle */ false, /* isHidden */ false);\n                    portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n                    markUpdate(workInProgress);\n                    finalizeContainerChildren(container, newChildSet);\n                }\n            }\n        }\n        function updateHostComponent(current, workInProgress, type, newProps, renderLanes) {\n            if (supportsMutation) {\n                // If we have an alternate, that means this is an update and we need to\n                // schedule a side-effect to do the updates.\n                var oldProps = current.memoizedProps;\n                if (oldProps === newProps) {\n                    // In mutation mode, this is sufficient for a bailout because\n                    // we won't touch this node even if children changed.\n                    return;\n                }\n                markUpdate(workInProgress);\n            } else if (supportsPersistence) {\n                var currentInstance = current.stateNode;\n                var _oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n                // This guarantees that we can reuse all of them.\n                var requiresClone = doesRequireClone(current, workInProgress);\n                if (!requiresClone && _oldProps === newProps) {\n                    // No changes, just reuse the existing instance.\n                    // Note that this might release a previous clone.\n                    workInProgress.stateNode = currentInstance;\n                    return;\n                }\n                var currentHostContext = getHostContext();\n                var newChildSet = null;\n                if (requiresClone && passChildrenWhenCloningPersistedNodes) {\n                    newChildSet = createContainerChildSet(); // If children might have changed, we have to add them all to the set.\n                    appendAllChildrenToContainer(newChildSet, workInProgress, /* needsVisibilityToggle */ false, /* isHidden */ false);\n                }\n                var newInstance = cloneInstance(currentInstance, type, _oldProps, newProps, !requiresClone, newChildSet);\n                if (newInstance === currentInstance) {\n                    // No changes, just reuse the existing instance.\n                    // Note that this might release a previous clone.\n                    workInProgress.stateNode = currentInstance;\n                    return;\n                } // Certain renderers require commit-time effects for initial mount.\n                // (eg DOM renderer supports auto-focus for certain elements).\n                // Make sure such renderers get scheduled for later work.\n                if (finalizeInitialChildren(newInstance, type, newProps, currentHostContext)) {\n                    markUpdate(workInProgress);\n                }\n                workInProgress.stateNode = newInstance;\n                if (!requiresClone) {\n                    // If there are no other effects in this tree, we need to flag this node as having one.\n                    // Even though we're not going to use it for anything.\n                    // Otherwise parents won't know that there are new children to propagate upwards.\n                    markUpdate(workInProgress);\n                } else {\n                    // If children might have changed, we have to add them all to the set.\n                    appendAllChildren(newInstance, workInProgress, /* needsVisibilityToggle */ false, /* isHidden */ false);\n                }\n            }\n        } // This function must be called at the very end of the complete phase, because\n        // it might throw to suspend, and if the resource immediately loads, the work\n        // loop will resume rendering as if the work-in-progress completed. So it must\n        // fully complete.\n        // TODO: This should ideally move to begin phase, but currently the instance is\n        // not created until the complete phase. For our existing use cases, host nodes\n        // that suspend don't have children, so it doesn't matter. But that might not\n        // always be true in the future.\n        function preloadInstanceAndSuspendIfNeeded(workInProgress, type, props, renderLanes) {\n            if (!maySuspendCommit(type, props)) {\n                // If this flag was set previously, we can remove it. The flag\n                // represents whether this particular set of props might ever need to\n                // suspend. The safest thing to do is for maySuspendCommit to always\n                // return true, but if the renderer is reasonably confident that the\n                // underlying resource won't be evicted, it can return false as a\n                // performance optimization.\n                workInProgress.flags &= ~MaySuspendCommit;\n                return;\n            } // Mark this fiber with a flag. This gets set on all host instances\n            // that might possibly suspend, even if they don't need to suspend\n            // currently. We use this when revealing a prerendered tree, because\n            // even though the tree has \"mounted\", its resources might not have\n            // loaded yet.\n            workInProgress.flags |= MaySuspendCommit; // preload the instance if necessary. Even if this is an urgent render there\n            // could be benefits to preloading early.\n            // @TODO we should probably do the preload in begin work\n            var isReady = preloadInstance(type, props);\n            if (!isReady) {\n                if (shouldRemainOnPreviousScreen()) {\n                    workInProgress.flags |= ShouldSuspendCommit;\n                } else {\n                    suspendCommit();\n                }\n            }\n        }\n        function preloadResourceAndSuspendIfNeeded(workInProgress, resource, type, props, renderLanes) {\n            // This is a fork of preloadInstanceAndSuspendIfNeeded, but for resources.\n            if (!mayResourceSuspendCommit(resource)) {\n                workInProgress.flags &= ~MaySuspendCommit;\n                return;\n            }\n            workInProgress.flags |= MaySuspendCommit;\n            var isReady = preloadResource(resource);\n            if (!isReady) {\n                if (shouldRemainOnPreviousScreen()) {\n                    workInProgress.flags |= ShouldSuspendCommit;\n                } else {\n                    suspendCommit();\n                }\n            }\n        }\n        function scheduleRetryEffect(workInProgress, retryQueue) {\n            var wakeables = retryQueue;\n            if (wakeables !== null) {\n                // Schedule an effect to attach a retry listener to the promise.\n                // TODO: Move to passive phase\n                workInProgress.flags |= Update;\n            } else {\n                // This boundary suspended, but no wakeables were added to the retry\n                // queue. Check if the renderer suspended commit. If so, this means\n                // that once the fallback is committed, we can immediately retry\n                // rendering again, because rendering wasn't actually blocked. Only\n                // the commit phase.\n                // TODO: Consider a model where we always schedule an immediate retry, even\n                // for normal Suspense. That way the retry can partially render up to the\n                // first thing that suspends.\n                if (workInProgress.flags & ScheduleRetry) {\n                    var retryLane = // I also suspect that we need some further consolidation of offscreen\n                    // and retry lanes.\n                    workInProgress.tag !== OffscreenComponent ? claimNextRetryLane() : OffscreenLane;\n                    workInProgress.lanes = mergeLanes(workInProgress.lanes, retryLane);\n                }\n            }\n        }\n        function updateHostText(current, workInProgress, oldText, newText) {\n            if (supportsMutation) {\n                // If the text differs, mark it as an update. All the work in done in commitWork.\n                if (oldText !== newText) {\n                    markUpdate(workInProgress);\n                }\n            } else if (supportsPersistence) {\n                if (oldText !== newText) {\n                    // If the text content differs, we'll create a new text instance for it.\n                    var rootContainerInstance = getRootHostContainer();\n                    var currentHostContext = getHostContext();\n                    workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n                    // This lets the parents know that at least one of their children has changed.\n                    markUpdate(workInProgress);\n                } else {\n                    workInProgress.stateNode = current.stateNode;\n                }\n            }\n        }\n        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n            if (getIsHydrating()) {\n                // If we're hydrating, we should consume as many items as we can\n                // so we don't leave any behind.\n                return;\n            }\n            switch(renderState.tailMode){\n                case 'hidden':\n                    {\n                        // Any insertions at the end of the tail list after this point\n                        // should be invisible. If there are already mounted boundaries\n                        // anything before them are not considered for collapsing.\n                        // Therefore we need to go through the whole tail to find if\n                        // there are any.\n                        var tailNode = renderState.tail;\n                        var lastTailNode = null;\n                        while(tailNode !== null){\n                            if (tailNode.alternate !== null) {\n                                lastTailNode = tailNode;\n                            }\n                            tailNode = tailNode.sibling;\n                        } // Next we're simply going to delete all insertions after the\n                        // last rendered item.\n                        if (lastTailNode === null) {\n                            // All remaining items in the tail are insertions.\n                            renderState.tail = null;\n                        } else {\n                            // Detach the insertion after the last node that was already\n                            // inserted.\n                            lastTailNode.sibling = null;\n                        }\n                        break;\n                    }\n                case 'collapsed':\n                    {\n                        // Any insertions at the end of the tail list after this point\n                        // should be invisible. If there are already mounted boundaries\n                        // anything before them are not considered for collapsing.\n                        // Therefore we need to go through the whole tail to find if\n                        // there are any.\n                        var _tailNode = renderState.tail;\n                        var _lastTailNode = null;\n                        while(_tailNode !== null){\n                            if (_tailNode.alternate !== null) {\n                                _lastTailNode = _tailNode;\n                            }\n                            _tailNode = _tailNode.sibling;\n                        } // Next we're simply going to delete all insertions after the\n                        // last rendered item.\n                        if (_lastTailNode === null) {\n                            // All remaining items in the tail are insertions.\n                            if (!hasRenderedATailFallback && renderState.tail !== null) {\n                                // We suspended during the head. We want to show at least one\n                                // row at the tail. So we'll keep on and cut off the rest.\n                                renderState.tail.sibling = null;\n                            } else {\n                                renderState.tail = null;\n                            }\n                        } else {\n                            // Detach the insertion after the last node that was already\n                            // inserted.\n                            _lastTailNode.sibling = null;\n                        }\n                        break;\n                    }\n            }\n        }\n        function bubbleProperties(completedWork) {\n            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n            var newChildLanes = NoLanes;\n            var subtreeFlags = NoFlags$1;\n            if (!didBailout) {\n                // Bubble up the earliest expiration time.\n                if ((completedWork.mode & ProfileMode) !== NoMode) {\n                    // In profiling mode, resetChildExpirationTime is also used to reset\n                    // profiler durations.\n                    var actualDuration = completedWork.actualDuration;\n                    var treeBaseDuration = completedWork.selfBaseDuration;\n                    var child = completedWork.child;\n                    while(child !== null){\n                        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n                        subtreeFlags |= child.subtreeFlags;\n                        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n                        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n                        // When work is done, it should bubble to the parent's actualDuration. If\n                        // the fiber has not been cloned though, (meaning no work was done), then\n                        // this value will reflect the amount of time spent working on a previous\n                        // render. In that case it should not bubble. We determine whether it was\n                        // cloned by comparing the child pointer.\n                        // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n                        actualDuration += child.actualDuration; // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n                        treeBaseDuration += child.treeBaseDuration;\n                        child = child.sibling;\n                    }\n                    completedWork.actualDuration = actualDuration;\n                    completedWork.treeBaseDuration = treeBaseDuration;\n                } else {\n                    var _child = completedWork.child;\n                    while(_child !== null){\n                        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n                        subtreeFlags |= _child.subtreeFlags;\n                        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n                        // smell because it assumes the commit phase is never concurrent with\n                        // the render phase. Will address during refactor to alternate model.\n                        _child.return = completedWork;\n                        _child = _child.sibling;\n                    }\n                }\n                completedWork.subtreeFlags |= subtreeFlags;\n            } else {\n                // Bubble up the earliest expiration time.\n                if ((completedWork.mode & ProfileMode) !== NoMode) {\n                    // In profiling mode, resetChildExpirationTime is also used to reset\n                    // profiler durations.\n                    var _treeBaseDuration = completedWork.selfBaseDuration;\n                    var _child2 = completedWork.child;\n                    while(_child2 !== null){\n                        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n                        // so we should bubble those up even during a bailout. All the other\n                        // flags have a lifetime only of a single render + commit, so we should\n                        // ignore them.\n                        subtreeFlags |= _child2.subtreeFlags & StaticMask;\n                        subtreeFlags |= _child2.flags & StaticMask; // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n                        _treeBaseDuration += _child2.treeBaseDuration;\n                        _child2 = _child2.sibling;\n                    }\n                    completedWork.treeBaseDuration = _treeBaseDuration;\n                } else {\n                    var _child3 = completedWork.child;\n                    while(_child3 !== null){\n                        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n                        // so we should bubble those up even during a bailout. All the other\n                        // flags have a lifetime only of a single render + commit, so we should\n                        // ignore them.\n                        subtreeFlags |= _child3.subtreeFlags & StaticMask;\n                        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n                        // smell because it assumes the commit phase is never concurrent with\n                        // the render phase. Will address during refactor to alternate model.\n                        _child3.return = completedWork;\n                        _child3 = _child3.sibling;\n                    }\n                }\n                completedWork.subtreeFlags |= subtreeFlags;\n            }\n            completedWork.childLanes = newChildLanes;\n            return didBailout;\n        }\n        function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\n            var wasHydrated = popHydrationState(workInProgress);\n            if (nextState !== null && nextState.dehydrated !== null) {\n                // We might be inside a hydration state the first time we're picking up this\n                // Suspense boundary, and also after we've reentered it for further hydration.\n                if (current === null) {\n                    if (!wasHydrated) {\n                        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');\n                    }\n                    prepareToHydrateHostSuspenseInstance(workInProgress);\n                    bubbleProperties(workInProgress);\n                    {\n                        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                            var isTimedOutSuspense = nextState !== null;\n                            if (isTimedOutSuspense) {\n                                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                                var primaryChildFragment = workInProgress.child;\n                                if (primaryChildFragment !== null) {\n                                    // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n                                    workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                                }\n                            }\n                        }\n                    }\n                    return false;\n                } else {\n                    emitPendingHydrationWarnings(); // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n                    // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n                    resetHydrationState();\n                    if ((workInProgress.flags & DidCapture) === NoFlags$1) {\n                        // This boundary did not suspend so it's now hydrated and unsuspended.\n                        workInProgress.memoizedState = null;\n                    } // If nothing suspended, we need to schedule an effect to mark this boundary\n                    // as having hydrated so events know that they're free to be invoked.\n                    // It's also a signal to replay events and the suspense callback.\n                    // If something suspended, schedule an effect to attach retry listeners.\n                    // So we might as well always mark this.\n                    workInProgress.flags |= Update;\n                    bubbleProperties(workInProgress);\n                    {\n                        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                            var _isTimedOutSuspense = nextState !== null;\n                            if (_isTimedOutSuspense) {\n                                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                                var _primaryChildFragment = workInProgress.child;\n                                if (_primaryChildFragment !== null) {\n                                    // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n                                    workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n                                }\n                            }\n                        }\n                    }\n                    return false;\n                }\n            } else {\n                // Successfully completed this tree. If this was a forced client render,\n                // there may have been recoverable errors during first hydration\n                // attempt. If so, add them to a queue so we can log them in the\n                // commit phase.\n                upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\n                return true;\n            }\n        }\n        function completeWork(current, workInProgress, renderLanes) {\n            var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n            // to the current tree provider fiber is just as fast and less error-prone.\n            // Ideally we would have a special version of the work loop only\n            // for hydration.\n            popTreeContext(workInProgress);\n            switch(workInProgress.tag){\n                case IncompleteFunctionComponent:\n                    {\n                        {\n                            break;\n                        }\n                    }\n                case LazyComponent:\n                case SimpleMemoComponent:\n                case FunctionComponent:\n                case ForwardRef:\n                case Fragment:\n                case Mode:\n                case Profiler:\n                case ContextConsumer:\n                case MemoComponent:\n                    bubbleProperties(workInProgress);\n                    return null;\n                case ClassComponent:\n                    {\n                        bubbleProperties(workInProgress);\n                        return null;\n                    }\n                case HostRoot:\n                    {\n                        var fiberRoot = workInProgress.stateNode;\n                        {\n                            var previousCache = null;\n                            if (current !== null) {\n                                previousCache = current.memoizedState.cache;\n                            }\n                            var cache = workInProgress.memoizedState.cache;\n                            if (cache !== previousCache) {\n                                // Run passive effects to retain/release the cache.\n                                workInProgress.flags |= Passive$1;\n                            }\n                            popCacheProvider(workInProgress);\n                        }\n                        popHostContainer(workInProgress);\n                        if (fiberRoot.pendingContext) {\n                            fiberRoot.context = fiberRoot.pendingContext;\n                            fiberRoot.pendingContext = null;\n                        }\n                        if (current === null || current.child === null) {\n                            // If we hydrated, pop so that we can delete any remaining children\n                            // that weren't hydrated.\n                            var wasHydrated = popHydrationState(workInProgress);\n                            if (wasHydrated) {\n                                emitPendingHydrationWarnings(); // If we hydrated, then we'll need to schedule an update for\n                                // the commit side-effects on the root.\n                                markUpdate(workInProgress);\n                            } else {\n                                if (current !== null) {\n                                    var prevState = current.memoizedState;\n                                    if (!prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n                                    (workInProgress.flags & ForceClientRender) !== NoFlags$1) {\n                                        // Schedule an effect to clear this container at the start of the\n                                        // next commit. This handles the case of React rendering into a\n                                        // container with previous children. It's also safe to do for\n                                        // updates too, because current.child would only be null if the\n                                        // previous render was null (so the container would already\n                                        // be empty).\n                                        workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                                        // recoverable errors during first hydration attempt. If so, add\n                                        // them to a queue so we can log them in the commit phase.\n                                        upgradeHydrationErrorsToRecoverable();\n                                    }\n                                }\n                            }\n                        }\n                        updateHostContainer(current, workInProgress);\n                        bubbleProperties(workInProgress);\n                        return null;\n                    }\n                case HostHoistable:\n                    {\n                        if (supportsResources) {\n                            // The branching here is more complicated than you might expect because\n                            // a HostHoistable sometimes corresponds to a Resource and sometimes\n                            // corresponds to an Instance. It can also switch during an update.\n                            var type = workInProgress.type;\n                            var nextResource = workInProgress.memoizedState;\n                            if (current === null) {\n                                // We are mounting and must Update this Hoistable in this commit\n                                // @TODO refactor this block to create the instance here in complete\n                                // phase if we are not hydrating.\n                                markUpdate(workInProgress);\n                                if (nextResource !== null) {\n                                    // This is a Hoistable Resource\n                                    // This must come at the very end of the complete phase.\n                                    bubbleProperties(workInProgress);\n                                    preloadResourceAndSuspendIfNeeded(workInProgress, nextResource);\n                                    return null;\n                                } else {\n                                    // This is a Hoistable Instance\n                                    // This must come at the very end of the complete phase.\n                                    bubbleProperties(workInProgress);\n                                    preloadInstanceAndSuspendIfNeeded(workInProgress, type, newProps);\n                                    return null;\n                                }\n                            } else {\n                                // This is an update.\n                                if (nextResource) {\n                                    // This is a Resource\n                                    if (nextResource !== current.memoizedState) {\n                                        // we have a new Resource. we need to update\n                                        markUpdate(workInProgress); // This must come at the very end of the complete phase.\n                                        bubbleProperties(workInProgress); // This must come at the very end of the complete phase, because it might\n                                        // throw to suspend, and if the resource immediately loads, the work loop\n                                        // will resume rendering as if the work-in-progress completed. So it must\n                                        // fully complete.\n                                        preloadResourceAndSuspendIfNeeded(workInProgress, nextResource);\n                                        return null;\n                                    } else {\n                                        // This must come at the very end of the complete phase.\n                                        bubbleProperties(workInProgress);\n                                        workInProgress.flags &= ~MaySuspendCommit;\n                                        return null;\n                                    }\n                                } else {\n                                    // This is an Instance\n                                    // We may have props to update on the Hoistable instance.\n                                    if (supportsMutation) {\n                                        var oldProps = current.memoizedProps;\n                                        if (oldProps !== newProps) {\n                                            markUpdate(workInProgress);\n                                        }\n                                    } else {\n                                        // We use the updateHostComponent path becuase it produces\n                                        // the update queue we need for Hoistables.\n                                        updateHostComponent(current, workInProgress, type, newProps);\n                                    } // This must come at the very end of the complete phase.\n                                    bubbleProperties(workInProgress);\n                                    preloadInstanceAndSuspendIfNeeded(workInProgress, type, newProps);\n                                    return null;\n                                }\n                            }\n                        } // Fall through\n                    }\n                case HostSingleton:\n                    {\n                        if (supportsSingletons) {\n                            popHostContext(workInProgress);\n                            var rootContainerInstance = getRootHostContainer();\n                            var _type = workInProgress.type;\n                            if (current !== null && workInProgress.stateNode != null) {\n                                if (supportsMutation) {\n                                    var _oldProps2 = current.memoizedProps;\n                                    if (_oldProps2 !== newProps) {\n                                        markUpdate(workInProgress);\n                                    }\n                                } else {\n                                    updateHostComponent(current, workInProgress, _type, newProps);\n                                }\n                            } else {\n                                if (!newProps) {\n                                    if (workInProgress.stateNode === null) {\n                                        throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                                    } // This can happen when we abort work.\n                                    bubbleProperties(workInProgress);\n                                    return null;\n                                }\n                                var currentHostContext = getHostContext();\n                                var _wasHydrated = popHydrationState(workInProgress);\n                                var instance;\n                                if (_wasHydrated) {\n                                    // We ignore the boolean indicating there is an updateQueue because\n                                    // it is used only to set text children and HostSingletons do not\n                                    // use them.\n                                    prepareToHydrateHostInstance(workInProgress, currentHostContext);\n                                    instance = workInProgress.stateNode;\n                                } else {\n                                    instance = resolveSingletonInstance(_type, newProps, rootContainerInstance, currentHostContext, true);\n                                    workInProgress.stateNode = instance;\n                                    markUpdate(workInProgress);\n                                }\n                            }\n                            bubbleProperties(workInProgress);\n                            return null;\n                        } // Fall through\n                    }\n                case HostComponent:\n                    {\n                        popHostContext(workInProgress);\n                        var _type2 = workInProgress.type;\n                        if (current !== null && workInProgress.stateNode != null) {\n                            updateHostComponent(current, workInProgress, _type2, newProps);\n                        } else {\n                            if (!newProps) {\n                                if (workInProgress.stateNode === null) {\n                                    throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                                } // This can happen when we abort work.\n                                bubbleProperties(workInProgress);\n                                return null;\n                            }\n                            var _currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n                            // \"stack\" as the parent. Then append children as we go in beginWork\n                            // or completeWork depending on whether we want to add them top->down or\n                            // bottom->up. Top->down is faster in IE11.\n                            var _wasHydrated2 = popHydrationState(workInProgress);\n                            if (_wasHydrated2) {\n                                // TODO: Move this and createInstance step into the beginPhase\n                                // to consolidate.\n                                prepareToHydrateHostInstance(workInProgress, _currentHostContext);\n                            } else {\n                                var _rootContainerInstance = getRootHostContainer();\n                                var _instance3 = createInstance(_type2, newProps, _rootContainerInstance, _currentHostContext, workInProgress); // TODO: For persistent renderers, we should pass children as part\n                                // of the initial instance creation\n                                appendAllChildren(_instance3, workInProgress, false, false);\n                                workInProgress.stateNode = _instance3; // Certain renderers require commit-time effects for initial mount.\n                                // (eg DOM renderer supports auto-focus for certain elements).\n                                // Make sure such renderers get scheduled for later work.\n                                if (finalizeInitialChildren(_instance3, _type2, newProps, _currentHostContext)) {\n                                    markUpdate(workInProgress);\n                                }\n                            }\n                        }\n                        bubbleProperties(workInProgress); // This must come at the very end of the complete phase, because it might\n                        // throw to suspend, and if the resource immediately loads, the work loop\n                        // will resume rendering as if the work-in-progress completed. So it must\n                        // fully complete.\n                        preloadInstanceAndSuspendIfNeeded(workInProgress, workInProgress.type, workInProgress.pendingProps);\n                        return null;\n                    }\n                case HostText:\n                    {\n                        var newText = newProps;\n                        if (current && workInProgress.stateNode != null) {\n                            var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n                            // to schedule a side-effect to do the updates.\n                            updateHostText(current, workInProgress, oldText, newText);\n                        } else {\n                            if (typeof newText !== 'string') {\n                                if (workInProgress.stateNode === null) {\n                                    throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                                } // This can happen when we abort work.\n                            }\n                            var _rootContainerInstance2 = getRootHostContainer();\n                            var _currentHostContext2 = getHostContext();\n                            var _wasHydrated3 = popHydrationState(workInProgress);\n                            if (_wasHydrated3) {\n                                prepareToHydrateHostTextInstance(workInProgress);\n                            } else {\n                                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance2, _currentHostContext2, workInProgress);\n                            }\n                        }\n                        bubbleProperties(workInProgress);\n                        return null;\n                    }\n                case SuspenseComponent:\n                    {\n                        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\n                        // to its own fiber type so that we can add other kinds of hydration\n                        // boundaries that aren't associated with a Suspense tree. In anticipation\n                        // of such a refactor, all the hydration logic is contained in\n                        // this branch.\n                        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\n                            var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\n                            if (!fallthroughToNormalSuspensePath) {\n                                if (workInProgress.flags & ForceClientRender) {\n                                    popSuspenseHandler(workInProgress); // Special case. There were remaining unhydrated nodes. We treat\n                                    // this as a mismatch. Revert to client rendering.\n                                    return workInProgress;\n                                } else {\n                                    popSuspenseHandler(workInProgress); // Did not finish hydrating, either because this is the initial\n                                    // render or because something suspended.\n                                    return null;\n                                }\n                            } // Continue with the normal Suspense path.\n                        }\n                        popSuspenseHandler(workInProgress);\n                        if ((workInProgress.flags & DidCapture) !== NoFlags$1) {\n                            // Something suspended. Re-render with the fallback children.\n                            workInProgress.lanes = renderLanes; // Do not reset the effect list.\n                            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                                transferActualDuration(workInProgress);\n                            } // Don't bubble properties in this case.\n                            return workInProgress;\n                        }\n                        var nextDidTimeout = nextState !== null;\n                        var prevDidTimeout = current !== null && current.memoizedState !== null;\n                        if (nextDidTimeout) {\n                            var offscreenFiber = workInProgress.child;\n                            var _previousCache = null;\n                            if (offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null && offscreenFiber.alternate.memoizedState.cachePool !== null) {\n                                _previousCache = offscreenFiber.alternate.memoizedState.cachePool.pool;\n                            }\n                            var _cache = null;\n                            if (offscreenFiber.memoizedState !== null && offscreenFiber.memoizedState.cachePool !== null) {\n                                _cache = offscreenFiber.memoizedState.cachePool.pool;\n                            }\n                            if (_cache !== _previousCache) {\n                                // Run passive effects to retain/release the cache.\n                                offscreenFiber.flags |= Passive$1;\n                            }\n                        } // If the suspended state of the boundary changes, we need to schedule\n                        // a passive effect, which is when we process the transitions\n                        if (nextDidTimeout !== prevDidTimeout) {\n                            // an effect to toggle the subtree's visibility. When we switch from\n                            // fallback -> primary, the inner Offscreen fiber schedules this effect\n                            // as part of its normal complete phase. But when we switch from\n                            // primary -> fallback, the inner Offscreen fiber does not have a complete\n                            // phase. So we need to schedule its effect here.\n                            //\n                            // We also use this flag to connect/disconnect the effects, but the same\n                            // logic applies: when re-connecting, the Offscreen fiber's complete\n                            // phase will handle scheduling the effect. It's only when the fallback\n                            // is active that we have to do anything special.\n                            if (nextDidTimeout) {\n                                var _offscreenFiber2 = workInProgress.child;\n                                _offscreenFiber2.flags |= Visibility;\n                            }\n                        }\n                        var retryQueue = workInProgress.updateQueue;\n                        scheduleRetryEffect(workInProgress, retryQueue);\n                        bubbleProperties(workInProgress);\n                        {\n                            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                                if (nextDidTimeout) {\n                                    // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                                    var primaryChildFragment = workInProgress.child;\n                                    if (primaryChildFragment !== null) {\n                                        // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n                                        workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                                    }\n                                }\n                            }\n                        }\n                        return null;\n                    }\n                case HostPortal:\n                    popHostContainer(workInProgress);\n                    updateHostContainer(current, workInProgress);\n                    if (current === null) {\n                        preparePortalMount(workInProgress.stateNode.containerInfo);\n                    }\n                    bubbleProperties(workInProgress);\n                    return null;\n                case ContextProvider:\n                    // Pop provider fiber\n                    var context;\n                    {\n                        context = workInProgress.type;\n                    }\n                    popProvider(context, workInProgress);\n                    bubbleProperties(workInProgress);\n                    return null;\n                case IncompleteClassComponent:\n                    {\n                        {\n                            break;\n                        }\n                    }\n                case SuspenseListComponent:\n                    {\n                        popSuspenseListContext(workInProgress);\n                        var renderState = workInProgress.memoizedState;\n                        if (renderState === null) {\n                            // We're running in the default, \"independent\" mode.\n                            // We don't do anything in this mode.\n                            bubbleProperties(workInProgress);\n                            return null;\n                        }\n                        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags$1;\n                        var renderedTail = renderState.rendering;\n                        if (renderedTail === null) {\n                            // We just rendered the head.\n                            if (!didSuspendAlready) {\n                                // This is the first pass. We need to figure out if anything is still\n                                // suspended in the rendered set.\n                                // If new content unsuspended, but there's still some content that\n                                // didn't. Then we need to do a second pass that forces everything\n                                // to keep showing their fallbacks.\n                                // We might be suspended if something in this render pass suspended, or\n                                // something in the previous committed pass suspended. Otherwise,\n                                // there's no chance so we can skip the expensive call to\n                                // findFirstSuspended.\n                                var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags$1);\n                                if (!cannotBeSuspended) {\n                                    var row = workInProgress.child;\n                                    while(row !== null){\n                                        var suspended = findFirstSuspended(row);\n                                        if (suspended !== null) {\n                                            didSuspendAlready = true;\n                                            workInProgress.flags |= DidCapture;\n                                            cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                                            // part of the second pass. In that case nothing will subscribe to\n                                            // its thenables. Instead, we'll transfer its thenables to the\n                                            // SuspenseList so that it can retry if they resolve.\n                                            // There might be multiple of these in the list but since we're\n                                            // going to wait for all of them anyway, it doesn't really matter\n                                            // which ones gets to ping. In theory we could get clever and keep\n                                            // track of how many dependencies remain but it gets tricky because\n                                            // in the meantime, we can add/remove/change items and dependencies.\n                                            // We might bail out of the loop before finding any but that\n                                            // doesn't matter since that means that the other boundaries that\n                                            // we did find already has their listeners attached.\n                                            var _retryQueue = suspended.updateQueue;\n                                            workInProgress.updateQueue = _retryQueue;\n                                            scheduleRetryEffect(workInProgress, _retryQueue); // Rerender the whole list, but this time, we'll force fallbacks\n                                            // to stay in place.\n                                            // Reset the effect flags before doing the second pass since that's now invalid.\n                                            // Reset the child fibers to their original state.\n                                            workInProgress.subtreeFlags = NoFlags$1;\n                                            resetChildFibers(workInProgress, renderLanes); // Set up the Suspense List Context to force suspense and\n                                            // immediately rerender the children.\n                                            pushSuspenseListContext(workInProgress, setShallowSuspenseListContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n                                            return workInProgress.child;\n                                        }\n                                        row = row.sibling;\n                                    }\n                                }\n                                if (renderState.tail !== null && now$1() > getRenderTargetTime()) {\n                                    // We have already passed our CPU deadline but we still have rows\n                                    // left in the tail. We'll just give up further attempts to render\n                                    // the main content and only render fallbacks.\n                                    workInProgress.flags |= DidCapture;\n                                    didSuspendAlready = true;\n                                    cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                                    // to get it started back up to attempt the next item. While in terms\n                                    // of priority this work has the same priority as this current render,\n                                    // it's not part of the same transition once the transition has\n                                    // committed. If it's sync, we still want to yield so that it can be\n                                    // painted. Conceptually, this is really the same as pinging.\n                                    // We can use any RetryLane even if it's the one currently rendering\n                                    // since we're leaving it behind on this node.\n                                    workInProgress.lanes = SomeRetryLane;\n                                }\n                            } else {\n                                cutOffTailIfNeeded(renderState, false);\n                            } // Next we're going to render the tail.\n                        } else {\n                            // Append the rendered row to the child list.\n                            if (!didSuspendAlready) {\n                                var _suspended = findFirstSuspended(renderedTail);\n                                if (_suspended !== null) {\n                                    workInProgress.flags |= DidCapture;\n                                    didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n                                    // get lost if this row ends up dropped during a second pass.\n                                    var _retryQueue2 = _suspended.updateQueue;\n                                    workInProgress.updateQueue = _retryQueue2;\n                                    scheduleRetryEffect(workInProgress, _retryQueue2);\n                                    cutOffTailIfNeeded(renderState, true); // This might have been modified.\n                                    if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n                                    ) {\n                                        // We're done.\n                                        bubbleProperties(workInProgress);\n                                        return null;\n                                    }\n                                } else if (// time we have to render. So rendering one more row would likely\n                                // exceed it.\n                                now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n                                    // We have now passed our CPU deadline and we'll just give up further\n                                    // attempts to render the main content and only render fallbacks.\n                                    // The assumption is that this is usually faster.\n                                    workInProgress.flags |= DidCapture;\n                                    didSuspendAlready = true;\n                                    cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                                    // to get it started back up to attempt the next item. While in terms\n                                    // of priority this work has the same priority as this current render,\n                                    // it's not part of the same transition once the transition has\n                                    // committed. If it's sync, we still want to yield so that it can be\n                                    // painted. Conceptually, this is really the same as pinging.\n                                    // We can use any RetryLane even if it's the one currently rendering\n                                    // since we're leaving it behind on this node.\n                                    workInProgress.lanes = SomeRetryLane;\n                                }\n                            }\n                            if (renderState.isBackwards) {\n                                // The effect list of the backwards tail will have been added\n                                // to the end. This breaks the guarantee that life-cycles fire in\n                                // sibling order but that isn't a strong guarantee promised by React.\n                                // Especially since these might also just pop in during future commits.\n                                // Append to the beginning of the list.\n                                renderedTail.sibling = workInProgress.child;\n                                workInProgress.child = renderedTail;\n                            } else {\n                                var previousSibling = renderState.last;\n                                if (previousSibling !== null) {\n                                    previousSibling.sibling = renderedTail;\n                                } else {\n                                    workInProgress.child = renderedTail;\n                                }\n                                renderState.last = renderedTail;\n                            }\n                        }\n                        if (renderState.tail !== null) {\n                            // We still have tail rows to render.\n                            // Pop a row.\n                            var next = renderState.tail;\n                            renderState.rendering = next;\n                            renderState.tail = next.sibling;\n                            renderState.renderingStartTime = now$1();\n                            next.sibling = null; // Restore the context.\n                            // TODO: We can probably just avoid popping it instead and only\n                            // setting it the first time we go from not suspended to suspended.\n                            var suspenseContext = suspenseStackCursor.current;\n                            if (didSuspendAlready) {\n                                suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n                            } else {\n                                suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n                            }\n                            pushSuspenseListContext(workInProgress, suspenseContext); // Do a pass over the next row.\n                            // Don't bubble properties in this case.\n                            return next;\n                        }\n                        bubbleProperties(workInProgress);\n                        return null;\n                    }\n                case ScopeComponent:\n                    {\n                        break;\n                    }\n                case OffscreenComponent:\n                case LegacyHiddenComponent:\n                    {\n                        popSuspenseHandler(workInProgress);\n                        popHiddenContext(workInProgress);\n                        var _nextState = workInProgress.memoizedState;\n                        var nextIsHidden = _nextState !== null; // Schedule a Visibility effect if the visibility has changed\n                        {\n                            if (current !== null) {\n                                var _prevState = current.memoizedState;\n                                var prevIsHidden = _prevState !== null;\n                                if (prevIsHidden !== nextIsHidden) {\n                                    workInProgress.flags |= Visibility;\n                                }\n                            } else {\n                                // On initial mount, we only need a Visibility effect if the tree\n                                // is hidden.\n                                if (nextIsHidden) {\n                                    workInProgress.flags |= Visibility;\n                                }\n                            }\n                        }\n                        if (!nextIsHidden || !disableLegacyMode) {\n                            bubbleProperties(workInProgress);\n                        } else {\n                            // Don't bubble properties for hidden children unless we're rendering\n                            // at offscreen priority.\n                            if (includesSomeLane(renderLanes, OffscreenLane) && // Also don't bubble if the tree suspended\n                            (workInProgress.flags & DidCapture) === NoLanes) {\n                                bubbleProperties(workInProgress); // Check if there was an insertion or update in the hidden subtree.\n                                // If so, we need to hide those nodes in the commit phase, so\n                                // schedule a visibility effect.\n                                if (workInProgress.subtreeFlags & (Placement | Update)) {\n                                    workInProgress.flags |= Visibility;\n                                }\n                            }\n                        }\n                        var offscreenQueue = workInProgress.updateQueue;\n                        if (offscreenQueue !== null) {\n                            var _retryQueue3 = offscreenQueue.retryQueue;\n                            scheduleRetryEffect(workInProgress, _retryQueue3);\n                        }\n                        {\n                            var _previousCache2 = null;\n                            if (current !== null && current.memoizedState !== null && current.memoizedState.cachePool !== null) {\n                                _previousCache2 = current.memoizedState.cachePool.pool;\n                            }\n                            var _cache2 = null;\n                            if (workInProgress.memoizedState !== null && workInProgress.memoizedState.cachePool !== null) {\n                                _cache2 = workInProgress.memoizedState.cachePool.pool;\n                            }\n                            if (_cache2 !== _previousCache2) {\n                                // Run passive effects to retain/release the cache.\n                                workInProgress.flags |= Passive$1;\n                            }\n                        }\n                        popTransition(workInProgress, current);\n                        return null;\n                    }\n                case CacheComponent:\n                    {\n                        {\n                            var _previousCache3 = null;\n                            if (current !== null) {\n                                _previousCache3 = current.memoizedState.cache;\n                            }\n                            var _cache3 = workInProgress.memoizedState.cache;\n                            if (_cache3 !== _previousCache3) {\n                                // Run passive effects to retain/release the cache.\n                                workInProgress.flags |= Passive$1;\n                            }\n                            popCacheProvider(workInProgress);\n                            bubbleProperties(workInProgress);\n                        }\n                        return null;\n                    }\n                case TracingMarkerComponent:\n                    {\n                        return null;\n                    }\n            }\n            throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n        }\n        function unwindWork(current, workInProgress, renderLanes) {\n            // Note: This intentionally doesn't check if we're hydrating because comparing\n            // to the current tree provider fiber is just as fast and less error-prone.\n            // Ideally we would have a special version of the work loop only\n            // for hydration.\n            popTreeContext(workInProgress);\n            switch(workInProgress.tag){\n                case ClassComponent:\n                    {\n                        var flags = workInProgress.flags;\n                        if (flags & ShouldCapture) {\n                            workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n                            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                                transferActualDuration(workInProgress);\n                            }\n                            return workInProgress;\n                        }\n                        return null;\n                    }\n                case HostRoot:\n                    {\n                        {\n                            popCacheProvider(workInProgress);\n                        }\n                        popHostContainer(workInProgress);\n                        var _flags = workInProgress.flags;\n                        if ((_flags & ShouldCapture) !== NoFlags$1 && (_flags & DidCapture) === NoFlags$1) {\n                            // There was an error during render that wasn't captured by a suspense\n                            // boundary. Do a second pass on the root to unmount the children.\n                            workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n                            return workInProgress;\n                        } // We unwound to the root without completing it. Exit.\n                        return null;\n                    }\n                case HostHoistable:\n                case HostSingleton:\n                case HostComponent:\n                    {\n                        // TODO: popHydrationState\n                        popHostContext(workInProgress);\n                        return null;\n                    }\n                case SuspenseComponent:\n                    {\n                        popSuspenseHandler(workInProgress);\n                        var suspenseState = workInProgress.memoizedState;\n                        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n                            if (workInProgress.alternate === null) {\n                                throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n                            }\n                            resetHydrationState();\n                        }\n                        var _flags2 = workInProgress.flags;\n                        if (_flags2 & ShouldCapture) {\n                            workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n                            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                                transferActualDuration(workInProgress);\n                            }\n                            return workInProgress;\n                        }\n                        return null;\n                    }\n                case SuspenseListComponent:\n                    {\n                        popSuspenseListContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n                        // caught by a nested boundary. If not, it should bubble through.\n                        return null;\n                    }\n                case HostPortal:\n                    popHostContainer(workInProgress);\n                    return null;\n                case ContextProvider:\n                    var context;\n                    {\n                        context = workInProgress.type;\n                    }\n                    popProvider(context, workInProgress);\n                    return null;\n                case OffscreenComponent:\n                case LegacyHiddenComponent:\n                    {\n                        popSuspenseHandler(workInProgress);\n                        popHiddenContext(workInProgress);\n                        popTransition(workInProgress, current);\n                        var _flags3 = workInProgress.flags;\n                        if (_flags3 & ShouldCapture) {\n                            workInProgress.flags = _flags3 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n                            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                                transferActualDuration(workInProgress);\n                            }\n                            return workInProgress;\n                        }\n                        return null;\n                    }\n                case CacheComponent:\n                    {\n                        popCacheProvider(workInProgress);\n                    }\n                    return null;\n                case TracingMarkerComponent:\n                    return null;\n                default:\n                    return null;\n            }\n        }\n        function unwindInterruptedWork(current, interruptedWork, renderLanes) {\n            // Note: This intentionally doesn't check if we're hydrating because comparing\n            // to the current tree provider fiber is just as fast and less error-prone.\n            // Ideally we would have a special version of the work loop only\n            // for hydration.\n            popTreeContext(interruptedWork);\n            switch(interruptedWork.tag){\n                case ClassComponent:\n                    {\n                        break;\n                    }\n                case HostRoot:\n                    {\n                        {\n                            popCacheProvider(interruptedWork);\n                        }\n                        popHostContainer(interruptedWork);\n                        break;\n                    }\n                case HostHoistable:\n                case HostSingleton:\n                case HostComponent:\n                    {\n                        popHostContext(interruptedWork);\n                        break;\n                    }\n                case HostPortal:\n                    popHostContainer(interruptedWork);\n                    break;\n                case SuspenseComponent:\n                    popSuspenseHandler(interruptedWork);\n                    break;\n                case SuspenseListComponent:\n                    popSuspenseListContext(interruptedWork);\n                    break;\n                case ContextProvider:\n                    var context;\n                    {\n                        context = interruptedWork.type;\n                    }\n                    popProvider(context, interruptedWork);\n                    break;\n                case OffscreenComponent:\n                case LegacyHiddenComponent:\n                    popSuspenseHandler(interruptedWork);\n                    popHiddenContext(interruptedWork);\n                    popTransition(interruptedWork, current);\n                    break;\n                case CacheComponent:\n                    {\n                        popCacheProvider(interruptedWork);\n                    }\n                    break;\n            }\n        }\n        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n        {\n            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n        }\n        // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n        var offscreenSubtreeIsHidden = false;\n        var offscreenSubtreeWasHidden = false; // Used to track if a form needs to be reset at the end of the mutation phase.\n        var needsFormReset = false;\n        var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n        var nextEffect = null; // Used for Profiling builds to track updaters.\n        var inProgressLanes = null;\n        var inProgressRoot = null;\n        function shouldProfile(current) {\n            return (current.mode & ProfileMode) !== NoMode && (getExecutionContext() & CommitContext) !== NoContext;\n        }\n        function callComponentWillUnmountWithTimer(current, instance) {\n            instance.props = resolveClassComponentProps(current.type, current.memoizedProps);\n            instance.state = current.memoizedState;\n            if (shouldProfile(current)) {\n                try {\n                    startLayoutEffectTimer();\n                    instance.componentWillUnmount();\n                } finally{\n                    recordLayoutEffectDuration(current);\n                }\n            } else {\n                instance.componentWillUnmount();\n            }\n        } // Capture errors so they don't interrupt unmounting.\n        function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n            try {\n                callComponentWillUnmountWithTimer(current, instance);\n            } catch (error) {\n                captureCommitPhaseError(current, nearestMountedAncestor, error);\n            }\n        } // Capture errors so they don't interrupt mounting.\n        function safelyAttachRef(current, nearestMountedAncestor) {\n            try {\n                commitAttachRef(current);\n            } catch (error) {\n                captureCommitPhaseError(current, nearestMountedAncestor, error);\n            }\n        }\n        function safelyDetachRef(current, nearestMountedAncestor) {\n            var ref = current.ref;\n            var refCleanup = current.refCleanup;\n            if (ref !== null) {\n                if (typeof refCleanup === 'function') {\n                    try {\n                        if (shouldProfile(current)) {\n                            try {\n                                startLayoutEffectTimer();\n                                refCleanup();\n                            } finally{\n                                recordLayoutEffectDuration(current);\n                            }\n                        } else {\n                            refCleanup();\n                        }\n                    } catch (error) {\n                        captureCommitPhaseError(current, nearestMountedAncestor, error);\n                    } finally{\n                        // `refCleanup` has been called. Nullify all references to it to prevent double invocation.\n                        current.refCleanup = null;\n                        var finishedWork = current.alternate;\n                        if (finishedWork != null) {\n                            finishedWork.refCleanup = null;\n                        }\n                    }\n                } else if (typeof ref === 'function') {\n                    try {\n                        if (shouldProfile(current)) {\n                            try {\n                                startLayoutEffectTimer();\n                                ref(null);\n                            } finally{\n                                recordLayoutEffectDuration(current);\n                            }\n                        } else {\n                            ref(null);\n                        }\n                    } catch (error) {\n                        captureCommitPhaseError(current, nearestMountedAncestor, error);\n                    }\n                } else {\n                    // $FlowFixMe[incompatible-use] unable to narrow type to RefObject\n                    ref.current = null;\n                }\n            }\n        }\n        function safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n            try {\n                destroy();\n            } catch (error) {\n                captureCommitPhaseError(current, nearestMountedAncestor, error);\n            }\n        }\n        var shouldFireAfterActiveInstanceBlur = false;\n        function commitBeforeMutationEffects(root, firstChild) {\n            prepareForCommit(root.containerInfo);\n            nextEffect = firstChild;\n            commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n            var shouldFire = shouldFireAfterActiveInstanceBlur;\n            shouldFireAfterActiveInstanceBlur = false;\n            return shouldFire;\n        }\n        function commitBeforeMutationEffects_begin() {\n            while(nextEffect !== null){\n                var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n                var child = fiber.child;\n                if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags$1 && child !== null) {\n                    child.return = fiber;\n                    nextEffect = child;\n                } else {\n                    commitBeforeMutationEffects_complete();\n                }\n            }\n        }\n        function commitBeforeMutationEffects_complete() {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                try {\n                    if (true) {\n                        runWithFiberInDEV(fiber, commitBeforeMutationEffectsOnFiber, fiber);\n                    }\n                } catch (error) {\n                    captureCommitPhaseError(fiber, fiber.return, error);\n                }\n                var sibling = fiber.sibling;\n                if (sibling !== null) {\n                    sibling.return = fiber.return;\n                    nextEffect = sibling;\n                    return;\n                }\n                nextEffect = fiber.return;\n            }\n        }\n        function commitBeforeMutationEffectsOnFiber(finishedWork) {\n            var current = finishedWork.alternate;\n            var flags = finishedWork.flags;\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                    {\n                        break;\n                    }\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        break;\n                    }\n                case ClassComponent:\n                    {\n                        if ((flags & Snapshot) !== NoFlags$1) {\n                            if (current !== null) {\n                                var prevProps = current.memoizedProps;\n                                var prevState = current.memoizedState;\n                                var instance = finishedWork.stateNode; // We could update instance props and state here,\n                                // but instead we rely on them being set during last render.\n                                // TODO: revisit this when we implement resuming.\n                                {\n                                    if (!finishedWork.type.defaultProps && !('ref' in finishedWork.memoizedProps) && !didWarnAboutReassigningProps) {\n                                        if (instance.props !== finishedWork.memoizedProps) {\n                                            error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                                        }\n                                        if (instance.state !== finishedWork.memoizedState) {\n                                            error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                                        }\n                                    }\n                                }\n                                var snapshot = instance.getSnapshotBeforeUpdate(resolveClassComponentProps(finishedWork.type, prevProps), prevState);\n                                {\n                                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n                                    if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                                        didWarnSet.add(finishedWork.type);\n                                        error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n                                    }\n                                }\n                                instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n                            }\n                        }\n                        break;\n                    }\n                case HostRoot:\n                    {\n                        if ((flags & Snapshot) !== NoFlags$1) {\n                            if (supportsMutation) {\n                                var root = finishedWork.stateNode;\n                                clearContainer(root.containerInfo);\n                            }\n                        }\n                        break;\n                    }\n                case HostComponent:\n                case HostHoistable:\n                case HostSingleton:\n                case HostText:\n                case HostPortal:\n                case IncompleteClassComponent:\n                    break;\n                default:\n                    {\n                        if ((flags & Snapshot) !== NoFlags$1) {\n                            throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n                        }\n                    }\n            }\n        }\n        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n            var updateQueue = finishedWork.updateQueue;\n            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n            if (lastEffect !== null) {\n                var firstEffect = lastEffect.next;\n                var effect = firstEffect;\n                do {\n                    if ((effect.tag & flags) === flags) {\n                        // Unmount\n                        var inst = effect.inst;\n                        var destroy = inst.destroy;\n                        if (destroy !== undefined) {\n                            inst.destroy = undefined;\n                            {\n                                if ((flags & Passive) !== NoFlags) {\n                                    markComponentPassiveEffectUnmountStarted(finishedWork);\n                                } else if ((flags & Layout) !== NoFlags) {\n                                    markComponentLayoutEffectUnmountStarted(finishedWork);\n                                }\n                            }\n                            {\n                                if ((flags & Insertion) !== NoFlags) {\n                                    setIsRunningInsertionEffect(true);\n                                }\n                            }\n                            safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n                            {\n                                if ((flags & Insertion) !== NoFlags) {\n                                    setIsRunningInsertionEffect(false);\n                                }\n                            }\n                            {\n                                if ((flags & Passive) !== NoFlags) {\n                                    markComponentPassiveEffectUnmountStopped();\n                                } else if ((flags & Layout) !== NoFlags) {\n                                    markComponentLayoutEffectUnmountStopped();\n                                }\n                            }\n                        }\n                    }\n                    effect = effect.next;\n                }while (effect !== firstEffect);\n            }\n        }\n        function commitHookEffectListMount(flags, finishedWork) {\n            var updateQueue = finishedWork.updateQueue;\n            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n            if (lastEffect !== null) {\n                var firstEffect = lastEffect.next;\n                var effect = firstEffect;\n                do {\n                    if ((effect.tag & flags) === flags) {\n                        {\n                            if ((flags & Passive) !== NoFlags) {\n                                markComponentPassiveEffectMountStarted(finishedWork);\n                            } else if ((flags & Layout) !== NoFlags) {\n                                markComponentLayoutEffectMountStarted(finishedWork);\n                            }\n                        }\n                        var create = effect.create;\n                        {\n                            if ((flags & Insertion) !== NoFlags) {\n                                setIsRunningInsertionEffect(true);\n                            }\n                        }\n                        var inst = effect.inst;\n                        var destroy = create();\n                        inst.destroy = destroy;\n                        {\n                            if ((flags & Insertion) !== NoFlags) {\n                                setIsRunningInsertionEffect(false);\n                            }\n                        }\n                        {\n                            if ((flags & Passive) !== NoFlags) {\n                                markComponentPassiveEffectMountStopped();\n                            } else if ((flags & Layout) !== NoFlags) {\n                                markComponentLayoutEffectMountStopped();\n                            }\n                        }\n                        {\n                            if (destroy !== undefined && typeof destroy !== 'function') {\n                                var hookName = void 0;\n                                if ((effect.tag & Layout) !== NoFlags$1) {\n                                    hookName = 'useLayoutEffect';\n                                } else if ((effect.tag & Insertion) !== NoFlags$1) {\n                                    hookName = 'useInsertionEffect';\n                                } else {\n                                    hookName = 'useEffect';\n                                }\n                                var addendum = void 0;\n                                if (destroy === null) {\n                                    addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n                                } else if (typeof destroy.then === 'function') {\n                                    addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching';\n                                } else {\n                                    addendum = ' You returned: ' + destroy;\n                                }\n                                error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n                            }\n                        }\n                    }\n                    effect = effect.next;\n                }while (effect !== firstEffect);\n            }\n        }\n        function commitPassiveEffectDurations(finishedRoot, finishedWork) {\n            if (getExecutionContext() & CommitContext) {\n                // Only Profilers with work in their subtree will have an Update effect scheduled.\n                if ((finishedWork.flags & Update) !== NoFlags$1) {\n                    switch(finishedWork.tag){\n                        case Profiler:\n                            {\n                                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n                                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n                                // It does not get reset until the start of the next commit phase.\n                                var commitTime = getCommitTime();\n                                var phase = finishedWork.alternate === null ? 'mount' : 'update';\n                                {\n                                    if (isCurrentUpdateNested()) {\n                                        phase = 'nested-update';\n                                    }\n                                }\n                                if (typeof onPostCommit === 'function') {\n                                    onPostCommit(id, phase, passiveEffectDuration, commitTime);\n                                } // Bubble times to the next nearest ancestor Profiler.\n                                // After we process that Profiler, we'll bubble further up.\n                                var parentFiber = finishedWork.return;\n                                outer: while(parentFiber !== null){\n                                    switch(parentFiber.tag){\n                                        case HostRoot:\n                                            var root = parentFiber.stateNode;\n                                            root.passiveEffectDuration += passiveEffectDuration;\n                                            break outer;\n                                        case Profiler:\n                                            var parentStateNode = parentFiber.stateNode;\n                                            parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                                            break outer;\n                                    }\n                                    parentFiber = parentFiber.return;\n                                }\n                                break;\n                            }\n                    }\n                }\n            }\n        }\n        function commitHookLayoutEffects(finishedWork, hookFlags) {\n            // At this point layout effects have already been destroyed (during mutation phase).\n            // This is done to prevent sibling component effects from interfering with each other,\n            // e.g. a destroy function in one component should never override a ref set\n            // by a create function in another component during the same commit.\n            if (shouldProfile(finishedWork)) {\n                try {\n                    startLayoutEffectTimer();\n                    commitHookEffectListMount(hookFlags, finishedWork);\n                } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n                recordLayoutEffectDuration(finishedWork);\n            } else {\n                try {\n                    commitHookEffectListMount(hookFlags, finishedWork);\n                } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n            }\n        }\n        function commitClassLayoutLifecycles(finishedWork, current) {\n            var instance = finishedWork.stateNode;\n            if (current === null) {\n                // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n                {\n                    if (!finishedWork.type.defaultProps && !('ref' in finishedWork.memoizedProps) && !didWarnAboutReassigningProps) {\n                        if (instance.props !== finishedWork.memoizedProps) {\n                            error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                        if (instance.state !== finishedWork.memoizedState) {\n                            error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                    }\n                }\n                if (shouldProfile(finishedWork)) {\n                    try {\n                        startLayoutEffectTimer();\n                        instance.componentDidMount();\n                    } catch (error) {\n                        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                    }\n                    recordLayoutEffectDuration(finishedWork);\n                } else {\n                    try {\n                        instance.componentDidMount();\n                    } catch (error) {\n                        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                    }\n                }\n            } else {\n                var prevProps = resolveClassComponentProps(finishedWork.type, current.memoizedProps);\n                var prevState = current.memoizedState; // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n                {\n                    if (!finishedWork.type.defaultProps && !('ref' in finishedWork.memoizedProps) && !didWarnAboutReassigningProps) {\n                        if (instance.props !== finishedWork.memoizedProps) {\n                            error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                        if (instance.state !== finishedWork.memoizedState) {\n                            error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                    }\n                }\n                if (shouldProfile(finishedWork)) {\n                    try {\n                        startLayoutEffectTimer();\n                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                    } catch (error) {\n                        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                    }\n                    recordLayoutEffectDuration(finishedWork);\n                } else {\n                    try {\n                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                    } catch (error) {\n                        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                    }\n                }\n            }\n        }\n        function commitClassCallbacks(finishedWork) {\n            // TODO: I think this is now always non-null by the time it reaches the\n            // commit phase. Consider removing the type check.\n            var updateQueue = finishedWork.updateQueue;\n            if (updateQueue !== null) {\n                var instance = finishedWork.stateNode;\n                {\n                    if (!finishedWork.type.defaultProps && !('ref' in finishedWork.memoizedProps) && !didWarnAboutReassigningProps) {\n                        if (instance.props !== finishedWork.memoizedProps) {\n                            error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                        if (instance.state !== finishedWork.memoizedState) {\n                            error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                    }\n                }\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n                try {\n                    commitCallbacks(updateQueue, instance);\n                } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n            }\n        }\n        function commitHostComponentMount(finishedWork) {\n            var type = finishedWork.type;\n            var props = finishedWork.memoizedProps;\n            var instance = finishedWork.stateNode;\n            try {\n                commitMount(instance, type, props, finishedWork);\n            } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n        }\n        function commitProfilerUpdate(finishedWork, current) {\n            if (getExecutionContext() & CommitContext) {\n                try {\n                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;\n                    var effectDuration = finishedWork.stateNode.effectDuration;\n                    var commitTime = getCommitTime();\n                    var phase = current === null ? 'mount' : 'update';\n                    if (enableProfilerNestedUpdatePhase) {\n                        if (isCurrentUpdateNested()) {\n                            phase = 'nested-update';\n                        }\n                    }\n                    if (typeof onRender === 'function') {\n                        onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n                    }\n                    if (enableProfilerCommitHooks) {\n                        if (typeof onCommit === 'function') {\n                            onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n                        } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n                        // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n                        // because the effect is also where times bubble to parent Profilers.\n                        enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n                        // Do not reset these values until the next render so DevTools has a chance to read them first.\n                        var parentFiber = finishedWork.return;\n                        outer: while(parentFiber !== null){\n                            switch(parentFiber.tag){\n                                case HostRoot:\n                                    var root = parentFiber.stateNode;\n                                    root.effectDuration += effectDuration;\n                                    break outer;\n                                case Profiler:\n                                    var parentStateNode = parentFiber.stateNode;\n                                    parentStateNode.effectDuration += effectDuration;\n                                    break outer;\n                            }\n                            parentFiber = parentFiber.return;\n                        }\n                    }\n                } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n            }\n        }\n        function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n            // When updating this function, also update reappearLayoutEffects, which does\n            // most of the same things when an offscreen tree goes from hidden -> visible.\n            var flags = finishedWork.flags;\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork, committedLanes);\n                        if (flags & Update) {\n                            commitHookLayoutEffects(finishedWork, Layout | HasEffect);\n                        }\n                        break;\n                    }\n                case ClassComponent:\n                    {\n                        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork, committedLanes);\n                        if (flags & Update) {\n                            commitClassLayoutLifecycles(finishedWork, current);\n                        }\n                        if (flags & Callback) {\n                            commitClassCallbacks(finishedWork);\n                        }\n                        if (flags & Ref) {\n                            safelyAttachRef(finishedWork, finishedWork.return);\n                        }\n                        break;\n                    }\n                case HostRoot:\n                    {\n                        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork, committedLanes);\n                        if (flags & Callback) {\n                            // TODO: I think this is now always non-null by the time it reaches the\n                            // commit phase. Consider removing the type check.\n                            var updateQueue = finishedWork.updateQueue;\n                            if (updateQueue !== null) {\n                                var instance = null;\n                                if (finishedWork.child !== null) {\n                                    switch(finishedWork.child.tag){\n                                        case HostSingleton:\n                                        case HostComponent:\n                                            instance = getPublicInstance(finishedWork.child.stateNode);\n                                            break;\n                                        case ClassComponent:\n                                            instance = finishedWork.child.stateNode;\n                                            break;\n                                    }\n                                }\n                                try {\n                                    commitCallbacks(updateQueue, instance);\n                                } catch (error) {\n                                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                                }\n                            }\n                        }\n                        break;\n                    }\n                case HostHoistable:\n                    {\n                        if (supportsResources) {\n                            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork, committedLanes);\n                            if (flags & Ref) {\n                                safelyAttachRef(finishedWork, finishedWork.return);\n                            }\n                            break;\n                        } // Fall through\n                    }\n                case HostSingleton:\n                case HostComponent:\n                    {\n                        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork, committedLanes); // Renderers may schedule work to be done after host components are mounted\n                        // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n                        // These effects should only be committed when components are first mounted,\n                        // aka when there is no current/alternate.\n                        if (current === null && flags & Update) {\n                            commitHostComponentMount(finishedWork);\n                        }\n                        if (flags & Ref) {\n                            safelyAttachRef(finishedWork, finishedWork.return);\n                        }\n                        break;\n                    }\n                case Profiler:\n                    {\n                        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork, committedLanes); // TODO: Should this fire inside an offscreen tree? Or should it wait to\n                        // fire when the tree becomes visible again.\n                        if (flags & Update) {\n                            commitProfilerUpdate(finishedWork, current);\n                        }\n                        break;\n                    }\n                case SuspenseComponent:\n                    {\n                        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork, committedLanes);\n                        if (flags & Update) {\n                            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n                        }\n                        break;\n                    }\n                case OffscreenComponent:\n                    {\n                        var isModernRoot = disableLegacyMode;\n                        if (isModernRoot) {\n                            var isHidden = finishedWork.memoizedState !== null;\n                            var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n                            if (newOffscreenSubtreeIsHidden) ;\n                            else {\n                                // The Offscreen tree is visible.\n                                var wasHidden = current !== null && current.memoizedState !== null;\n                                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n                                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n                                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n                                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n                                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n                                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n                                    // This is the root of a reappearing boundary. As we continue\n                                    // traversing the layout effects, we must also re-mount layout\n                                    // effects that were unmounted when the Offscreen subtree was\n                                    // hidden. So this is a superset of the normal commitLayoutEffects.\n                                    var includeWorkInProgressEffects = (finishedWork.subtreeFlags & LayoutMask) !== NoFlags$1;\n                                    recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n                                } else {\n                                    recursivelyTraverseLayoutEffects(finishedRoot, finishedWork, committedLanes);\n                                }\n                                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n                                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n                            }\n                        } else {\n                            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork, committedLanes);\n                        }\n                        if (flags & Ref) {\n                            var props = finishedWork.memoizedProps;\n                            if (props.mode === 'manual') {\n                                safelyAttachRef(finishedWork, finishedWork.return);\n                            } else {\n                                safelyDetachRef(finishedWork, finishedWork.return);\n                            }\n                        }\n                        break;\n                    }\n                default:\n                    {\n                        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork, committedLanes);\n                        break;\n                    }\n            }\n        }\n        function hideOrUnhideAllChildren(finishedWork, isHidden) {\n            // Only hide or unhide the top-most host nodes.\n            var hostSubtreeRoot = null;\n            if (supportsMutation) {\n                // We only have the top Fiber that was inserted but we need to recurse down its\n                // children to find all the terminal nodes.\n                var node = finishedWork;\n                while(true){\n                    if (node.tag === HostComponent || (supportsResources ? node.tag === HostHoistable : false) || (supportsSingletons ? node.tag === HostSingleton : false)) {\n                        if (hostSubtreeRoot === null) {\n                            hostSubtreeRoot = node;\n                            try {\n                                var instance = node.stateNode;\n                                if (isHidden) {\n                                    hideInstance(instance);\n                                } else {\n                                    unhideInstance(node.stateNode, node.memoizedProps);\n                                }\n                            } catch (error) {\n                                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                            }\n                        }\n                    } else if (node.tag === HostText) {\n                        if (hostSubtreeRoot === null) {\n                            try {\n                                var _instance = node.stateNode;\n                                if (isHidden) {\n                                    hideTextInstance(_instance);\n                                } else {\n                                    unhideTextInstance(_instance, node.memoizedProps);\n                                }\n                            } catch (error) {\n                                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                            }\n                        }\n                    } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;\n                    else if (node.child !== null) {\n                        node.child.return = node;\n                        node = node.child;\n                        continue;\n                    }\n                    if (node === finishedWork) {\n                        return;\n                    }\n                    while(node.sibling === null){\n                        if (node.return === null || node.return === finishedWork) {\n                            return;\n                        }\n                        if (hostSubtreeRoot === node) {\n                            hostSubtreeRoot = null;\n                        }\n                        node = node.return;\n                    }\n                    if (hostSubtreeRoot === node) {\n                        hostSubtreeRoot = null;\n                    }\n                    node.sibling.return = node.return;\n                    node = node.sibling;\n                }\n            }\n        }\n        function commitAttachRef(finishedWork) {\n            var ref = finishedWork.ref;\n            if (ref !== null) {\n                var instance = finishedWork.stateNode;\n                var instanceToUse;\n                switch(finishedWork.tag){\n                    case HostHoistable:\n                    case HostSingleton:\n                    case HostComponent:\n                        instanceToUse = getPublicInstance(instance);\n                        break;\n                    default:\n                        instanceToUse = instance;\n                } // Moved outside to ensure DCE works with this flag\n                if (typeof ref === 'function') {\n                    if (shouldProfile(finishedWork)) {\n                        try {\n                            startLayoutEffectTimer();\n                            finishedWork.refCleanup = ref(instanceToUse);\n                        } finally{\n                            recordLayoutEffectDuration(finishedWork);\n                        }\n                    } else {\n                        finishedWork.refCleanup = ref(instanceToUse);\n                    }\n                } else {\n                    {\n                        // TODO: We should move these warnings to happen during the render\n                        // phase (markRef).\n                        if (typeof ref === 'string') {\n                            error('String refs are no longer supported.');\n                        } else if (!ref.hasOwnProperty('current')) {\n                            error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n                        }\n                    }\n                    ref.current = instanceToUse;\n                }\n            }\n        }\n        function detachFiberMutation(fiber) {\n            // Cut off the return pointer to disconnect it from the tree.\n            // This enables us to detect and warn against state updates on an unmounted component.\n            // It also prevents events from bubbling from within disconnected components.\n            //\n            // Ideally, we should also clear the child pointer of the parent alternate to let this\n            // get GC:ed but we don't know which for sure which parent is the current\n            // one so we'll settle for GC:ing the subtree of this child.\n            // This child itself will be GC:ed when the parent updates the next time.\n            //\n            // Note that we can't clear child or sibling pointers yet.\n            // They're needed for passive effects and for findDOMNode.\n            // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n            //\n            // Don't reset the alternate yet, either. We need that so we can detach the\n            // alternate's fields in the passive phase. Clearing the return pointer is\n            // sufficient for findDOMNode semantics.\n            var alternate = fiber.alternate;\n            if (alternate !== null) {\n                alternate.return = null;\n            }\n            fiber.return = null;\n        }\n        function detachFiberAfterEffects(fiber) {\n            var alternate = fiber.alternate;\n            if (alternate !== null) {\n                fiber.alternate = null;\n                detachFiberAfterEffects(alternate);\n            } // Clear cyclical Fiber fields. This level alone is designed to roughly\n            // approximate the planned Fiber refactor. In that world, `setState` will be\n            // bound to a special \"instance\" object instead of a Fiber. The Instance\n            // object will not have any of these fields. It will only be connected to\n            // the fiber tree via a single link at the root. So if this level alone is\n            // sufficient to fix memory issues, that bodes well for our plans.\n            fiber.child = null;\n            fiber.deletions = null;\n            fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n            // tree, which has its own pointers to children, parents, and siblings.\n            // The other host nodes also point back to fibers, so we should detach that\n            // one, too.\n            if (fiber.tag === HostComponent) {\n                var hostInstance = fiber.stateNode;\n                if (hostInstance !== null) {\n                    detachDeletedInstance(hostInstance);\n                }\n            }\n            fiber.stateNode = null;\n            {\n                fiber._debugOwner = null;\n            }\n            // disconnected the fiber from the tree. So even if something leaks this\n            // particular fiber, it won't leak anything else.\n            fiber.return = null;\n            fiber.dependencies = null;\n            fiber.memoizedProps = null;\n            fiber.memoizedState = null;\n            fiber.pendingProps = null;\n            fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n            fiber.updateQueue = null;\n        }\n        function emptyPortalContainer(current) {\n            if (!supportsPersistence) {\n                return;\n            }\n            var portal = current.stateNode;\n            var containerInfo = portal.containerInfo;\n            var emptyChildSet = createContainerChildSet();\n            replaceContainerChildren(containerInfo, emptyChildSet);\n        }\n        function getHostParentFiber(fiber) {\n            var parent = fiber.return;\n            while(parent !== null){\n                if (isHostParent(parent)) {\n                    return parent;\n                }\n                parent = parent.return;\n            }\n            throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n        }\n        function isHostParent(fiber) {\n            return fiber.tag === HostComponent || fiber.tag === HostRoot || (supportsResources ? fiber.tag === HostHoistable : false) || (supportsSingletons ? fiber.tag === HostSingleton : false) || fiber.tag === HostPortal;\n        }\n        function getHostSibling(fiber) {\n            // We're going to search forward into the tree until we find a sibling host\n            // node. Unfortunately, if multiple insertions are done in a row we have to\n            // search past them. This leads to exponential search for the next sibling.\n            // TODO: Find a more efficient way to do this.\n            var node = fiber;\n            siblings: while(true){\n                // If we didn't find anything, let's try the next sibling.\n                while(node.sibling === null){\n                    if (node.return === null || isHostParent(node.return)) {\n                        // If we pop out of the root or hit the parent the fiber we are the\n                        // last sibling.\n                        return null;\n                    } // $FlowFixMe[incompatible-type] found when upgrading Flow\n                    node = node.return;\n                }\n                node.sibling.return = node.return;\n                node = node.sibling;\n                while(node.tag !== HostComponent && node.tag !== HostText && (!supportsSingletons ? true : node.tag !== HostSingleton) && node.tag !== DehydratedFragment){\n                    // If it is not host node and, we might have a host node inside it.\n                    // Try to search down until we find one.\n                    if (node.flags & Placement) {\n                        continue siblings;\n                    } // If we don't have a child, try the siblings instead.\n                    // We also skip portals because they are not part of this host tree.\n                    if (node.child === null || node.tag === HostPortal) {\n                        continue siblings;\n                    } else {\n                        node.child.return = node;\n                        node = node.child;\n                    }\n                } // Check if this host node is stable or about to be placed.\n                if (!(node.flags & Placement)) {\n                    // Found it!\n                    return node.stateNode;\n                }\n            }\n        }\n        function commitPlacement(finishedWork) {\n            if (!supportsMutation) {\n                return;\n            }\n            if (supportsSingletons) {\n                if (finishedWork.tag === HostSingleton) {\n                    // Singletons are already in the Host and don't need to be placed\n                    // Since they operate somewhat like Portals though their children will\n                    // have Placement and will get placed inside them\n                    return;\n                }\n            } // Recursively insert all host nodes into the parent.\n            var parentFiber = getHostParentFiber(finishedWork);\n            switch(parentFiber.tag){\n                case HostSingleton:\n                    {\n                        if (supportsSingletons) {\n                            var parent = parentFiber.stateNode;\n                            var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n                            // children to find all the terminal nodes.\n                            insertOrAppendPlacementNode(finishedWork, before, parent);\n                            break;\n                        } // Fall through\n                    }\n                case HostComponent:\n                    {\n                        var _parent = parentFiber.stateNode;\n                        if (parentFiber.flags & ContentReset) {\n                            // Reset the text content of the parent before doing any insertions\n                            resetTextContent(_parent); // Clear ContentReset from the effect tag\n                            parentFiber.flags &= ~ContentReset;\n                        }\n                        var _before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n                        // children to find all the terminal nodes.\n                        insertOrAppendPlacementNode(finishedWork, _before, _parent);\n                        break;\n                    }\n                case HostRoot:\n                case HostPortal:\n                    {\n                        var _parent2 = parentFiber.stateNode.containerInfo;\n                        var _before2 = getHostSibling(finishedWork);\n                        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before2, _parent2);\n                        break;\n                    }\n                default:\n                    throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n            }\n        }\n        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n            var tag = node.tag;\n            var isHost = tag === HostComponent || tag === HostText;\n            if (isHost) {\n                var stateNode = node.stateNode;\n                if (before) {\n                    insertInContainerBefore(parent, stateNode, before);\n                } else {\n                    appendChildToContainer(parent, stateNode);\n                }\n            } else if (tag === HostPortal || (supportsSingletons ? tag === HostSingleton : false)) ;\n            else {\n                var child = node.child;\n                if (child !== null) {\n                    insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n                    var sibling = child.sibling;\n                    while(sibling !== null){\n                        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n                        sibling = sibling.sibling;\n                    }\n                }\n            }\n        }\n        function insertOrAppendPlacementNode(node, before, parent) {\n            var tag = node.tag;\n            var isHost = tag === HostComponent || tag === HostText;\n            if (isHost) {\n                var stateNode = node.stateNode;\n                if (before) {\n                    insertBefore(parent, stateNode, before);\n                } else {\n                    appendChild(parent, stateNode);\n                }\n            } else if (tag === HostPortal || (supportsSingletons ? tag === HostSingleton : false)) ;\n            else {\n                var child = node.child;\n                if (child !== null) {\n                    insertOrAppendPlacementNode(child, before, parent);\n                    var sibling = child.sibling;\n                    while(sibling !== null){\n                        insertOrAppendPlacementNode(sibling, before, parent);\n                        sibling = sibling.sibling;\n                    }\n                }\n            }\n        } // These are tracked on the stack as we recursively traverse a\n        // deleted subtree.\n        // TODO: Update these during the whole mutation phase, not just during\n        // a deletion.\n        var hostParent = null;\n        var hostParentIsContainer = false;\n        function commitDeletionEffects(root, returnFiber, deletedFiber) {\n            if (supportsMutation) {\n                // We only have the top Fiber that was deleted but we need to recurse down its\n                // children to find all the terminal nodes.\n                // Recursively delete all host nodes from the parent, detach refs, clean\n                // up mounted layout effects, and call componentWillUnmount.\n                // We only need to remove the topmost host child in each branch. But then we\n                // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n                // could split this into two separate traversals functions, where the second\n                // one doesn't include any removeChild logic. This is maybe the same\n                // function as \"disappearLayoutEffects\" (or whatever that turns into after\n                // the layout phase is refactored to use recursion).\n                // Before starting, find the nearest host parent on the stack so we know\n                // which instance/container to remove the children from.\n                // TODO: Instead of searching up the fiber return path on every deletion, we\n                // can track the nearest host component on the JS stack as we traverse the\n                // tree during the commit phase. This would make insertions faster, too.\n                var parent = returnFiber;\n                findParent: while(parent !== null){\n                    switch(parent.tag){\n                        case HostSingleton:\n                        case HostComponent:\n                            {\n                                hostParent = parent.stateNode;\n                                hostParentIsContainer = false;\n                                break findParent;\n                            }\n                        case HostRoot:\n                            {\n                                hostParent = parent.stateNode.containerInfo;\n                                hostParentIsContainer = true;\n                                break findParent;\n                            }\n                        case HostPortal:\n                            {\n                                hostParent = parent.stateNode.containerInfo;\n                                hostParentIsContainer = true;\n                                break findParent;\n                            }\n                    }\n                    parent = parent.return;\n                }\n                if (hostParent === null) {\n                    throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n                }\n                commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n                hostParent = null;\n                hostParentIsContainer = false;\n            } else {\n                // Detach refs and call componentWillUnmount() on the whole subtree.\n                commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n            }\n            detachFiberMutation(deletedFiber);\n        }\n        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\n            // TODO: Use a static flag to skip trees that don't have unmount effects\n            var child = parent.child;\n            while(child !== null){\n                commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n                child = child.sibling;\n            }\n        }\n        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\n            onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\n            // into their subtree. There are simpler cases in the inner switch\n            // that don't modify the stack.\n            switch(deletedFiber.tag){\n                case HostHoistable:\n                    {\n                        if (supportsResources) {\n                            if (!offscreenSubtreeWasHidden) {\n                                safelyDetachRef(deletedFiber, nearestMountedAncestor);\n                            }\n                            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                            if (deletedFiber.memoizedState) {\n                                releaseResource(deletedFiber.memoizedState);\n                            } else if (deletedFiber.stateNode) {\n                                unmountHoistable(deletedFiber.stateNode);\n                            }\n                            return;\n                        } // Fall through\n                    }\n                case HostSingleton:\n                    {\n                        if (supportsSingletons) {\n                            if (!offscreenSubtreeWasHidden) {\n                                safelyDetachRef(deletedFiber, nearestMountedAncestor);\n                            }\n                            var prevHostParent = hostParent;\n                            var prevHostParentIsContainer = hostParentIsContainer;\n                            hostParent = deletedFiber.stateNode;\n                            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber); // Normally this is called in passive unmount effect phase however with\n                            // HostSingleton we warn if you acquire one that is already associated to\n                            // a different fiber. To increase our chances of avoiding this, specifically\n                            // if you keyed a HostSingleton so there will be a delete followed by a Placement\n                            // we treat detach eagerly here\n                            releaseSingletonInstance(deletedFiber.stateNode);\n                            hostParent = prevHostParent;\n                            hostParentIsContainer = prevHostParentIsContainer;\n                            return;\n                        } // Fall through\n                    }\n                case HostComponent:\n                    {\n                        if (!offscreenSubtreeWasHidden) {\n                            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n                        } // Intentional fallthrough to next branch\n                    }\n                case HostText:\n                    {\n                        // We only need to remove the nearest host child. Set the host parent\n                        // to `null` on the stack to indicate that nested children don't\n                        // need to be removed.\n                        if (supportsMutation) {\n                            var _prevHostParent = hostParent;\n                            var _prevHostParentIsContainer = hostParentIsContainer;\n                            hostParent = null;\n                            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                            hostParent = _prevHostParent;\n                            hostParentIsContainer = _prevHostParentIsContainer;\n                            if (hostParent !== null) {\n                                // Now that all the child effects have unmounted, we can remove the\n                                // node from the tree.\n                                if (hostParentIsContainer) {\n                                    removeChildFromContainer(hostParent, deletedFiber.stateNode);\n                                } else {\n                                    removeChild(hostParent, deletedFiber.stateNode);\n                                }\n                            }\n                        } else {\n                            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                        }\n                        return;\n                    }\n                case DehydratedFragment:\n                    {\n                        // Delete the dehydrated suspense boundary and all of its content.\n                        if (supportsMutation) {\n                            if (hostParent !== null) {\n                                if (hostParentIsContainer) {\n                                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);\n                                } else {\n                                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);\n                                }\n                            }\n                        }\n                        return;\n                    }\n                case HostPortal:\n                    {\n                        if (supportsMutation) {\n                            // When we go into a portal, it becomes the parent to remove from.\n                            var _prevHostParent2 = hostParent;\n                            var _prevHostParentIsContainer2 = hostParentIsContainer;\n                            hostParent = deletedFiber.stateNode.containerInfo;\n                            hostParentIsContainer = true;\n                            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                            hostParent = _prevHostParent2;\n                            hostParentIsContainer = _prevHostParentIsContainer2;\n                        } else {\n                            emptyPortalContainer(deletedFiber);\n                            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                        }\n                        return;\n                    }\n                case FunctionComponent:\n                case ForwardRef:\n                case MemoComponent:\n                case SimpleMemoComponent:\n                    {\n                        if (!offscreenSubtreeWasHidden) {\n                            var updateQueue = deletedFiber.updateQueue;\n                            if (updateQueue !== null) {\n                                var lastEffect = updateQueue.lastEffect;\n                                if (lastEffect !== null) {\n                                    var firstEffect = lastEffect.next;\n                                    var effect = firstEffect;\n                                    do {\n                                        var tag = effect.tag;\n                                        var inst = effect.inst;\n                                        var destroy = inst.destroy;\n                                        if (destroy !== undefined) {\n                                            if ((tag & Insertion) !== NoFlags) {\n                                                inst.destroy = undefined;\n                                                safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                                            } else if ((tag & Layout) !== NoFlags) {\n                                                {\n                                                    markComponentLayoutEffectUnmountStarted(deletedFiber);\n                                                }\n                                                if (shouldProfile(deletedFiber)) {\n                                                    startLayoutEffectTimer();\n                                                    inst.destroy = undefined;\n                                                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                                                    recordLayoutEffectDuration(deletedFiber);\n                                                } else {\n                                                    inst.destroy = undefined;\n                                                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                                                }\n                                                {\n                                                    markComponentLayoutEffectUnmountStopped();\n                                                }\n                                            }\n                                        }\n                                        effect = effect.next;\n                                    }while (effect !== firstEffect);\n                                }\n                            }\n                        }\n                        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                        return;\n                    }\n                case ClassComponent:\n                    {\n                        if (!offscreenSubtreeWasHidden) {\n                            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n                            var instance = deletedFiber.stateNode;\n                            if (typeof instance.componentWillUnmount === 'function') {\n                                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\n                            }\n                        }\n                        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                        return;\n                    }\n                case ScopeComponent:\n                    {\n                        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                        return;\n                    }\n                case OffscreenComponent:\n                    {\n                        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n                        {\n                            // If this offscreen component is hidden, we already unmounted it. Before\n                            // deleting the children, track that it's already unmounted so that we\n                            // don't attempt to unmount the effects again.\n                            // TODO: If the tree is hidden, in most cases we should be able to skip\n                            // over the nested children entirely. An exception is we haven't yet found\n                            // the topmost host node to delete, which we already track on the stack.\n                            // But the other case is portals, which need to be detached no matter how\n                            // deeply they are nested. We should use a subtree flag to track whether a\n                            // subtree includes a nested portal.\n                            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n                            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n                            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n                        }\n                        break;\n                    }\n                default:\n                    {\n                        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                        return;\n                    }\n            }\n        }\n        function commitSuspenseCallback(finishedWork) {}\n        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n            if (!supportsHydration) {\n                return;\n            }\n            var newState = finishedWork.memoizedState;\n            if (newState === null) {\n                var current = finishedWork.alternate;\n                if (current !== null) {\n                    var prevState = current.memoizedState;\n                    if (prevState !== null) {\n                        var suspenseInstance = prevState.dehydrated;\n                        if (suspenseInstance !== null) {\n                            try {\n                                commitHydratedSuspenseInstance(suspenseInstance);\n                                var hydrationCallbacks, onHydrated;\n                                if (enableSuspenseCallback) ;\n                            } catch (error) {\n                                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        function getRetryCache(finishedWork) {\n            // TODO: Unify the interface for the retry cache so we don't have to switch\n            // on the tag like this.\n            switch(finishedWork.tag){\n                case SuspenseComponent:\n                case SuspenseListComponent:\n                    {\n                        var retryCache = finishedWork.stateNode;\n                        if (retryCache === null) {\n                            retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n                        }\n                        return retryCache;\n                    }\n                case OffscreenComponent:\n                    {\n                        var instance = finishedWork.stateNode;\n                        var _retryCache = instance._retryCache;\n                        if (_retryCache === null) {\n                            _retryCache = instance._retryCache = new PossiblyWeakSet();\n                        }\n                        return _retryCache;\n                    }\n                default:\n                    {\n                        throw new Error(\"Unexpected Suspense handler tag (\" + finishedWork.tag + \"). This is a \" + 'bug in React.');\n                    }\n            }\n        }\n        function detachOffscreenInstance(instance) {\n            var fiber = instance._current;\n            if (fiber === null) {\n                throw new Error('Calling Offscreen.detach before instance handle has been set.');\n            }\n            if ((instance._pendingVisibility & OffscreenDetached) !== NoFlags$1) {\n                // The instance is already detached, this is a noop.\n                return;\n            } // TODO: There is an opportunity to optimise this by not entering commit phase\n            // and unmounting effects directly.\n            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n            if (root !== null) {\n                instance._pendingVisibility |= OffscreenDetached;\n                scheduleUpdateOnFiber(root, fiber, SyncLane);\n            }\n        }\n        function attachOffscreenInstance(instance) {\n            var fiber = instance._current;\n            if (fiber === null) {\n                throw new Error('Calling Offscreen.detach before instance handle has been set.');\n            }\n            if ((instance._pendingVisibility & OffscreenDetached) === NoFlags$1) {\n                // The instance is already attached, this is a noop.\n                return;\n            }\n            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n            if (root !== null) {\n                instance._pendingVisibility &= ~OffscreenDetached;\n                scheduleUpdateOnFiber(root, fiber, SyncLane);\n            }\n        }\n        function attachSuspenseRetryListeners(finishedWork, wakeables) {\n            // If this boundary just timed out, then it will have a set of wakeables.\n            // For each wakeable, attach a listener so that when it resolves, React\n            // attempts to re-render the boundary in the primary (pre-timeout) state.\n            var retryCache = getRetryCache(finishedWork);\n            wakeables.forEach(function(wakeable) {\n                // Memoize using the boundary fiber to prevent redundant listeners.\n                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n                if (!retryCache.has(wakeable)) {\n                    retryCache.add(wakeable);\n                    {\n                        if (isDevToolsPresent) {\n                            if (inProgressLanes !== null && inProgressRoot !== null) {\n                                // If we have pending work still, associate the original updaters with it.\n                                restorePendingUpdaters(inProgressRoot, inProgressLanes);\n                            } else {\n                                throw Error('Expected finished root and lanes to be set. This is a bug in React.');\n                            }\n                        }\n                    }\n                    wakeable.then(retry, retry);\n                }\n            });\n        } // This function detects when a Suspense boundary goes from visible to hidden.\n        function commitMutationEffects(root, finishedWork, committedLanes) {\n            inProgressLanes = committedLanes;\n            inProgressRoot = root;\n            {\n                runWithFiberInDEV(finishedWork, commitMutationEffectsOnFiber, finishedWork, root, committedLanes);\n            }\n            inProgressLanes = null;\n            inProgressRoot = null;\n        }\n        function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n            // Deletions effects can be scheduled on any fiber type. They need to happen\n            // before the children effects hae fired.\n            var deletions = parentFiber.deletions;\n            if (deletions !== null) {\n                for(var i = 0; i < deletions.length; i++){\n                    var childToDelete = deletions[i];\n                    try {\n                        commitDeletionEffects(root, parentFiber, childToDelete);\n                    } catch (error) {\n                        captureCommitPhaseError(childToDelete, parentFiber, error);\n                    }\n                }\n            }\n            if (parentFiber.subtreeFlags & MutationMask) {\n                var child = parentFiber.child;\n                while(child !== null){\n                    {\n                        runWithFiberInDEV(child, commitMutationEffectsOnFiber, child, root, lanes);\n                    }\n                    child = child.sibling;\n                }\n            }\n        }\n        var currentHoistableRoot = null;\n        function commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n            var current = finishedWork.alternate;\n            var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\n            // because the fiber tag is more specific. An exception is any flag related\n            // to reconciliation, because those can be set on all fiber types.\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case MemoComponent:\n                case SimpleMemoComponent:\n                    {\n                        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                        commitReconciliationEffects(finishedWork);\n                        if (flags & Update) {\n                            try {\n                                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n                                commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n                            } catch (error) {\n                                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                            } // Layout effects are destroyed during the mutation phase so that all\n                            // destroy functions for all fibers are called before any create functions.\n                            // This prevents sibling component effects from interfering with each other,\n                            // e.g. a destroy function in one component should never override a ref set\n                            // by a create function in another component during the same commit.\n                            if (shouldProfile(finishedWork)) {\n                                try {\n                                    startLayoutEffectTimer();\n                                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                                } catch (error) {\n                                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                                }\n                                recordLayoutEffectDuration(finishedWork);\n                            } else {\n                                try {\n                                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                                } catch (error) {\n                                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                                }\n                            }\n                        }\n                        return;\n                    }\n                case ClassComponent:\n                    {\n                        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                        commitReconciliationEffects(finishedWork);\n                        if (flags & Ref) {\n                            if (current !== null) {\n                                safelyDetachRef(current, current.return);\n                            }\n                        }\n                        if (flags & Callback && offscreenSubtreeIsHidden) {\n                            var updateQueue = finishedWork.updateQueue;\n                            if (updateQueue !== null) {\n                                deferHiddenCallbacks(updateQueue);\n                            }\n                        }\n                        return;\n                    }\n                case HostHoistable:\n                    {\n                        if (supportsResources) {\n                            // We cast because we always set the root at the React root and so it cannot be\n                            // null while we are processing mutation effects\n                            var hoistableRoot = currentHoistableRoot;\n                            recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                            commitReconciliationEffects(finishedWork);\n                            if (flags & Ref) {\n                                if (current !== null) {\n                                    safelyDetachRef(current, current.return);\n                                }\n                            }\n                            if (flags & Update) {\n                                var currentResource = current !== null ? current.memoizedState : null;\n                                var newResource = finishedWork.memoizedState;\n                                if (current === null) {\n                                    // We are mounting a new HostHoistable Fiber. We fork the mount\n                                    // behavior based on whether this instance is a Hoistable Instance\n                                    // or a Hoistable Resource\n                                    if (newResource === null) {\n                                        if (finishedWork.stateNode === null) {\n                                            finishedWork.stateNode = hydrateHoistable(hoistableRoot, finishedWork.type, finishedWork.memoizedProps, finishedWork);\n                                        } else {\n                                            mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode);\n                                        }\n                                    } else {\n                                        finishedWork.stateNode = acquireResource(hoistableRoot, newResource, finishedWork.memoizedProps);\n                                    }\n                                } else if (currentResource !== newResource) {\n                                    // We are moving to or from Hoistable Resource, or between different Hoistable Resources\n                                    if (currentResource === null) {\n                                        if (current.stateNode !== null) {\n                                            unmountHoistable(current.stateNode);\n                                        }\n                                    } else {\n                                        releaseResource(currentResource);\n                                    }\n                                    if (newResource === null) {\n                                        mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode);\n                                    } else {\n                                        acquireResource(hoistableRoot, newResource, finishedWork.memoizedProps);\n                                    }\n                                } else if (newResource === null && finishedWork.stateNode !== null) {\n                                    try {\n                                        commitUpdate(finishedWork.stateNode, finishedWork.type, current.memoizedProps, finishedWork.memoizedProps, finishedWork);\n                                    } catch (error) {\n                                        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                                    }\n                                }\n                            }\n                            return;\n                        } // Fall through\n                    }\n                case HostSingleton:\n                    {\n                        if (supportsSingletons) {\n                            if (flags & Update) {\n                                var previousWork = finishedWork.alternate;\n                                if (previousWork === null) {\n                                    var singleton = finishedWork.stateNode;\n                                    var props = finishedWork.memoizedProps; // This was a new mount, we need to clear and set initial properties\n                                    clearSingleton(singleton);\n                                    acquireSingletonInstance(finishedWork.type, props, singleton, finishedWork);\n                                }\n                            }\n                        } // Fall through\n                    }\n                case HostComponent:\n                    {\n                        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                        commitReconciliationEffects(finishedWork);\n                        if (flags & Ref) {\n                            if (current !== null) {\n                                safelyDetachRef(current, current.return);\n                            }\n                        }\n                        if (supportsMutation) {\n                            // TODO: ContentReset gets cleared by the children during the commit\n                            // phase. This is a refactor hazard because it means we must read\n                            // flags the flags after `commitReconciliationEffects` has already run;\n                            // the order matters. We should refactor so that ContentReset does not\n                            // rely on mutating the flag during commit. Like by setting a flag\n                            // during the render phase instead.\n                            if (finishedWork.flags & ContentReset) {\n                                var instance = finishedWork.stateNode;\n                                try {\n                                    resetTextContent(instance);\n                                } catch (error) {\n                                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                                }\n                            }\n                            if (flags & Update) {\n                                var _instance2 = finishedWork.stateNode;\n                                if (_instance2 != null) {\n                                    // Commit the work prepared earlier.\n                                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n                                    // as the newProps. The updatePayload will contain the real change in\n                                    // this case.\n                                    var oldProps = current !== null ? current.memoizedProps : newProps;\n                                    var type = finishedWork.type;\n                                    try {\n                                        commitUpdate(_instance2, type, oldProps, newProps, finishedWork);\n                                    } catch (error) {\n                                        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                                    }\n                                }\n                            }\n                            if (flags & FormReset) {\n                                needsFormReset = true;\n                                {\n                                    if (finishedWork.type !== 'form') {\n                                        // Paranoid coding. In case we accidentally start using the\n                                        // FormReset bit for something else.\n                                        error('Unexpected host component type. Expected a form. This is a ' + 'bug in React.');\n                                    }\n                                }\n                            }\n                        }\n                        return;\n                    }\n                case HostText:\n                    {\n                        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                        commitReconciliationEffects(finishedWork);\n                        if (flags & Update) {\n                            if (supportsMutation) {\n                                if (finishedWork.stateNode === null) {\n                                    throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                                }\n                                var textInstance = finishedWork.stateNode;\n                                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n                                // as the newProps. The updatePayload will contain the real change in\n                                // this case.\n                                var oldText = current !== null ? current.memoizedProps : newText;\n                                try {\n                                    commitTextUpdate(textInstance, oldText, newText);\n                                } catch (error) {\n                                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                                }\n                            }\n                        }\n                        return;\n                    }\n                case HostRoot:\n                    {\n                        if (supportsResources) {\n                            prepareToCommitHoistables();\n                            var previousHoistableRoot = currentHoistableRoot;\n                            currentHoistableRoot = getHoistableRoot(root.containerInfo);\n                            recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                            currentHoistableRoot = previousHoistableRoot;\n                            commitReconciliationEffects(finishedWork);\n                        } else {\n                            recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                            commitReconciliationEffects(finishedWork);\n                        }\n                        if (flags & Update) {\n                            if (supportsMutation && supportsHydration) {\n                                if (current !== null) {\n                                    var prevRootState = current.memoizedState;\n                                    if (prevRootState.isDehydrated) {\n                                        try {\n                                            commitHydratedContainer(root.containerInfo);\n                                        } catch (error) {\n                                            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                                        }\n                                    }\n                                }\n                            }\n                            if (supportsPersistence) {\n                                var containerInfo = root.containerInfo;\n                                var pendingChildren = root.pendingChildren;\n                                try {\n                                    replaceContainerChildren(containerInfo, pendingChildren);\n                                } catch (error) {\n                                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                                }\n                            }\n                        }\n                        if (needsFormReset) {\n                            // A form component requested to be reset during this commit. We do this\n                            // after all mutations in the rest of the tree so that `defaultValue`\n                            // will already be updated. This way you can update `defaultValue` using\n                            // data sent by the server as a result of the form submission.\n                            //\n                            // Theoretically we could check finishedWork.subtreeFlags & FormReset,\n                            // but the FormReset bit is overloaded with other flags used by other\n                            // fiber types. So this extra variable lets us skip traversing the tree\n                            // except when a form was actually submitted.\n                            needsFormReset = false;\n                            recursivelyResetForms(finishedWork);\n                        }\n                        return;\n                    }\n                case HostPortal:\n                    {\n                        if (supportsResources) {\n                            var _previousHoistableRoot = currentHoistableRoot;\n                            currentHoistableRoot = getHoistableRoot(finishedWork.stateNode.containerInfo);\n                            recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                            commitReconciliationEffects(finishedWork);\n                            currentHoistableRoot = _previousHoistableRoot;\n                        } else {\n                            recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                            commitReconciliationEffects(finishedWork);\n                        }\n                        if (flags & Update) {\n                            if (supportsPersistence) {\n                                var portal = finishedWork.stateNode;\n                                var _containerInfo = portal.containerInfo;\n                                var _pendingChildren = portal.pendingChildren;\n                                try {\n                                    replaceContainerChildren(_containerInfo, _pendingChildren);\n                                } catch (error) {\n                                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                                }\n                            }\n                        }\n                        return;\n                    }\n                case SuspenseComponent:\n                    {\n                        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                        commitReconciliationEffects(finishedWork); // TODO: We should mark a flag on the Suspense fiber itself, rather than\n                        // relying on the Offscreen fiber having a flag also being marked. The\n                        // reason is that this offscreen fiber might not be part of the work-in-\n                        // progress tree! It could have been reused from a previous render. This\n                        // doesn't lead to incorrect behavior because we don't rely on the flag\n                        // check alone; we also compare the states explicitly below. But for\n                        // modeling purposes, we _should_ be able to rely on the flag check alone.\n                        // So this is a bit fragile.\n                        //\n                        // Also, all this logic could/should move to the passive phase so it\n                        // doesn't block paint.\n                        var offscreenFiber = finishedWork.child;\n                        if (offscreenFiber.flags & Visibility) {\n                            // Throttle the appearance and disappearance of Suspense fallbacks.\n                            var isShowingFallback = finishedWork.memoizedState !== null;\n                            var wasShowingFallback = current !== null && current.memoizedState !== null;\n                            {\n                                if (isShowingFallback !== wasShowingFallback) {\n                                    // A fallback is either appearing or disappearing.\n                                    markCommitTimeOfFallback();\n                                }\n                            }\n                        }\n                        if (flags & Update) {\n                            try {\n                                commitSuspenseCallback(finishedWork);\n                            } catch (error) {\n                                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                            }\n                            var retryQueue = finishedWork.updateQueue;\n                            if (retryQueue !== null) {\n                                finishedWork.updateQueue = null;\n                                attachSuspenseRetryListeners(finishedWork, retryQueue);\n                            }\n                        }\n                        return;\n                    }\n                case OffscreenComponent:\n                    {\n                        if (flags & Ref) {\n                            if (current !== null) {\n                                safelyDetachRef(current, current.return);\n                            }\n                        }\n                        var newState = finishedWork.memoizedState;\n                        var isHidden = newState !== null;\n                        var wasHidden = current !== null && current.memoizedState !== null;\n                        {\n                            // Before committing the children, track on the stack whether this\n                            // offscreen subtree was already hidden, so that we don't unmount the\n                            // effects again.\n                            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n                            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n                            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;\n                            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;\n                            recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n                            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n                        }\n                        commitReconciliationEffects(finishedWork);\n                        var offscreenInstance = finishedWork.stateNode; // TODO: Add explicit effect flag to set _current.\n                        offscreenInstance._current = finishedWork; // Offscreen stores pending changes to visibility in `_pendingVisibility`. This is\n                        // to support batching of `attach` and `detach` calls.\n                        offscreenInstance._visibility &= ~OffscreenDetached;\n                        offscreenInstance._visibility |= offscreenInstance._pendingVisibility & OffscreenDetached;\n                        if (flags & Visibility) {\n                            // Track the current state on the Offscreen instance so we can\n                            // read it during an event\n                            if (isHidden) {\n                                offscreenInstance._visibility &= ~OffscreenVisible;\n                            } else {\n                                offscreenInstance._visibility |= OffscreenVisible;\n                            }\n                            if (isHidden) {\n                                var isUpdate = current !== null;\n                                var wasHiddenByAncestorOffscreen = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden; // Only trigger disapper layout effects if:\n                                //   - This is an update, not first mount.\n                                //   - This Offscreen was not hidden before.\n                                //   - Ancestor Offscreen was not hidden in previous commit.\n                                if (isUpdate && !wasHidden && !wasHiddenByAncestorOffscreen) {\n                                    {\n                                        // Disappear the layout effects of all the children\n                                        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n                                    }\n                                }\n                            } // Offscreen with manual mode manages visibility manually.\n                            if (supportsMutation && !isOffscreenManual(finishedWork)) {\n                                // TODO: This needs to run whenever there's an insertion or update\n                                // inside a hidden Offscreen tree.\n                                hideOrUnhideAllChildren(finishedWork, isHidden);\n                            }\n                        } // TODO: Move to passive phase\n                        if (flags & Update) {\n                            var offscreenQueue = finishedWork.updateQueue;\n                            if (offscreenQueue !== null) {\n                                var _retryQueue = offscreenQueue.retryQueue;\n                                if (_retryQueue !== null) {\n                                    offscreenQueue.retryQueue = null;\n                                    attachSuspenseRetryListeners(finishedWork, _retryQueue);\n                                }\n                            }\n                        }\n                        return;\n                    }\n                case SuspenseListComponent:\n                    {\n                        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                        commitReconciliationEffects(finishedWork);\n                        if (flags & Update) {\n                            var _retryQueue2 = finishedWork.updateQueue;\n                            if (_retryQueue2 !== null) {\n                                finishedWork.updateQueue = null;\n                                attachSuspenseRetryListeners(finishedWork, _retryQueue2);\n                            }\n                        }\n                        return;\n                    }\n                case ScopeComponent:\n                    {\n                        return;\n                    }\n                default:\n                    {\n                        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n                        commitReconciliationEffects(finishedWork);\n                        return;\n                    }\n            }\n        }\n        function commitReconciliationEffects(finishedWork) {\n            // Placement effects (insertions, reorders) can be scheduled on any fiber\n            // type. They needs to happen after the children effects have fired, but\n            // before the effects on this fiber have fired.\n            var flags = finishedWork.flags;\n            if (flags & Placement) {\n                try {\n                    commitPlacement(finishedWork);\n                } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                } // Clear the \"placement\" from effect tag so that we know that this is\n                // inserted, before any life-cycles like componentDidMount gets called.\n                // TODO: findDOMNode doesn't rely on this any more but isMounted does\n                // and isMounted is deprecated anyway so we should be able to kill this.\n                finishedWork.flags &= ~Placement;\n            }\n            if (flags & Hydrating) {\n                finishedWork.flags &= ~Hydrating;\n            }\n        }\n        function recursivelyResetForms(parentFiber) {\n            if (parentFiber.subtreeFlags & FormReset) {\n                var child = parentFiber.child;\n                while(child !== null){\n                    resetFormOnFiber(child);\n                    child = child.sibling;\n                }\n            }\n        }\n        function resetFormOnFiber(fiber) {\n            recursivelyResetForms(fiber);\n            if (fiber.tag === HostComponent && fiber.flags & FormReset) {\n                var formInstance = fiber.stateNode;\n                resetFormInstance(formInstance);\n            }\n        }\n        function commitLayoutEffects(finishedWork, root, committedLanes) {\n            inProgressLanes = committedLanes;\n            inProgressRoot = root;\n            var current = finishedWork.alternate;\n            {\n                runWithFiberInDEV(finishedWork, commitLayoutEffectOnFiber, root, current, finishedWork, committedLanes);\n            }\n            inProgressLanes = null;\n            inProgressRoot = null;\n        }\n        function recursivelyTraverseLayoutEffects(root, parentFiber, lanes) {\n            if (parentFiber.subtreeFlags & LayoutMask) {\n                var child = parentFiber.child;\n                while(child !== null){\n                    var current = child.alternate;\n                    {\n                        runWithFiberInDEV(child, commitLayoutEffectOnFiber, root, current, child, lanes);\n                    }\n                    child = child.sibling;\n                }\n            }\n        }\n        function disappearLayoutEffects(finishedWork) {\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case MemoComponent:\n                case SimpleMemoComponent:\n                    {\n                        // TODO (Offscreen) Check: flags & LayoutStatic\n                        if (shouldProfile(finishedWork)) {\n                            try {\n                                startLayoutEffectTimer();\n                                commitHookEffectListUnmount(Layout, finishedWork, finishedWork.return);\n                            } finally{\n                                recordLayoutEffectDuration(finishedWork);\n                            }\n                        } else {\n                            commitHookEffectListUnmount(Layout, finishedWork, finishedWork.return);\n                        }\n                        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n                        break;\n                    }\n                case ClassComponent:\n                    {\n                        // TODO (Offscreen) Check: flags & RefStatic\n                        safelyDetachRef(finishedWork, finishedWork.return);\n                        var instance = finishedWork.stateNode;\n                        if (typeof instance.componentWillUnmount === 'function') {\n                            safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);\n                        }\n                        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n                        break;\n                    }\n                case HostHoistable:\n                case HostSingleton:\n                case HostComponent:\n                    {\n                        // TODO (Offscreen) Check: flags & RefStatic\n                        safelyDetachRef(finishedWork, finishedWork.return);\n                        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n                        break;\n                    }\n                case OffscreenComponent:\n                    {\n                        // TODO (Offscreen) Check: flags & RefStatic\n                        safelyDetachRef(finishedWork, finishedWork.return);\n                        var isHidden = finishedWork.memoizedState !== null;\n                        if (isHidden) ;\n                        else {\n                            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n                        }\n                        break;\n                    }\n                default:\n                    {\n                        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n                        break;\n                    }\n            }\n        }\n        function recursivelyTraverseDisappearLayoutEffects(parentFiber) {\n            // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n            var child = parentFiber.child;\n            while(child !== null){\n                disappearLayoutEffects(child);\n                child = child.sibling;\n            }\n        }\n        function reappearLayoutEffects(finishedRoot, current, finishedWork, // from a previously committed tree. We cannot check non-static flags if the\n        // node was reused.\n        includeWorkInProgressEffects) {\n            // Turn on layout effects in a tree that previously disappeared.\n            var flags = finishedWork.flags;\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects); // TODO: Check flags & LayoutStatic\n                        commitHookLayoutEffects(finishedWork, Layout);\n                        break;\n                    }\n                case ClassComponent:\n                    {\n                        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects); // TODO: Check for LayoutStatic flag\n                        var instance = finishedWork.stateNode;\n                        if (typeof instance.componentDidMount === 'function') {\n                            try {\n                                instance.componentDidMount();\n                            } catch (error) {\n                                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                            }\n                        } // Commit any callbacks that would have fired while the component\n                        // was hidden.\n                        var updateQueue = finishedWork.updateQueue;\n                        if (updateQueue !== null) {\n                            commitHiddenCallbacks(updateQueue, instance);\n                        } // If this is newly finished work, check for setState callbacks\n                        if (includeWorkInProgressEffects && flags & Callback) {\n                            commitClassCallbacks(finishedWork);\n                        } // TODO: Check flags & RefStatic\n                        safelyAttachRef(finishedWork, finishedWork.return);\n                        break;\n                    }\n                // Unlike commitLayoutEffectsOnFiber, we don't need to handle HostRoot\n                // because this function only visits nodes that are inside an\n                // Offscreen fiber.\n                // case HostRoot: {\n                //  ...\n                // }\n                case HostHoistable:\n                case HostSingleton:\n                case HostComponent:\n                    {\n                        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects); // Renderers may schedule work to be done after host components are mounted\n                        // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n                        // These effects should only be committed when components are first mounted,\n                        // aka when there is no current/alternate.\n                        if (includeWorkInProgressEffects && current === null && flags & Update) {\n                            commitHostComponentMount(finishedWork);\n                        } // TODO: Check flags & Ref\n                        safelyAttachRef(finishedWork, finishedWork.return);\n                        break;\n                    }\n                case Profiler:\n                    {\n                        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects); // TODO: Figure out how Profiler updates should work with Offscreen\n                        if (includeWorkInProgressEffects && flags & Update) {\n                            commitProfilerUpdate(finishedWork, current);\n                        }\n                        break;\n                    }\n                case SuspenseComponent:\n                    {\n                        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects); // TODO: Figure out how Suspense hydration callbacks should work\n                        // with Offscreen.\n                        if (includeWorkInProgressEffects && flags & Update) {\n                            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n                        }\n                        break;\n                    }\n                case OffscreenComponent:\n                    {\n                        var offscreenState = finishedWork.memoizedState;\n                        var isHidden = offscreenState !== null;\n                        if (isHidden) ;\n                        else {\n                            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n                        } // TODO: Check flags & Ref\n                        safelyAttachRef(finishedWork, finishedWork.return);\n                        break;\n                    }\n                default:\n                    {\n                        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n                        break;\n                    }\n            }\n        }\n        function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {\n            // This function visits both newly finished work and nodes that were re-used\n            // from a previously committed tree. We cannot check non-static flags if the\n            // node was reused.\n            var childShouldIncludeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & LayoutMask) !== NoFlags$1; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n            var child = parentFiber.child;\n            while(child !== null){\n                var current = child.alternate;\n                {\n                    runWithFiberInDEV(child, reappearLayoutEffects, finishedRoot, current, child, childShouldIncludeWorkInProgressEffects);\n                }\n                child = child.sibling;\n            }\n        }\n        function commitHookPassiveMountEffects(finishedWork, hookFlags) {\n            if (shouldProfile(finishedWork)) {\n                startPassiveEffectTimer();\n                try {\n                    commitHookEffectListMount(hookFlags, finishedWork);\n                } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n                recordPassiveEffectDuration(finishedWork);\n            } else {\n                try {\n                    commitHookEffectListMount(hookFlags, finishedWork);\n                } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n            }\n        }\n        function commitOffscreenPassiveMountEffects(current, finishedWork, instance) {\n            {\n                var previousCache = null;\n                if (current !== null && current.memoizedState !== null && current.memoizedState.cachePool !== null) {\n                    previousCache = current.memoizedState.cachePool.pool;\n                }\n                var nextCache = null;\n                if (finishedWork.memoizedState !== null && finishedWork.memoizedState.cachePool !== null) {\n                    nextCache = finishedWork.memoizedState.cachePool.pool;\n                } // Retain/release the cache used for pending (suspended) nodes.\n                // Note that this is only reached in the non-suspended/visible case:\n                // when the content is suspended/hidden, the retain/release occurs\n                // via the parent Suspense component (see case above).\n                if (nextCache !== previousCache) {\n                    if (nextCache != null) {\n                        retainCache(nextCache);\n                    }\n                    if (previousCache != null) {\n                        releaseCache(previousCache);\n                    }\n                }\n            }\n        }\n        function commitCachePassiveMountEffect(current, finishedWork) {\n            {\n                var previousCache = null;\n                if (finishedWork.alternate !== null) {\n                    previousCache = finishedWork.alternate.memoizedState.cache;\n                }\n                var nextCache = finishedWork.memoizedState.cache; // Retain/release the cache. In theory the cache component\n                // could be \"borrowing\" a cache instance owned by some parent,\n                // in which case we could avoid retaining/releasing. But it\n                // is non-trivial to determine when that is the case, so we\n                // always retain/release.\n                if (nextCache !== previousCache) {\n                    retainCache(nextCache);\n                    if (previousCache != null) {\n                        releaseCache(previousCache);\n                    }\n                }\n            }\n        }\n        function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\n            {\n                runWithFiberInDEV(finishedWork, commitPassiveMountOnFiber, root, finishedWork, committedLanes, committedTransitions);\n            }\n        }\n        function recursivelyTraversePassiveMountEffects(root, parentFiber, committedLanes, committedTransitions) {\n            if (parentFiber.subtreeFlags & PassiveMask) {\n                var child = parentFiber.child;\n                while(child !== null){\n                    {\n                        runWithFiberInDEV(child, commitPassiveMountOnFiber, root, child, committedLanes, committedTransitions);\n                    }\n                    child = child.sibling;\n                }\n            }\n        }\n        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n            // When updating this function, also update reconnectPassiveEffects, which does\n            // most of the same things when an offscreen tree goes from hidden -> visible,\n            // or when toggling effects inside a hidden tree.\n            var flags = finishedWork.flags;\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n                        if (flags & Passive$1) {\n                            commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);\n                        }\n                        break;\n                    }\n                case HostRoot:\n                    {\n                        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n                        if (flags & Passive$1) {\n                            {\n                                var previousCache = null;\n                                if (finishedWork.alternate !== null) {\n                                    previousCache = finishedWork.alternate.memoizedState.cache;\n                                }\n                                var nextCache = finishedWork.memoizedState.cache; // Retain/release the root cache.\n                                // Note that on initial mount, previousCache and nextCache will be the same\n                                // and this retain won't occur. To counter this, we instead retain the HostRoot's\n                                // initial cache when creating the root itself (see createFiberRoot() in\n                                // ReactFiberRoot.js). Subsequent updates that change the cache are reflected\n                                // here, such that previous/next caches are retained correctly.\n                                if (nextCache !== previousCache) {\n                                    retainCache(nextCache);\n                                    if (previousCache != null) {\n                                        releaseCache(previousCache);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n                    }\n                case LegacyHiddenComponent:\n                    {\n                        break;\n                    }\n                case OffscreenComponent:\n                    {\n                        // TODO: Pass `current` as argument to this function\n                        var _instance3 = finishedWork.stateNode;\n                        var nextState = finishedWork.memoizedState;\n                        var isHidden = nextState !== null;\n                        if (isHidden) {\n                            if (_instance3._visibility & OffscreenPassiveEffectsConnected) {\n                                // The effects are currently connected. Update them.\n                                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n                            } else {\n                                {\n                                    // The effects are currently disconnected. Since the tree is hidden,\n                                    // don't connect them. This also applies to the initial render.\n                                    {\n                                        // \"Atomic\" effects are ones that need to fire on every commit,\n                                        // even during pre-rendering. An example is updating the reference\n                                        // count on cache instances.\n                                        recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n                                    }\n                                }\n                            }\n                        } else {\n                            // Tree is visible\n                            if (_instance3._visibility & OffscreenPassiveEffectsConnected) {\n                                // The effects are currently connected. Update them.\n                                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n                            } else {\n                                // The effects are currently disconnected. Reconnect them, while also\n                                // firing effects inside newly mounted trees. This also applies to\n                                // the initial render.\n                                _instance3._visibility |= OffscreenPassiveEffectsConnected;\n                                var includeWorkInProgressEffects = (finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1;\n                                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);\n                            }\n                        }\n                        if (flags & Passive$1) {\n                            var _current = finishedWork.alternate;\n                            commitOffscreenPassiveMountEffects(_current, finishedWork);\n                        }\n                        break;\n                    }\n                case CacheComponent:\n                    {\n                        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n                        if (flags & Passive$1) {\n                            // TODO: Pass `current` as argument to this function\n                            var _current2 = finishedWork.alternate;\n                            commitCachePassiveMountEffect(_current2, finishedWork);\n                        }\n                        break;\n                    }\n                case TracingMarkerComponent:\n                default:\n                    {\n                        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n                        break;\n                    }\n            }\n        }\n        function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects) {\n            // This function visits both newly finished work and nodes that were re-used\n            // from a previously committed tree. We cannot check non-static flags if the\n            // node was reused.\n            var childShouldIncludeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & PassiveMask) !== NoFlags$1; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n            var child = parentFiber.child;\n            while(child !== null){\n                {\n                    runWithFiberInDEV(child, reconnectPassiveEffects, finishedRoot, child, committedLanes, committedTransitions, childShouldIncludeWorkInProgressEffects);\n                }\n                child = child.sibling;\n            }\n        }\n        function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, // from a previously committed tree. We cannot check non-static flags if the\n        // node was reused.\n        includeWorkInProgressEffects) {\n            var flags = finishedWork.flags;\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects); // TODO: Check for PassiveStatic flag\n                        commitHookPassiveMountEffects(finishedWork, Passive);\n                        break;\n                    }\n                // Unlike commitPassiveMountOnFiber, we don't need to handle HostRoot\n                // because this function only visits nodes that are inside an\n                // Offscreen fiber.\n                // case HostRoot: {\n                //  ...\n                // }\n                case LegacyHiddenComponent:\n                    {\n                        break;\n                    }\n                case OffscreenComponent:\n                    {\n                        var _instance4 = finishedWork.stateNode;\n                        var nextState = finishedWork.memoizedState;\n                        var isHidden = nextState !== null;\n                        if (isHidden) {\n                            if (_instance4._visibility & OffscreenPassiveEffectsConnected) {\n                                // The effects are currently connected. Update them.\n                                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);\n                            } else {\n                                {\n                                    // The effects are currently disconnected. Since the tree is hidden,\n                                    // don't connect them. This also applies to the initial render.\n                                    {\n                                        // \"Atomic\" effects are ones that need to fire on every commit,\n                                        // even during pre-rendering. An example is updating the reference\n                                        // count on cache instances.\n                                        recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n                                    }\n                                }\n                            }\n                        } else {\n                            // Tree is visible\n                            // Since we're already inside a reconnecting tree, it doesn't matter\n                            // whether the effects are currently connected. In either case, we'll\n                            // continue traversing the tree and firing all the effects.\n                            //\n                            // We do need to set the \"connected\" flag on the instance, though.\n                            _instance4._visibility |= OffscreenPassiveEffectsConnected;\n                            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);\n                        }\n                        if (includeWorkInProgressEffects && flags & Passive$1) {\n                            // TODO: Pass `current` as argument to this function\n                            var _current3 = finishedWork.alternate;\n                            commitOffscreenPassiveMountEffects(_current3, finishedWork);\n                        }\n                        break;\n                    }\n                case CacheComponent:\n                    {\n                        recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);\n                        if (includeWorkInProgressEffects && flags & Passive$1) {\n                            // TODO: Pass `current` as argument to this function\n                            var _current4 = finishedWork.alternate;\n                            commitCachePassiveMountEffect(_current4, finishedWork);\n                        }\n                        break;\n                    }\n                case TracingMarkerComponent:\n                default:\n                    {\n                        recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);\n                        break;\n                    }\n            }\n        }\n        function recursivelyTraverseAtomicPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions) {\n            // \"Atomic\" effects are ones that need to fire on every commit, even during\n            // pre-rendering. We call this function when traversing a hidden tree whose\n            // regular effects are currently disconnected.\n            // TODO: Add special flag for atomic effects\n            if (parentFiber.subtreeFlags & PassiveMask) {\n                var child = parentFiber.child;\n                while(child !== null){\n                    {\n                        runWithFiberInDEV(child, commitAtomicPassiveEffects, finishedRoot, child, committedLanes, committedTransitions);\n                    }\n                    child = child.sibling;\n                }\n            }\n        }\n        function commitAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n            // \"Atomic\" effects are ones that need to fire on every commit, even during\n            // pre-rendering. We call this function when traversing a hidden tree whose\n            // regular effects are currently disconnected.\n            var flags = finishedWork.flags;\n            switch(finishedWork.tag){\n                case OffscreenComponent:\n                    {\n                        recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n                        if (flags & Passive$1) {\n                            // TODO: Pass `current` as argument to this function\n                            var current = finishedWork.alternate;\n                            commitOffscreenPassiveMountEffects(current, finishedWork);\n                        }\n                        break;\n                    }\n                case CacheComponent:\n                    {\n                        recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n                        if (flags & Passive$1) {\n                            // TODO: Pass `current` as argument to this function\n                            var _current5 = finishedWork.alternate;\n                            commitCachePassiveMountEffect(_current5, finishedWork);\n                        }\n                        break;\n                    }\n                default:\n                    {\n                        recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n                        break;\n                    }\n            }\n        }\n        function commitPassiveUnmountEffects(finishedWork) {\n            {\n                runWithFiberInDEV(finishedWork, commitPassiveUnmountOnFiber, finishedWork);\n            }\n        } // If we're inside a brand new tree, or a tree that was already visible, then we\n        // should only suspend host components that have a ShouldSuspendCommit flag.\n        // Components without it haven't changed since the last commit, so we can skip\n        // over those.\n        //\n        // When we enter a tree that is being revealed (going from hidden -> visible),\n        // we need to suspend _any_ component that _may_ suspend. Even if they're\n        // already in the \"current\" tree. Because their visibility has changed, the\n        // browser may not have prerendered them yet. So we check the MaySuspendCommit\n        // flag instead.\n        var suspenseyCommitFlag = ShouldSuspendCommit;\n        function accumulateSuspenseyCommit(finishedWork) {\n            accumulateSuspenseyCommitOnFiber(finishedWork);\n        }\n        function recursivelyAccumulateSuspenseyCommit(parentFiber) {\n            if (parentFiber.subtreeFlags & suspenseyCommitFlag) {\n                var child = parentFiber.child;\n                while(child !== null){\n                    accumulateSuspenseyCommitOnFiber(child);\n                    child = child.sibling;\n                }\n            }\n        }\n        function accumulateSuspenseyCommitOnFiber(fiber) {\n            switch(fiber.tag){\n                case HostHoistable:\n                    {\n                        recursivelyAccumulateSuspenseyCommit(fiber);\n                        if (fiber.flags & suspenseyCommitFlag) {\n                            if (fiber.memoizedState !== null) {\n                                suspendResource(currentHoistableRoot, fiber.memoizedState, fiber.memoizedProps);\n                            } else {\n                                var type = fiber.type;\n                                var props = fiber.memoizedProps;\n                                suspendInstance(type, props);\n                            }\n                        }\n                        break;\n                    }\n                case HostComponent:\n                    {\n                        recursivelyAccumulateSuspenseyCommit(fiber);\n                        if (fiber.flags & suspenseyCommitFlag) {\n                            var _type = fiber.type;\n                            var _props = fiber.memoizedProps;\n                            suspendInstance(_type, _props);\n                        }\n                        break;\n                    }\n                case HostRoot:\n                case HostPortal:\n                    {\n                        if (supportsResources) {\n                            var previousHoistableRoot = currentHoistableRoot;\n                            var container = fiber.stateNode.containerInfo;\n                            currentHoistableRoot = getHoistableRoot(container);\n                            recursivelyAccumulateSuspenseyCommit(fiber);\n                            currentHoistableRoot = previousHoistableRoot;\n                        } else {\n                            recursivelyAccumulateSuspenseyCommit(fiber);\n                        }\n                        break;\n                    }\n                case OffscreenComponent:\n                    {\n                        var isHidden = fiber.memoizedState !== null;\n                        if (isHidden) ;\n                        else {\n                            var current = fiber.alternate;\n                            var wasHidden = current !== null && current.memoizedState !== null;\n                            if (wasHidden) {\n                                // This tree is being revealed. Visit all newly visible suspensey\n                                // instances, even if they're in the current tree.\n                                var prevFlags = suspenseyCommitFlag;\n                                suspenseyCommitFlag = MaySuspendCommit;\n                                recursivelyAccumulateSuspenseyCommit(fiber);\n                                suspenseyCommitFlag = prevFlags;\n                            } else {\n                                recursivelyAccumulateSuspenseyCommit(fiber);\n                            }\n                        }\n                        break;\n                    }\n                default:\n                    {\n                        recursivelyAccumulateSuspenseyCommit(fiber);\n                    }\n            }\n        }\n        function detachAlternateSiblings(parentFiber) {\n            // A fiber was deleted from this parent fiber, but it's still part of the\n            // previous (alternate) parent fiber's list of children. Because children\n            // are a linked list, an earlier sibling that's still alive will be\n            // connected to the deleted fiber via its `alternate`:\n            //\n            //   live fiber --alternate--> previous live fiber --sibling--> deleted\n            //   fiber\n            //\n            // We can't disconnect `alternate` on nodes that haven't been deleted yet,\n            // but we can disconnect the `sibling` and `child` pointers.\n            var previousFiber = parentFiber.alternate;\n            if (previousFiber !== null) {\n                var detachedChild = previousFiber.child;\n                if (detachedChild !== null) {\n                    previousFiber.child = null;\n                    do {\n                        // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        var detachedSibling = detachedChild.sibling; // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        detachedChild.sibling = null;\n                        detachedChild = detachedSibling;\n                    }while (detachedChild !== null);\n                }\n            }\n        }\n        function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {\n            if (shouldProfile(finishedWork)) {\n                startPassiveEffectTimer();\n                commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);\n                recordPassiveEffectDuration(finishedWork);\n            } else {\n                commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);\n            }\n        }\n        function recursivelyTraversePassiveUnmountEffects(parentFiber) {\n            // Deletions effects can be scheduled on any fiber type. They need to happen\n            // before the children effects have fired.\n            var deletions = parentFiber.deletions;\n            if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n                if (deletions !== null) {\n                    for(var i = 0; i < deletions.length; i++){\n                        var childToDelete = deletions[i]; // TODO: Convert this to use recursion\n                        nextEffect = childToDelete;\n                        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);\n                    }\n                }\n                detachAlternateSiblings(parentFiber);\n            } // TODO: Split PassiveMask into separate masks for mount and unmount?\n            if (parentFiber.subtreeFlags & PassiveMask) {\n                var child = parentFiber.child;\n                while(child !== null){\n                    {\n                        runWithFiberInDEV(child, commitPassiveUnmountOnFiber, child);\n                    }\n                    child = child.sibling;\n                }\n            }\n        }\n        function commitPassiveUnmountOnFiber(finishedWork) {\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        recursivelyTraversePassiveUnmountEffects(finishedWork);\n                        if (finishedWork.flags & Passive$1) {\n                            commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive | HasEffect);\n                        }\n                        break;\n                    }\n                case OffscreenComponent:\n                    {\n                        var instance = finishedWork.stateNode;\n                        var nextState = finishedWork.memoizedState;\n                        var isHidden = nextState !== null;\n                        if (isHidden && instance._visibility & OffscreenPassiveEffectsConnected && // the future we may change this to unmount after a delay.\n                        (finishedWork.return === null || finishedWork.return.tag !== SuspenseComponent)) {\n                            // The effects are currently connected. Disconnect them.\n                            // TODO: Add option or heuristic to delay before disconnecting the\n                            // effects. Then if the tree reappears before the delay has elapsed, we\n                            // can skip toggling the effects entirely.\n                            instance._visibility &= ~OffscreenPassiveEffectsConnected;\n                            recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n                        } else {\n                            recursivelyTraversePassiveUnmountEffects(finishedWork);\n                        }\n                        break;\n                    }\n                default:\n                    {\n                        recursivelyTraversePassiveUnmountEffects(finishedWork);\n                        break;\n                    }\n            }\n        }\n        function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {\n            // Deletions effects can be scheduled on any fiber type. They need to happen\n            // before the children effects have fired.\n            var deletions = parentFiber.deletions;\n            if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n                if (deletions !== null) {\n                    for(var i = 0; i < deletions.length; i++){\n                        var childToDelete = deletions[i]; // TODO: Convert this to use recursion\n                        nextEffect = childToDelete;\n                        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);\n                    }\n                }\n                detachAlternateSiblings(parentFiber);\n            } // TODO: Check PassiveStatic flag\n            var child = parentFiber.child;\n            while(child !== null){\n                {\n                    runWithFiberInDEV(child, disconnectPassiveEffect, child);\n                }\n                child = child.sibling;\n            }\n        }\n        function disconnectPassiveEffect(finishedWork) {\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        // TODO: Check PassiveStatic flag\n                        commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive); // When disconnecting passive effects, we fire the effects in the same\n                        // order as during a deletiong: parent before child\n                        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n                        break;\n                    }\n                case OffscreenComponent:\n                    {\n                        var instance = finishedWork.stateNode;\n                        if (instance._visibility & OffscreenPassiveEffectsConnected) {\n                            instance._visibility &= ~OffscreenPassiveEffectsConnected;\n                            recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n                        }\n                        break;\n                    }\n                default:\n                    {\n                        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n                        break;\n                    }\n            }\n        }\n        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n            while(nextEffect !== null){\n                var fiber = nextEffect; // Deletion effects fire in parent -> child order\n                // TODO: Check if fiber has a PassiveStatic flag\n                {\n                    runWithFiberInDEV(fiber, commitPassiveUnmountInsideDeletedTreeOnFiber, fiber, nearestMountedAncestor);\n                }\n                var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag.\n                if (child !== null) {\n                    child.return = fiber;\n                    nextEffect = child;\n                } else {\n                    commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n                }\n            }\n        }\n        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                var sibling = fiber.sibling;\n                var returnFiber = fiber.return; // Recursively traverse the entire deleted tree and clean up fiber fields.\n                // This is more aggressive than ideal, and the long term goal is to only\n                // have to detach the deleted tree at the root.\n                detachFiberAfterEffects(fiber);\n                if (fiber === deletedSubtreeRoot) {\n                    nextEffect = null;\n                    return;\n                }\n                if (sibling !== null) {\n                    sibling.return = returnFiber;\n                    nextEffect = sibling;\n                    return;\n                }\n                nextEffect = returnFiber;\n            }\n        }\n        function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n            switch(current.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        commitHookPassiveUnmountEffects(current, nearestMountedAncestor, Passive);\n                        break;\n                    }\n                // TODO: run passive unmount effects when unmounting a root.\n                // Because passive unmount effects are not currently run,\n                // the cache instance owned by the root will never be freed.\n                // When effects are run, the cache should be freed here:\n                // case HostRoot: {\n                //   if (enableCache) {\n                //     const cache = current.memoizedState.cache;\n                //     releaseCache(cache);\n                //   }\n                //   break;\n                // }\n                case LegacyHiddenComponent:\n                case OffscreenComponent:\n                    {\n                        {\n                            if (current.memoizedState !== null && current.memoizedState.cachePool !== null) {\n                                var cache = current.memoizedState.cachePool.pool; // Retain/release the cache used for pending (suspended) nodes.\n                                // Note that this is only reached in the non-suspended/visible case:\n                                // when the content is suspended/hidden, the retain/release occurs\n                                // via the parent Suspense component (see case above).\n                                if (cache != null) {\n                                    retainCache(cache);\n                                }\n                            }\n                        }\n                        break;\n                    }\n                case SuspenseComponent:\n                    {\n                        break;\n                    }\n                case CacheComponent:\n                    {\n                        {\n                            var _cache = current.memoizedState.cache;\n                            releaseCache(_cache);\n                        }\n                        break;\n                    }\n            }\n        }\n        function getCacheForType(resourceType) {\n            var cache = readContext(CacheContext);\n            var cacheForType = cache.data.get(resourceType);\n            if (cacheForType === undefined) {\n                cacheForType = resourceType();\n                cache.data.set(resourceType, cacheForType);\n            }\n            return cacheForType;\n        }\n        var DefaultAsyncDispatcher = {\n            getCacheForType: getCacheForType\n        };\n        {\n            DefaultAsyncDispatcher.getOwner = function() {\n                return current;\n            };\n        }\n        var COMPONENT_TYPE = 0;\n        var HAS_PSEUDO_CLASS_TYPE = 1;\n        var ROLE_TYPE = 2;\n        var TEST_NAME_TYPE = 3;\n        var TEXT_TYPE = 4;\n        if (typeof Symbol === 'function' && Symbol.for) {\n            var symbolFor = Symbol.for;\n            COMPONENT_TYPE = symbolFor('selector.component');\n            HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n            ROLE_TYPE = symbolFor('selector.role');\n            TEST_NAME_TYPE = symbolFor('selector.test_id');\n            TEXT_TYPE = symbolFor('selector.text');\n        }\n        function createComponentSelector(component) {\n            return {\n                $$typeof: COMPONENT_TYPE,\n                value: component\n            };\n        }\n        function createHasPseudoClassSelector(selectors) {\n            return {\n                $$typeof: HAS_PSEUDO_CLASS_TYPE,\n                value: selectors\n            };\n        }\n        function createRoleSelector(role) {\n            return {\n                $$typeof: ROLE_TYPE,\n                value: role\n            };\n        }\n        function createTextSelector(text) {\n            return {\n                $$typeof: TEXT_TYPE,\n                value: text\n            };\n        }\n        function createTestNameSelector(id) {\n            return {\n                $$typeof: TEST_NAME_TYPE,\n                value: id\n            };\n        }\n        function findFiberRootForHostRoot(hostRoot) {\n            var maybeFiber = getInstanceFromNode(hostRoot);\n            if (maybeFiber != null) {\n                if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n                    throw new Error('Invalid host root specified. Should be either a React container or a node with a testname attribute.');\n                }\n                return maybeFiber;\n            } else {\n                var fiberRoot = findFiberRoot(hostRoot);\n                if (fiberRoot === null) {\n                    throw new Error('Could not find React container within specified host subtree.');\n                } // The Flow type for FiberRoot is a little funky.\n                // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n                return fiberRoot.stateNode.current;\n            }\n        }\n        function matchSelector(fiber, selector) {\n            var tag = fiber.tag;\n            switch(selector.$$typeof){\n                case COMPONENT_TYPE:\n                    if (fiber.type === selector.value) {\n                        return true;\n                    }\n                    break;\n                case HAS_PSEUDO_CLASS_TYPE:\n                    return hasMatchingPaths(fiber, selector.value);\n                case ROLE_TYPE:\n                    if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton) {\n                        var node = fiber.stateNode;\n                        if (matchAccessibilityRole(node, selector.value)) {\n                            return true;\n                        }\n                    }\n                    break;\n                case TEXT_TYPE:\n                    if (tag === HostComponent || tag === HostText || tag === HostHoistable || tag === HostSingleton) {\n                        var textContent = getTextContent(fiber);\n                        if (textContent !== null && textContent.indexOf(selector.value) >= 0) {\n                            return true;\n                        }\n                    }\n                    break;\n                case TEST_NAME_TYPE:\n                    if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton) {\n                        var dataTestID = fiber.memoizedProps['data-testname'];\n                        if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {\n                            return true;\n                        }\n                    }\n                    break;\n                default:\n                    throw new Error('Invalid selector type specified.');\n            }\n            return false;\n        }\n        function selectorToString(selector) {\n            switch(selector.$$typeof){\n                case COMPONENT_TYPE:\n                    var displayName = getComponentNameFromType(selector.value) || 'Unknown';\n                    return \"<\" + displayName + \">\";\n                case HAS_PSEUDO_CLASS_TYPE:\n                    return \":has(\" + (selectorToString(selector) || '') + \")\";\n                case ROLE_TYPE:\n                    return \"[role=\\\"\" + selector.value + \"\\\"]\";\n                case TEXT_TYPE:\n                    return \"\\\"\" + selector.value + \"\\\"\";\n                case TEST_NAME_TYPE:\n                    return \"[data-testname=\\\"\" + selector.value + \"\\\"]\";\n                default:\n                    throw new Error('Invalid selector type specified.');\n            }\n        }\n        function findPaths(root, selectors) {\n            var matchingFibers = [];\n            var stack = [\n                root,\n                0\n            ];\n            var index = 0;\n            while(index < stack.length){\n                var fiber = stack[index++];\n                var tag = fiber.tag;\n                var selectorIndex = stack[index++];\n                var selector = selectors[selectorIndex];\n                if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && isHiddenSubtree(fiber)) {\n                    continue;\n                } else {\n                    while(selector != null && matchSelector(fiber, selector)){\n                        selectorIndex++;\n                        selector = selectors[selectorIndex];\n                    }\n                }\n                if (selectorIndex === selectors.length) {\n                    matchingFibers.push(fiber);\n                } else {\n                    var child = fiber.child;\n                    while(child !== null){\n                        stack.push(child, selectorIndex);\n                        child = child.sibling;\n                    }\n                }\n            }\n            return matchingFibers;\n        } // Same as findPaths but with eager bailout on first match\n        function hasMatchingPaths(root, selectors) {\n            var stack = [\n                root,\n                0\n            ];\n            var index = 0;\n            while(index < stack.length){\n                var fiber = stack[index++];\n                var tag = fiber.tag;\n                var selectorIndex = stack[index++];\n                var selector = selectors[selectorIndex];\n                if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && isHiddenSubtree(fiber)) {\n                    continue;\n                } else {\n                    while(selector != null && matchSelector(fiber, selector)){\n                        selectorIndex++;\n                        selector = selectors[selectorIndex];\n                    }\n                }\n                if (selectorIndex === selectors.length) {\n                    return true;\n                } else {\n                    var child = fiber.child;\n                    while(child !== null){\n                        stack.push(child, selectorIndex);\n                        child = child.sibling;\n                    }\n                }\n            }\n            return false;\n        }\n        function findAllNodes(hostRoot, selectors) {\n            if (!supportsTestSelectors) {\n                throw new Error('Test selector API is not supported by this renderer.');\n            }\n            var root = findFiberRootForHostRoot(hostRoot);\n            var matchingFibers = findPaths(root, selectors);\n            var instanceRoots = [];\n            var stack = Array.from(matchingFibers);\n            var index = 0;\n            while(index < stack.length){\n                var node = stack[index++];\n                var tag = node.tag;\n                if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton) {\n                    if (isHiddenSubtree(node)) {\n                        continue;\n                    }\n                    instanceRoots.push(node.stateNode);\n                } else {\n                    var child = node.child;\n                    while(child !== null){\n                        stack.push(child);\n                        child = child.sibling;\n                    }\n                }\n            }\n            return instanceRoots;\n        }\n        function getFindAllNodesFailureDescription(hostRoot, selectors) {\n            if (!supportsTestSelectors) {\n                throw new Error('Test selector API is not supported by this renderer.');\n            }\n            var root = findFiberRootForHostRoot(hostRoot);\n            var maxSelectorIndex = 0;\n            var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()\n            var stack = [\n                root,\n                0\n            ];\n            var index = 0;\n            while(index < stack.length){\n                var fiber = stack[index++];\n                var tag = fiber.tag;\n                var selectorIndex = stack[index++];\n                var selector = selectors[selectorIndex];\n                if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && isHiddenSubtree(fiber)) {\n                    continue;\n                } else if (matchSelector(fiber, selector)) {\n                    matchedNames.push(selectorToString(selector));\n                    selectorIndex++;\n                    if (selectorIndex > maxSelectorIndex) {\n                        maxSelectorIndex = selectorIndex;\n                    }\n                }\n                if (selectorIndex < selectors.length) {\n                    var child = fiber.child;\n                    while(child !== null){\n                        stack.push(child, selectorIndex);\n                        child = child.sibling;\n                    }\n                }\n            }\n            if (maxSelectorIndex < selectors.length) {\n                var unmatchedNames = [];\n                for(var i = maxSelectorIndex; i < selectors.length; i++){\n                    unmatchedNames.push(selectorToString(selectors[i]));\n                }\n                return 'findAllNodes was able to match part of the selector:\\n' + (\"  \" + matchedNames.join(' > ') + \"\\n\\n\") + 'No matching component was found for:\\n' + (\"  \" + unmatchedNames.join(' > '));\n            }\n            return null;\n        }\n        function findBoundingRects(hostRoot, selectors) {\n            if (!supportsTestSelectors) {\n                throw new Error('Test selector API is not supported by this renderer.');\n            }\n            var instanceRoots = findAllNodes(hostRoot, selectors);\n            var boundingRects = [];\n            for(var i = 0; i < instanceRoots.length; i++){\n                boundingRects.push(getBoundingRect(instanceRoots[i]));\n            }\n            for(var _i = boundingRects.length - 1; _i > 0; _i--){\n                var targetRect = boundingRects[_i];\n                var targetLeft = targetRect.x;\n                var targetRight = targetLeft + targetRect.width;\n                var targetTop = targetRect.y;\n                var targetBottom = targetTop + targetRect.height;\n                for(var j = _i - 1; j >= 0; j--){\n                    if (_i !== j) {\n                        var otherRect = boundingRects[j];\n                        var otherLeft = otherRect.x;\n                        var otherRight = otherLeft + otherRect.width;\n                        var otherTop = otherRect.y;\n                        var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,\n                        // but we can handle the most common cases:\n                        // 1. completely overlapping rects\n                        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n                        //\n                        // Even given the above constraints,\n                        // we still won't end up with the fewest possible rects without doing multiple passes,\n                        // but it's good enough for this purpose.\n                        if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {\n                            // Complete overlapping rects; remove the inner one.\n                            boundingRects.splice(_i, 1);\n                            break;\n                        } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {\n                            // Adjacent vertical rects; merge them.\n                            if (otherTop > targetTop) {\n                                otherRect.height += otherTop - targetTop;\n                                otherRect.y = targetTop;\n                            }\n                            if (otherBottom < targetBottom) {\n                                otherRect.height = targetBottom - otherTop;\n                            }\n                            boundingRects.splice(_i, 1);\n                            break;\n                        } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {\n                            // Adjacent horizontal rects; merge them.\n                            if (otherLeft > targetLeft) {\n                                otherRect.width += otherLeft - targetLeft;\n                                otherRect.x = targetLeft;\n                            }\n                            if (otherRight < targetRight) {\n                                otherRect.width = targetRight - otherLeft;\n                            }\n                            boundingRects.splice(_i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n            return boundingRects;\n        }\n        function focusWithin(hostRoot, selectors) {\n            if (!supportsTestSelectors) {\n                throw new Error('Test selector API is not supported by this renderer.');\n            }\n            var root = findFiberRootForHostRoot(hostRoot);\n            var matchingFibers = findPaths(root, selectors);\n            var stack = Array.from(matchingFibers);\n            var index = 0;\n            while(index < stack.length){\n                var fiber = stack[index++];\n                var tag = fiber.tag;\n                if (isHiddenSubtree(fiber)) {\n                    continue;\n                }\n                if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton) {\n                    var node = fiber.stateNode;\n                    if (setFocusIfFocusable(node)) {\n                        return true;\n                    }\n                }\n                var child = fiber.child;\n                while(child !== null){\n                    stack.push(child);\n                    child = child.sibling;\n                }\n            }\n            return false;\n        }\n        var commitHooks = [];\n        function onCommitRoot() {\n            if (supportsTestSelectors) {\n                commitHooks.forEach(function(commitHook) {\n                    return commitHook();\n                });\n            }\n        }\n        function observeVisibleRects(hostRoot, selectors, callback, options) {\n            if (!supportsTestSelectors) {\n                throw new Error('Test selector API is not supported by this renderer.');\n            }\n            var instanceRoots = findAllNodes(hostRoot, selectors);\n            var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options), disconnect = _setupIntersectionObs.disconnect, observe = _setupIntersectionObs.observe, unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.\n            var commitHook = function() {\n                var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n                instanceRoots.forEach(function(target) {\n                    if (nextInstanceRoots.indexOf(target) < 0) {\n                        unobserve(target);\n                    }\n                });\n                nextInstanceRoots.forEach(function(target) {\n                    if (instanceRoots.indexOf(target) < 0) {\n                        observe(target);\n                    }\n                });\n            };\n            commitHooks.push(commitHook);\n            return {\n                disconnect: function() {\n                    // Stop listening for React mutations:\n                    var index = commitHooks.indexOf(commitHook);\n                    if (index >= 0) {\n                        commitHooks.splice(index, 1);\n                    } // Disconnect the host observer:\n                    disconnect();\n                }\n            };\n        }\n        function isConcurrentActEnvironment() {\n            {\n                var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n                if (!isReactActEnvironmentGlobal && ReactSharedInternals.actQueue !== null) {\n                    // TODO: Include link to relevant documentation page.\n                    error('The current testing environment is not configured to support ' + 'act(...)');\n                }\n                return isReactActEnvironmentGlobal;\n            }\n        }\n        var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n        var NoContext = /*             */ 0;\n        var BatchedContext = /*               */ 1;\n        var RenderContext = /*         */ 2;\n        var CommitContext = /*         */ 4;\n        var RootInProgress = 0;\n        var RootFatalErrored = 1;\n        var RootErrored = 2;\n        var RootSuspended = 3;\n        var RootSuspendedWithDelay = 4;\n        var RootCompleted = 5;\n        var RootDidNotComplete = 6; // Describes where we are in the React execution stack\n        var executionContext = NoContext; // The root we're working on\n        var workInProgressRoot = null; // The fiber we're working on\n        var workInProgress = null; // The lanes we're rendering\n        var workInProgressRootRenderLanes = NoLanes;\n        var NotSuspended = 0;\n        var SuspendedOnError = 1;\n        var SuspendedOnData = 2;\n        var SuspendedOnImmediate = 3;\n        var SuspendedOnInstance = 4;\n        var SuspendedOnInstanceAndReadyToContinue = 5;\n        var SuspendedOnDeprecatedThrowPromise = 6;\n        var SuspendedAndReadyToContinue = 7;\n        var SuspendedOnHydration = 8; // When this is true, the work-in-progress fiber just suspended (or errored) and\n        // we've yet to unwind the stack. In some cases, we may yield to the main thread\n        // after this happens. If the fiber is pinged before we resume, we can retry\n        // immediately instead of unwinding the stack.\n        var workInProgressSuspendedReason = NotSuspended;\n        var workInProgressThrownValue = null; // Whether a ping listener was attached during this render. This is slightly\n        // different that whether something suspended, because we don't add multiple\n        // listeners to a promise we've already seen (per root and lane).\n        var workInProgressRootDidAttachPingListener = false; // A contextual version of workInProgressRootRenderLanes. It is a superset of\n        // the lanes that we started working on at the root. When we enter a subtree\n        // that is currently hidden, we add the lanes that would have committed if\n        // the hidden tree hadn't been deferred. This is modified by the\n        // HiddenContext module.\n        //\n        // Most things in the work loop should deal with workInProgressRootRenderLanes.\n        // Most things in begin/complete phases should deal with entangledRenderLanes.\n        var entangledRenderLanes = NoLanes; // Whether to root completed, errored, suspended, etc.\n        var workInProgressRootExitStatus = RootInProgress; // The work left over by components that were visited during this render. Only\n        // includes unprocessed updates, not work in bailed out children.\n        var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n        var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n        var workInProgressRootPingedLanes = NoLanes; // If this lane scheduled deferred work, this is the lane of the deferred task.\n        var workInProgressDeferredLane = NoLane; // Errors that are thrown during the render phase.\n        var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n        // We will log them once the tree commits.\n        var workInProgressRootRecoverableErrors = null; // Tracks when an update occurs during the render phase.\n        var workInProgressRootDidIncludeRecursiveRenderUpdate = false; // Thacks when an update occurs during the commit phase. It's a separate\n        // variable from the one for renders because the commit phase may run\n        // concurrently to a render phase.\n        var didIncludeCommitPhaseUpdate = false; // The most recent time we either committed a fallback, or when a fallback was\n        // filled in with the resolved UI. This lets us throttle the appearance of new\n        // content as it streams in, to minimize jank.\n        // TODO: Think of a better name for this variable?\n        var globalMostRecentFallbackTime = 0;\n        var FALLBACK_THROTTLE_MS = 300; // The absolute time for when we should start giving up on rendering\n        // more and prefer CPU suspense heuristics instead.\n        var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n        // suspense heuristics and opt out of rendering more content.\n        var RENDER_TIMEOUT_MS = 500;\n        var workInProgressTransitions = null;\n        function resetRenderTimer() {\n            workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;\n        }\n        function getRenderTargetTime() {\n            return workInProgressRootRenderTargetTime;\n        }\n        var legacyErrorBoundariesThatAlreadyFailed = null;\n        var rootDoesHavePassiveEffects = false;\n        var rootWithPendingPassiveEffects = null;\n        var pendingPassiveEffectsLanes = NoLanes;\n        var pendingPassiveProfilerEffects = [];\n        var pendingPassiveEffectsRemainingLanes = NoLanes;\n        var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates\n        var NESTED_UPDATE_LIMIT = 50;\n        var nestedUpdateCount = 0;\n        var rootWithNestedUpdates = null;\n        var isFlushingPassiveEffects = false;\n        var didScheduleUpdateDuringPassiveEffects = false;\n        var NESTED_PASSIVE_UPDATE_LIMIT = 50;\n        var nestedPassiveUpdateCount = 0;\n        var rootWithPassiveNestedUpdates = null;\n        var isRunningInsertionEffect = false;\n        function getWorkInProgressRoot() {\n            return workInProgressRoot;\n        }\n        function getWorkInProgressRootRenderLanes() {\n            return workInProgressRootRenderLanes;\n        }\n        function isWorkLoopSuspendedOnData() {\n            return workInProgressSuspendedReason === SuspendedOnData;\n        }\n        function requestUpdateLane(fiber) {\n            if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n                // This is a render phase update. These are not officially supported. The\n                // old behavior is to give this the same \"thread\" (lanes) as\n                // whatever is currently rendering. So if you call `setState` on a component\n                // that happens later in the same render, it will flush. Ideally, we want to\n                // remove the special case and treat them as if they came from an\n                // interleaved event. Regardless, this pattern is not officially supported.\n                // This behavior is only a fallback. The flag only exists until we can roll\n                // out the setState warning, since existing code might accidentally rely on\n                // the current behavior.\n                return pickArbitraryLane(workInProgressRootRenderLanes);\n            }\n            var transition = requestCurrentTransition();\n            if (transition !== null) {\n                {\n                    if (!transition._updatedFibers) {\n                        transition._updatedFibers = new Set();\n                    }\n                    transition._updatedFibers.add(fiber);\n                }\n                var actionScopeLane = peekEntangledActionLane();\n                return actionScopeLane !== NoLane ? actionScopeLane : // is the first update in that scope. Either way, we need to get a\n                // fresh transition lane.\n                requestTransitionLane();\n            }\n            return eventPriorityToLane(resolveUpdatePriority());\n        }\n        function requestRetryLane(fiber) {\n            return claimNextRetryLane();\n        }\n        function requestDeferredLane() {\n            if (workInProgressDeferredLane === NoLane) {\n                // If there are multiple useDeferredValue hooks in the same render, the\n                // tasks that they spawn should all be batched together, so they should all\n                // receive the same lane.\n                // Check the priority of the current render to decide the priority of the\n                // deferred task.\n                // OffscreenLane is used for prerendering, but we also use OffscreenLane\n                // for incremental hydration. It's given the lowest priority because the\n                // initial HTML is the same as the final UI. But useDeferredValue during\n                // hydration is an exception — we need to upgrade the UI to the final\n                // value. So if we're currently hydrating, we treat it like a transition.\n                var isPrerendering = includesSomeLane(workInProgressRootRenderLanes, OffscreenLane) && !getIsHydrating();\n                if (isPrerendering) {\n                    // There's only one OffscreenLane, so if it contains deferred work, we\n                    // should just reschedule using the same lane.\n                    workInProgressDeferredLane = OffscreenLane;\n                } else {\n                    // Everything else is spawned as a transition.\n                    workInProgressDeferredLane = claimNextTransitionLane();\n                }\n            } // Mark the parent Suspense boundary so it knows to spawn the deferred lane.\n            var suspenseHandler = getSuspenseHandler();\n            if (suspenseHandler !== null) {\n                // TODO: As an optimization, we shouldn't entangle the lanes at the root; we\n                // can entangle them using the baseLanes of the Suspense boundary instead.\n                // We only need to do something special if there's no Suspense boundary.\n                suspenseHandler.flags |= DidDefer;\n            }\n            return workInProgressDeferredLane;\n        }\n        function peekDeferredLane() {\n            return workInProgressDeferredLane;\n        }\n        function scheduleUpdateOnFiber(root, fiber, lane) {\n            {\n                if (isRunningInsertionEffect) {\n                    error('useInsertionEffect must not schedule updates.');\n                }\n            }\n            {\n                if (isFlushingPassiveEffects) {\n                    didScheduleUpdateDuringPassiveEffects = true;\n                }\n            }\n            // finish loading.\n            if (root === workInProgressRoot && workInProgressSuspendedReason === SuspendedOnData || // Suspended commit phase\n            root.cancelPendingCommit !== null) {\n                // The incoming update might unblock the current render. Interrupt the\n                // current attempt and restart from the top.\n                prepareFreshStack(root, NoLanes);\n                markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane);\n            } // Mark that the root has a pending update.\n            markRootUpdated(root, lane);\n            if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n                // This update was dispatched during the render phase. This is a mistake\n                // if the update originates from user space (with the exception of local\n                // hook updates, which are handled differently and don't reach this\n                // function), but there are some internal React features that use this as\n                // an implementation detail, like selective hydration.\n                warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n            } else {\n                // This is a normal update, scheduled from outside the render phase. For\n                // example, during an input event.\n                {\n                    if (isDevToolsPresent) {\n                        addFiberToLanesMap(root, fiber, lane);\n                    }\n                }\n                warnIfUpdatesNotWrappedWithActDEV(fiber);\n                if (root === workInProgressRoot) {\n                    // Received an update to a tree that's in the middle of rendering. Mark\n                    // that there was an interleaved update work on this root.\n                    if ((executionContext & RenderContext) === NoContext) {\n                        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n                    }\n                    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n                        // The root already suspended with a delay, which means this render\n                        // definitely won't finish. Since we have a new update, let's mark it as\n                        // suspended now, right before marking the incoming update. This has the\n                        // effect of interrupting the current render and switching to the update.\n                        // TODO: Make sure this doesn't override pings that happen while we've\n                        // already started rendering.\n                        markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane);\n                    }\n                }\n                ensureRootIsScheduled(root);\n                if (lane === SyncLane && executionContext === NoContext && !disableLegacyMode && (fiber.mode & ConcurrentMode) === NoMode) {\n                    if (ReactSharedInternals.isBatchingLegacy) ;\n                    else {\n                        // Flush the synchronous work now, unless we're already working or inside\n                        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n                        // scheduleCallbackForFiber to preserve the ability to schedule a callback\n                        // without immediately flushing it. We only do this for user-initiated\n                        // updates, to preserve historical behavior of legacy mode.\n                        resetRenderTimer();\n                    }\n                }\n            }\n        }\n        function scheduleInitialHydrationOnRoot(root, lane) {\n            // This is a special fork of scheduleUpdateOnFiber that is only used to\n            // schedule the initial hydration of a root that has just been created. Most\n            // of the stuff in scheduleUpdateOnFiber can be skipped.\n            //\n            // The main reason for this separate path, though, is to distinguish the\n            // initial children from subsequent updates. In fully client-rendered roots\n            // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n            // updates, but hydration roots are special because the initial render must\n            // match what was rendered on the server.\n            var current = root.current;\n            current.lanes = lane;\n            markRootUpdated(root, lane);\n            ensureRootIsScheduled(root);\n        }\n        function isUnsafeClassRenderPhaseUpdate(fiber) {\n            // Check if this is a render phase update. Only called by class components,\n            // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n            return (executionContext & RenderContext) !== NoContext;\n        } // This is the entry point for every concurrent task, i.e. anything that\n        // goes through Scheduler.\n        function performConcurrentWorkOnRoot(root, didTimeout) {\n            {\n                resetNestedUpdateFlag();\n            }\n            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n                throw new Error('Should not already be working.');\n            } // Flush any pending passive effects before deciding which lanes to work on,\n            // in case they schedule additional work.\n            var originalCallbackNode = root.callbackNode;\n            var didFlushPassiveEffects = flushPassiveEffects();\n            if (didFlushPassiveEffects) {\n                // Something in the passive effect phase may have canceled the current task.\n                // Check if the task node for this root was changed.\n                if (root.callbackNode !== originalCallbackNode) {\n                    // The current task was canceled. Exit. We don't need to call\n                    // `ensureRootIsScheduled` because the check above implies either that\n                    // there's a new task, or that there's no remaining work on this root.\n                    return null;\n                }\n            } // Determine the next lanes to work on, using the fields stored\n            // on the root.\n            // TODO: This was already computed in the caller. Pass it as an argument.\n            var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n            if (lanes === NoLanes) {\n                // Defensive coding. This is never expected to happen.\n                return null;\n            } // We disable time-slicing in some cases: if the work has been CPU-bound\n            // for too long (\"expired\" work, to prevent starvation), or we're in\n            // sync-updates-by-default mode.\n            // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n            // bug we're still investigating. Once the bug in Scheduler is fixed,\n            // we can remove this, since we track expiration ourselves.\n            var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;\n            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n            if (exitStatus !== RootInProgress) {\n                var renderWasConcurrent = shouldTimeSlice;\n                do {\n                    if (exitStatus === RootDidNotComplete) {\n                        // The render unwound without completing the tree. This happens in special\n                        // cases where need to exit the current render without producing a\n                        // consistent tree or committing.\n                        markRootSuspended(root, lanes, NoLane);\n                    } else {\n                        // The render completed.\n                        // Check if this render may have yielded to a concurrent event, and if so,\n                        // confirm that any newly rendered stores are consistent.\n                        // TODO: It's possible that even a concurrent render may never have yielded\n                        // to the main thread, if it was fast enough, or if it expired. We could\n                        // skip the consistency check in that case, too.\n                        var finishedWork = root.current.alternate;\n                        if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n                            // A store was mutated in an interleaved event. Render again,\n                            // synchronously, to block further mutations.\n                            exitStatus = renderRootSync(root, lanes); // We assume the tree is now consistent because we didn't yield to any\n                            // concurrent events.\n                            renderWasConcurrent = false; // Need to check the exit status again.\n                            continue;\n                        } // Check if something threw\n                        if (exitStatus === RootErrored) {\n                            var lanesThatJustErrored = lanes;\n                            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root, lanesThatJustErrored);\n                            if (errorRetryLanes !== NoLanes) {\n                                lanes = errorRetryLanes;\n                                exitStatus = recoverFromConcurrentError(root, lanesThatJustErrored, errorRetryLanes);\n                                renderWasConcurrent = false; // Need to check the exit status again.\n                                if (exitStatus !== RootErrored) {\n                                    continue;\n                                }\n                            }\n                        }\n                        if (exitStatus === RootFatalErrored) {\n                            prepareFreshStack(root, NoLanes);\n                            markRootSuspended(root, lanes, NoLane);\n                            break;\n                        } // We now have a consistent tree. The next step is either to commit it,\n                        // or, if something suspended, wait to commit it after a timeout.\n                        root.finishedWork = finishedWork;\n                        root.finishedLanes = lanes;\n                        finishConcurrentRender(root, exitStatus, finishedWork, lanes);\n                    }\n                    break;\n                }while (true);\n            }\n            ensureRootIsScheduled(root);\n            return getContinuationForRoot(root, originalCallbackNode);\n        }\n        function recoverFromConcurrentError(root, originallyAttemptedLanes, errorRetryLanes) {\n            // If an error occurred during hydration, discard server response and fall\n            // back to client side render.\n            // Before rendering again, save the errors from the previous attempt.\n            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n            var wasRootDehydrated = supportsHydration && isRootDehydrated(root);\n            if (wasRootDehydrated) {\n                // The shell failed to hydrate. Set a flag to force a client rendering\n                // during the next attempt. To do this, we call prepareFreshStack now\n                // to create the root work-in-progress fiber. This is a bit weird in terms\n                // of factoring, because it relies on renderRootSync not calling\n                // prepareFreshStack again in the call below, which happens because the\n                // root and lanes haven't changed.\n                //\n                // TODO: I think what we should do is set ForceClientRender inside\n                // throwException, like we do for nested Suspense boundaries. The reason\n                // it's here instead is so we can switch to the synchronous work loop, too.\n                // Something to consider for a future refactor.\n                var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n                rootWorkInProgress.flags |= ForceClientRender;\n            }\n            var exitStatus = renderRootSync(root, errorRetryLanes);\n            if (exitStatus !== RootErrored) {\n                // Successfully finished rendering on retry\n                if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {\n                    // During the synchronous render, we attached additional ping listeners.\n                    // This is highly suggestive of an uncached promise (though it's not the\n                    // only reason this would happen). If it was an uncached promise, then\n                    // it may have masked a downstream error from ocurring without actually\n                    // fixing it. Example:\n                    //\n                    //    use(Promise.resolve('uncached'))\n                    //    throw new Error('Oops!')\n                    //\n                    // When this happens, there's a conflict between blocking potential\n                    // concurrent data races and unwrapping uncached promise values. We\n                    // have to choose one or the other. Because the data race recovery is\n                    // a last ditch effort, we'll disable it.\n                    root.errorRecoveryDisabledLanes = mergeLanes(root.errorRecoveryDisabledLanes, originallyAttemptedLanes); // Mark the current render as suspended and force it to restart. Once\n                    // these lanes finish successfully, we'll re-enable the error recovery\n                    // mechanism for subsequent updates.\n                    workInProgressRootInterleavedUpdatedLanes |= originallyAttemptedLanes;\n                    return RootSuspendedWithDelay;\n                } // The errors from the failed first attempt have been recovered. Add\n                // them to the collection of recoverable errors. We'll log them in the\n                // commit phase.\n                var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n                workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n                // from the first attempt, to preserve the causal sequence.\n                if (errorsFromSecondAttempt !== null) {\n                    queueRecoverableErrors(errorsFromSecondAttempt);\n                }\n            }\n            return exitStatus;\n        }\n        function queueRecoverableErrors(errors) {\n            if (workInProgressRootRecoverableErrors === null) {\n                workInProgressRootRecoverableErrors = errors;\n            } else {\n                // $FlowFixMe[method-unbinding]\n                workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n            }\n        }\n        function finishConcurrentRender(root, exitStatus, finishedWork, lanes) {\n            // TODO: The fact that most of these branches are identical suggests that some\n            // of the exit statuses are not best modeled as exit statuses and should be\n            // tracked orthogonally.\n            switch(exitStatus){\n                case RootInProgress:\n                case RootFatalErrored:\n                    {\n                        throw new Error('Root did not complete. This is a bug in React.');\n                    }\n                case RootSuspendedWithDelay:\n                    {\n                        if (includesOnlyTransitions(lanes)) {\n                            // This is a transition, so we should exit without committing a\n                            // placeholder and without scheduling a timeout. Delay indefinitely\n                            // until we receive more data.\n                            markRootSuspended(root, lanes, workInProgressDeferredLane);\n                            return;\n                        } // Commit the placeholder.\n                        break;\n                    }\n                case RootErrored:\n                    {\n                        // This render errored. Ignore any recoverable errors because we weren't actually\n                        // able to recover. Instead, whatever the final errors were is the ones we log.\n                        // This ensures that we only log the actual client side error if it's just a plain\n                        // error thrown from a component on the server and the client.\n                        workInProgressRootRecoverableErrors = null;\n                        break;\n                    }\n                case RootSuspended:\n                case RootCompleted:\n                    {\n                        break;\n                    }\n                default:\n                    {\n                        throw new Error('Unknown root exit status.');\n                    }\n            }\n            if (shouldForceFlushFallbacksInDEV()) {\n                // We're inside an `act` scope. Commit immediately.\n                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, workInProgressDeferredLane);\n            } else {\n                if (includesOnlyRetries(lanes) && alwaysThrottleRetries) {\n                    // This render only included retries, no updates. Throttle committing\n                    // retries so that we don't show too many loading states too quickly.\n                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(); // Don't bother with a very short suspense time.\n                    if (msUntilTimeout > 10) {\n                        markRootSuspended(root, lanes, workInProgressDeferredLane);\n                        var nextLanes = getNextLanes(root, NoLanes);\n                        if (nextLanes !== NoLanes) {\n                            // There's additional work we can do on this root. We might as well\n                            // attempt to work on that while we're suspended.\n                            return;\n                        } // The render is suspended, it hasn't timed out, and there's no\n                        // lower priority work to do. Instead of committing the fallback\n                        // immediately, wait for more data to arrive.\n                        // TODO: Combine retry throttling with Suspensey commits. Right now they\n                        // run one after the other.\n                        root.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, root, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane), msUntilTimeout);\n                        return;\n                    }\n                }\n                commitRootWhenReady(root, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane);\n            }\n        }\n        function commitRootWhenReady(root, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane) {\n            // TODO: Combine retry throttling with Suspensey commits. Right now they run\n            // one after the other.\n            var BothVisibilityAndMaySuspendCommit = Visibility | MaySuspendCommit;\n            var subtreeFlags = finishedWork.subtreeFlags;\n            if (subtreeFlags & ShouldSuspendCommit || (subtreeFlags & BothVisibilityAndMaySuspendCommit) === BothVisibilityAndMaySuspendCommit) {\n                // Before committing, ask the renderer whether the host tree is ready.\n                // If it's not, we'll wait until it notifies us.\n                startSuspendingCommit(); // This will walk the completed fiber tree and attach listeners to all\n                // the suspensey resources. The renderer is responsible for accumulating\n                // all the load events. This all happens in a single synchronous\n                // transaction, so it track state in its own module scope.\n                accumulateSuspenseyCommit(finishedWork); // At the end, ask the renderer if it's ready to commit, or if we should\n                // suspend. If it's not ready, it will return a callback to subscribe to\n                // a ready event.\n                var schedulePendingCommit = waitForCommitToBeReady();\n                if (schedulePendingCommit !== null) {\n                    // NOTE: waitForCommitToBeReady returns a subscribe function so that we\n                    // only allocate a function if the commit isn't ready yet. The other\n                    // pattern would be to always pass a callback to waitForCommitToBeReady.\n                    // Not yet ready to commit. Delay the commit until the renderer notifies\n                    // us that it's ready. This will be canceled if we start work on the\n                    // root again.\n                    root.cancelPendingCommit = schedulePendingCommit(commitRoot.bind(null, root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate));\n                    markRootSuspended(root, lanes, spawnedLane);\n                    return;\n                }\n            } // Otherwise, commit immediately.\n            commitRoot(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane);\n        }\n        function isRenderConsistentWithExternalStores(finishedWork) {\n            // Search the rendered tree for external store reads, and check whether the\n            // stores were mutated in a concurrent event. Intentionally using an iterative\n            // loop instead of recursion so we can exit early.\n            var node = finishedWork;\n            while(true){\n                if (node.flags & StoreConsistency) {\n                    var updateQueue = node.updateQueue;\n                    if (updateQueue !== null) {\n                        var checks = updateQueue.stores;\n                        if (checks !== null) {\n                            for(var i = 0; i < checks.length; i++){\n                                var check = checks[i];\n                                var getSnapshot = check.getSnapshot;\n                                var renderedValue = check.value;\n                                try {\n                                    if (!objectIs(getSnapshot(), renderedValue)) {\n                                        // Found an inconsistent store.\n                                        return false;\n                                    }\n                                } catch (error) {\n                                    // If `getSnapshot` throws, return `false`. This will schedule\n                                    // a re-render, and the error will be rethrown during render.\n                                    return false;\n                                }\n                            }\n                        }\n                    }\n                }\n                var child = node.child;\n                if (node.subtreeFlags & StoreConsistency && child !== null) {\n                    child.return = node;\n                    node = child;\n                    continue;\n                }\n                if (node === finishedWork) {\n                    return true;\n                }\n                while(node.sibling === null){\n                    if (node.return === null || node.return === finishedWork) {\n                        return true;\n                    }\n                    node = node.return;\n                }\n                node.sibling.return = node.return;\n                node = node.sibling;\n            } // Flow doesn't know this is unreachable, but eslint does\n            // eslint-disable-next-line no-unreachable\n            return true;\n        } // The extra indirections around markRootUpdated and markRootSuspended is\n        // needed to avoid a circular dependency between this module and\n        // ReactFiberLane. There's probably a better way to split up these modules and\n        // avoid this problem. Perhaps all the root-marking functions should move into\n        // the work loop.\n        function markRootUpdated(root, updatedLanes) {\n            markRootUpdated$1(root, updatedLanes);\n            {\n                // Check for recursive updates\n                if (executionContext & RenderContext) {\n                    workInProgressRootDidIncludeRecursiveRenderUpdate = true;\n                } else if (executionContext & CommitContext) {\n                    didIncludeCommitPhaseUpdate = true;\n                }\n                throwIfInfiniteUpdateLoopDetected();\n            }\n        }\n        function markRootPinged(root, pingedLanes) {\n            markRootPinged$1(root, pingedLanes);\n            {\n                // Check for recursive pings. Pings are conceptually different from updates in\n                // other contexts but we call it an \"update\" in this context because\n                // repeatedly pinging a suspended render can cause a recursive render loop.\n                // The relevant property is that it can result in a new render attempt\n                // being scheduled.\n                if (executionContext & RenderContext) {\n                    workInProgressRootDidIncludeRecursiveRenderUpdate = true;\n                } else if (executionContext & CommitContext) {\n                    didIncludeCommitPhaseUpdate = true;\n                }\n                throwIfInfiniteUpdateLoopDetected();\n            }\n        }\n        function markRootSuspended(root, suspendedLanes, spawnedLane) {\n            // When suspending, we should always exclude lanes that were pinged or (more\n            // rarely, since we try to avoid it) updated during the render phase.\n            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n            markRootSuspended$1(root, suspendedLanes, spawnedLane);\n        } // This is the entry point for synchronous tasks that don't go\n        // through Scheduler\n        function performSyncWorkOnRoot(root, lanes) {\n            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n                throw new Error('Should not already be working.');\n            }\n            var didFlushPassiveEffects = flushPassiveEffects();\n            if (didFlushPassiveEffects) {\n                // If passive effects were flushed, exit to the outer work loop in the root\n                // scheduler, so we can recompute the priority.\n                // TODO: We don't actually need this `ensureRootIsScheduled` call because\n                // this path is only reachable if the root is already part of the schedule.\n                // I'm including it only for consistency with the other exit points from\n                // this function. Can address in a subsequent refactor.\n                ensureRootIsScheduled(root);\n                return null;\n            }\n            {\n                syncNestedUpdateFlag();\n            }\n            var exitStatus = renderRootSync(root, lanes);\n            if (exitStatus === RootErrored) {\n                // If something threw an error, try rendering one more time. We'll render\n                // synchronously to block concurrent data mutations, and we'll includes\n                // all pending updates are included. If it still fails after the second\n                // attempt, we'll give up and commit the resulting tree.\n                var originallyAttemptedLanes = lanes;\n                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root, originallyAttemptedLanes);\n                if (errorRetryLanes !== NoLanes) {\n                    lanes = errorRetryLanes;\n                    exitStatus = recoverFromConcurrentError(root, originallyAttemptedLanes, errorRetryLanes);\n                }\n            }\n            if (exitStatus === RootFatalErrored) {\n                prepareFreshStack(root, NoLanes);\n                markRootSuspended(root, lanes, NoLane);\n                ensureRootIsScheduled(root);\n                return null;\n            }\n            if (exitStatus === RootDidNotComplete) {\n                // The render unwound without completing the tree. This happens in special\n                // cases where need to exit the current render without producing a\n                // consistent tree or committing.\n                markRootSuspended(root, lanes, workInProgressDeferredLane);\n                ensureRootIsScheduled(root);\n                return null;\n            } // We now have a consistent tree. Because this is a sync render, we\n            // will commit it even if something suspended.\n            var finishedWork = root.current.alternate;\n            root.finishedWork = finishedWork;\n            root.finishedLanes = lanes;\n            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, workInProgressDeferredLane); // Before exiting, make sure there's a callback scheduled for the next\n            // pending level.\n            ensureRootIsScheduled(root);\n            return null;\n        }\n        function flushRoot(root, lanes) {\n            if (lanes !== NoLanes) {\n                upgradePendingLanesToSync(root, lanes);\n                ensureRootIsScheduled(root);\n                if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n                    resetRenderTimer(); // TODO: For historical reasons this flushes all sync work across all\n                    // roots. It shouldn't really matter either way, but we could change this\n                    // to only flush the given root.\n                    flushSyncWorkOnAllRoots();\n                }\n            }\n        }\n        function getExecutionContext() {\n            return executionContext;\n        }\n        function deferredUpdates(fn) {\n            var prevTransition = ReactSharedInternals.T;\n            var previousPriority = getCurrentUpdatePriority();\n            try {\n                setCurrentUpdatePriority(DefaultEventPriority);\n                ReactSharedInternals.T = null;\n                return fn();\n            } finally{\n                setCurrentUpdatePriority(previousPriority);\n                ReactSharedInternals.T = prevTransition;\n            }\n        }\n        function batchedUpdates(fn, a) {\n            {\n                // batchedUpdates is a no-op now, but there's still some internal react-dom\n                // code calling it, that we can't remove until we remove legacy mode.\n                return fn(a);\n            }\n        }\n        function discreteUpdates(fn, a, b, c, d) {\n            var prevTransition = ReactSharedInternals.T;\n            var previousPriority = getCurrentUpdatePriority();\n            try {\n                setCurrentUpdatePriority(DiscreteEventPriority);\n                ReactSharedInternals.T = null;\n                return fn(a, b, c, d);\n            } finally{\n                setCurrentUpdatePriority(previousPriority);\n                ReactSharedInternals.T = prevTransition;\n                if (executionContext === NoContext) {\n                    resetRenderTimer();\n                }\n            }\n        } // Overload the definition to the two valid signatures.\n        // Warning, this opts-out of checking the function body.\n        // eslint-disable-next-line no-unused-vars\n        // eslint-disable-next-line no-redeclare\n        // eslint-disable-next-line no-redeclare\n        function flushSyncFromReconciler(fn) {\n            // In legacy mode, we flush pending passive effects at the beginning of the\n            // next event, not at the end of the previous one.\n            if (rootWithPendingPassiveEffects !== null && !disableLegacyMode && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n                flushPassiveEffects();\n            }\n            var prevExecutionContext = executionContext;\n            executionContext |= BatchedContext;\n            var prevTransition = ReactSharedInternals.T;\n            var previousPriority = getCurrentUpdatePriority();\n            try {\n                setCurrentUpdatePriority(DiscreteEventPriority);\n                ReactSharedInternals.T = null;\n                if (fn) {\n                    return fn();\n                } else {\n                    return undefined;\n                }\n            } finally{\n                setCurrentUpdatePriority(previousPriority);\n                ReactSharedInternals.T = prevTransition;\n                executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n                // Note that this will happen even if batchedUpdates is higher up\n                // the stack.\n                if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n                    flushSyncWorkOnAllRoots();\n                }\n            }\n        } // If called outside of a render or commit will flush all sync work on all roots\n        // Returns whether the the call was during a render or not\n        function flushSyncWork() {\n            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n                flushSyncWorkOnAllRoots();\n                return false;\n            }\n            return true;\n        }\n        function isAlreadyRendering() {\n            // Used by the renderer to print a warning if certain APIs are called from\n            // the wrong context.\n            return (executionContext & (RenderContext | CommitContext)) !== NoContext;\n        }\n        // hidden subtree. The stack logic is managed there because that's the only\n        // place that ever modifies it. Which module it lives in doesn't matter for\n        // performance because this function will get inlined regardless\n        function setEntangledRenderLanes(newEntangledRenderLanes) {\n            entangledRenderLanes = newEntangledRenderLanes;\n        }\n        function getEntangledRenderLanes() {\n            return entangledRenderLanes;\n        }\n        function resetWorkInProgressStack() {\n            if (workInProgress === null) return;\n            var interruptedWork;\n            if (workInProgressSuspendedReason === NotSuspended) {\n                // Normal case. Work-in-progress hasn't started yet. Unwind all\n                // its parents.\n                interruptedWork = workInProgress.return;\n            } else {\n                // Work-in-progress is in suspended state. Reset the work loop and unwind\n                // both the suspended fiber and all its parents.\n                resetSuspendedWorkLoopOnUnwind(workInProgress);\n                interruptedWork = workInProgress;\n            }\n            while(interruptedWork !== null){\n                var current = interruptedWork.alternate;\n                unwindInterruptedWork(current, interruptedWork);\n                interruptedWork = interruptedWork.return;\n            }\n            workInProgress = null;\n        }\n        function prepareFreshStack(root, lanes) {\n            root.finishedWork = null;\n            root.finishedLanes = NoLanes;\n            var timeoutHandle = root.timeoutHandle;\n            if (timeoutHandle !== noTimeout) {\n                // The root previous suspended and scheduled a timeout to commit a fallback\n                // state. Now that we have additional work, cancel the timeout.\n                root.timeoutHandle = noTimeout; // $FlowFixMe[incompatible-call] Complains noTimeout is not a TimeoutID, despite the check above\n                cancelTimeout(timeoutHandle);\n            }\n            var cancelPendingCommit = root.cancelPendingCommit;\n            if (cancelPendingCommit !== null) {\n                root.cancelPendingCommit = null;\n                cancelPendingCommit();\n            }\n            resetWorkInProgressStack();\n            workInProgressRoot = root;\n            var rootWorkInProgress = createWorkInProgress(root.current, null);\n            workInProgress = rootWorkInProgress;\n            workInProgressRootRenderLanes = lanes;\n            workInProgressSuspendedReason = NotSuspended;\n            workInProgressThrownValue = null;\n            workInProgressRootDidAttachPingListener = false;\n            workInProgressRootExitStatus = RootInProgress;\n            workInProgressRootSkippedLanes = NoLanes;\n            workInProgressRootInterleavedUpdatedLanes = NoLanes;\n            workInProgressRootPingedLanes = NoLanes;\n            workInProgressDeferredLane = NoLane;\n            workInProgressRootConcurrentErrors = null;\n            workInProgressRootRecoverableErrors = null;\n            workInProgressRootDidIncludeRecursiveRenderUpdate = false; // Get the lanes that are entangled with whatever we're about to render. We\n            // track these separately so we can distinguish the priority of the render\n            // task from the priority of the lanes it is entangled with. For example, a\n            // transition may not be allowed to finish unless it includes the Sync lane,\n            // which is currently suspended. We should be able to render the Transition\n            // and Sync lane in the same batch, but at Transition priority, because the\n            // Sync lane already suspended.\n            entangledRenderLanes = getEntangledLanes(root, lanes);\n            finishQueueingConcurrentUpdates();\n            {\n                ReactStrictModeWarnings.discardPendingWarnings();\n            }\n            return rootWorkInProgress;\n        }\n        function resetSuspendedWorkLoopOnUnwind(fiber) {\n            // Reset module-level state that was set during the render phase.\n            resetContextDependencies();\n            resetHooksOnUnwind(fiber);\n            resetChildReconcilerOnUnwind();\n        }\n        function handleThrow(root, thrownValue) {\n            // A component threw an exception. Usually this is because it suspended, but\n            // it also includes regular program errors.\n            //\n            // We're either going to unwind the stack to show a Suspense or error\n            // boundary, or we're going to replay the component again. Like after a\n            // promise resolves.\n            //\n            // Until we decide whether we're going to unwind or replay, we should preserve\n            // the current state of the work loop without resetting anything.\n            //\n            // If we do decide to unwind the stack, module-level variables will be reset\n            // in resetSuspendedWorkLoopOnUnwind.\n            // These should be reset immediately because they're only supposed to be set\n            // when React is executing user code.\n            resetHooksAfterThrow();\n            {\n                resetCurrentFiber();\n            }\n            if (thrownValue === SuspenseException) {\n                // This is a special type of exception used for Suspense. For historical\n                // reasons, the rest of the Suspense implementation expects the thrown value\n                // to be a thenable, because before `use` existed that was the (unstable)\n                // API for suspending. This implementation detail can change later, once we\n                // deprecate the old API in favor of `use`.\n                thrownValue = getSuspendedThenable();\n                workInProgressSuspendedReason = shouldRemainOnPreviousScreen() && // Check if there are other pending updates that might possibly unblock this\n                // component from suspending. This mirrors the check in\n                // renderDidSuspendDelayIfPossible. We should attempt to unify them somehow.\n                // TODO: Consider unwinding immediately, using the\n                // SuspendedOnHydration mechanism.\n                !includesNonIdleWork(workInProgressRootSkippedLanes) && !includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes) ? SuspendedOnData : // immediately resolved (i.e. in a microtask). Otherwise, trigger the\n                // nearest Suspense fallback.\n                SuspendedOnImmediate;\n            } else if (thrownValue === SuspenseyCommitException) {\n                thrownValue = getSuspendedThenable();\n                workInProgressSuspendedReason = SuspendedOnInstance;\n            } else if (thrownValue === SelectiveHydrationException) {\n                // An update flowed into a dehydrated boundary. Before we can apply the\n                // update, we need to finish hydrating. Interrupt the work-in-progress\n                // render so we can restart at the hydration lane.\n                //\n                // The ideal implementation would be able to switch contexts without\n                // unwinding the current stack.\n                //\n                // We could name this something more general but as of now it's the only\n                // case where we think this should happen.\n                workInProgressSuspendedReason = SuspendedOnHydration;\n            } else {\n                // This is a regular error.\n                var isWakeable = thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function';\n                workInProgressSuspendedReason = isWakeable ? // This has slightly different behavior than suspending with `use`.\n                SuspendedOnDeprecatedThrowPromise : // suspended, we must clear the thenable state to unblock the work loop.\n                SuspendedOnError;\n            }\n            workInProgressThrownValue = thrownValue;\n            var erroredWork = workInProgress;\n            if (erroredWork === null) {\n                // This is a fatal error\n                workInProgressRootExitStatus = RootFatalErrored;\n                logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));\n                return;\n            }\n            if (erroredWork.mode & ProfileMode) {\n                // Record the time spent rendering before an error was thrown. This\n                // avoids inaccurate Profiler durations in the case of a\n                // suspended render.\n                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n            }\n            {\n                markComponentRenderStopped();\n                switch(workInProgressSuspendedReason){\n                    case SuspendedOnError:\n                        {\n                            markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n                            break;\n                        }\n                    case SuspendedOnData:\n                    case SuspendedOnImmediate:\n                    case SuspendedOnDeprecatedThrowPromise:\n                    case SuspendedAndReadyToContinue:\n                        {\n                            var wakeable = thrownValue;\n                            markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n                            break;\n                        }\n                }\n            }\n        }\n        function shouldRemainOnPreviousScreen() {\n            // This is asking whether it's better to suspend the transition and remain\n            // on the previous screen, versus showing a fallback as soon as possible. It\n            // takes into account both the priority of render and also whether showing a\n            // fallback would produce a desirable user experience.\n            var handler = getSuspenseHandler();\n            if (handler === null) {\n                // There's no Suspense boundary that can provide a fallback. We have no\n                // choice but to remain on the previous screen.\n                // NOTE: We do this even for sync updates, for lack of any better option. In\n                // the future, we may change how we handle this, like by putting the whole\n                // root into a \"detached\" mode.\n                return true;\n            } // TODO: Once `use` has fully replaced the `throw promise` pattern, we should\n            // be able to remove the equivalent check in finishConcurrentRender, and rely\n            // just on this one.\n            if (includesOnlyTransitions(workInProgressRootRenderLanes)) {\n                if (getShellBoundary() === null) {\n                    // We're rendering inside the \"shell\" of the app. Activating the nearest\n                    // fallback would cause visible content to disappear. It's better to\n                    // suspend the transition and remain on the previous screen.\n                    return true;\n                } else {\n                    // We're rendering content that wasn't part of the previous screen.\n                    // Rather than block the transition, it's better to show a fallback as\n                    // soon as possible. The appearance of any nested fallbacks will be\n                    // throttled to avoid jank.\n                    return false;\n                }\n            }\n            if (includesOnlyRetries(workInProgressRootRenderLanes) || // In this context, an OffscreenLane counts as a Retry\n            // TODO: It's become increasingly clear that Retries and Offscreen are\n            // deeply connected. They probably can be unified further.\n            includesSomeLane(workInProgressRootRenderLanes, OffscreenLane)) {\n                // During a retry, we can suspend rendering if the nearest Suspense boundary\n                // is the boundary of the \"shell\", because we're guaranteed not to block\n                // any new content from appearing.\n                //\n                // The reason we must check if this is a retry is because it guarantees\n                // that suspending the work loop won't block an actual update, because\n                // retries don't \"update\" anything; they fill in fallbacks that were left\n                // behind by a previous transition.\n                return handler === getShellBoundary();\n            } // For all other Lanes besides Transitions and Retries, we should not wait\n            // for the data to load.\n            return false;\n        }\n        function pushDispatcher(container) {\n            var prevDispatcher = ReactSharedInternals.H;\n            ReactSharedInternals.H = ContextOnlyDispatcher;\n            if (prevDispatcher === null) {\n                // The React isomorphic package does not include a default dispatcher.\n                // Instead the first renderer will lazily attach one, in order to give\n                // nicer error messages.\n                return ContextOnlyDispatcher;\n            } else {\n                return prevDispatcher;\n            }\n        }\n        function popDispatcher(prevDispatcher) {\n            ReactSharedInternals.H = prevDispatcher;\n        }\n        function pushAsyncDispatcher() {\n            {\n                var prevAsyncDispatcher = ReactSharedInternals.A;\n                ReactSharedInternals.A = DefaultAsyncDispatcher;\n                return prevAsyncDispatcher;\n            }\n        }\n        function popAsyncDispatcher(prevAsyncDispatcher) {\n            {\n                ReactSharedInternals.A = prevAsyncDispatcher;\n            }\n        }\n        function markCommitTimeOfFallback() {\n            globalMostRecentFallbackTime = now$1();\n        }\n        function markSkippedUpdateLanes(lane) {\n            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n        }\n        function renderDidSuspend() {\n            if (workInProgressRootExitStatus === RootInProgress) {\n                workInProgressRootExitStatus = RootSuspended;\n            }\n        }\n        function renderDidSuspendDelayIfPossible() {\n            workInProgressRootExitStatus = RootSuspendedWithDelay; // Check if there are updates that we skipped tree that might have unblocked\n            // this render.\n            if ((includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)) && workInProgressRoot !== null) {\n                // Mark the current render as suspended so that we switch to working on\n                // the updates that were skipped. Usually we only suspend at the end of\n                // the render phase.\n                // TODO: We should probably always mark the root as suspended immediately\n                // (inside this function), since by suspending at the end of the render\n                // phase introduces a potential mistake where we suspend lanes that were\n                // pinged or updated while we were rendering.\n                // TODO: Consider unwinding immediately, using the\n                // SuspendedOnHydration mechanism.\n                markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane);\n            }\n        }\n        function renderDidError() {\n            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n                workInProgressRootExitStatus = RootErrored;\n            }\n        }\n        function queueConcurrentError(error) {\n            if (workInProgressRootConcurrentErrors === null) {\n                workInProgressRootConcurrentErrors = [\n                    error\n                ];\n            } else {\n                workInProgressRootConcurrentErrors.push(error);\n            }\n        } // Called during render to determine if anything has suspended.\n        // Returns false if we're not sure.\n        function renderHasNotSuspendedYet() {\n            // If something errored or completed, we can't really be sure,\n            // so those are false.\n            return workInProgressRootExitStatus === RootInProgress;\n        } // TODO: Over time, this function and renderRootConcurrent have become more\n        // and more similar. Not sure it makes sense to maintain forked paths. Consider\n        // unifying them again.\n        function renderRootSync(root, lanes) {\n            var prevExecutionContext = executionContext;\n            executionContext |= RenderContext;\n            var prevDispatcher = pushDispatcher();\n            var prevAsyncDispatcher = pushAsyncDispatcher(); // If the root or lanes have changed, throw out the existing stack\n            // and prepare a fresh one. Otherwise we'll continue where we left off.\n            if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n                {\n                    if (isDevToolsPresent) {\n                        var memoizedUpdaters = root.memoizedUpdaters;\n                        if (memoizedUpdaters.size > 0) {\n                            restorePendingUpdaters(root, workInProgressRootRenderLanes);\n                            memoizedUpdaters.clear();\n                        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n                        // If we bailout on this work, we'll move them back (like above).\n                        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n                        // That way we can keep the current update and future updates separate.\n                        movePendingFibersToMemoized(root, lanes);\n                    }\n                }\n                workInProgressTransitions = getTransitionsForLanes();\n                prepareFreshStack(root, lanes);\n            }\n            {\n                markRenderStarted(lanes);\n            }\n            var didSuspendInShell = false;\n            outer: do {\n                try {\n                    if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {\n                        // The work loop is suspended. During a synchronous render, we don't\n                        // yield to the main thread. Immediately unwind the stack. This will\n                        // trigger either a fallback or an error boundary.\n                        // TODO: For discrete and \"default\" updates (anything that's not\n                        // flushSync), we want to wait for the microtasks the flush before\n                        // unwinding. Will probably implement this using renderRootConcurrent,\n                        // or merge renderRootSync and renderRootConcurrent into the same\n                        // function and fork the behavior some other way.\n                        var unitOfWork = workInProgress;\n                        var thrownValue = workInProgressThrownValue;\n                        switch(workInProgressSuspendedReason){\n                            case SuspendedOnHydration:\n                                {\n                                    // Selective hydration. An update flowed into a dehydrated tree.\n                                    // Interrupt the current render so the work loop can switch to the\n                                    // hydration lane.\n                                    resetWorkInProgressStack();\n                                    workInProgressRootExitStatus = RootDidNotComplete;\n                                    break outer;\n                                }\n                            case SuspendedOnImmediate:\n                            case SuspendedOnData:\n                                {\n                                    if (!didSuspendInShell && getSuspenseHandler() === null) {\n                                        didSuspendInShell = true;\n                                    } // Intentional fallthrough\n                                }\n                            default:\n                                {\n                                    // Unwind then continue with the normal work loop.\n                                    workInProgressSuspendedReason = NotSuspended;\n                                    workInProgressThrownValue = null;\n                                    throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                                    break;\n                                }\n                        }\n                    }\n                    workLoopSync();\n                    break;\n                } catch (thrownValue) {\n                    handleThrow(root, thrownValue);\n                }\n            }while (true); // Check if something suspended in the shell. We use this to detect an\n            // infinite ping loop caused by an uncached promise.\n            //\n            // Only increment this counter once per synchronous render attempt across the\n            // whole tree. Even if there are many sibling components that suspend, this\n            // counter only gets incremented once.\n            if (didSuspendInShell) {\n                root.shellSuspendCounter++;\n            }\n            resetContextDependencies();\n            executionContext = prevExecutionContext;\n            popDispatcher(prevDispatcher);\n            popAsyncDispatcher(prevAsyncDispatcher);\n            if (workInProgress !== null) {\n                // This is a sync render, so we should have finished the whole tree.\n                throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n            }\n            {\n                markRenderStopped();\n            }\n            workInProgressRoot = null;\n            workInProgressRootRenderLanes = NoLanes; // It's safe to process the queue now that the render phase is complete.\n            finishQueueingConcurrentUpdates();\n            return workInProgressRootExitStatus;\n        } // The work loop is an extremely hot path. Tell Closure not to inline it.\n        /** @noinline */ function workLoopSync() {\n            // Perform work without checking if we need to yield between fiber.\n            while(workInProgress !== null){\n                performUnitOfWork(workInProgress);\n            }\n        }\n        function renderRootConcurrent(root, lanes) {\n            var prevExecutionContext = executionContext;\n            executionContext |= RenderContext;\n            var prevDispatcher = pushDispatcher();\n            var prevAsyncDispatcher = pushAsyncDispatcher(); // If the root or lanes have changed, throw out the existing stack\n            // and prepare a fresh one. Otherwise we'll continue where we left off.\n            if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n                {\n                    if (isDevToolsPresent) {\n                        var memoizedUpdaters = root.memoizedUpdaters;\n                        if (memoizedUpdaters.size > 0) {\n                            restorePendingUpdaters(root, workInProgressRootRenderLanes);\n                            memoizedUpdaters.clear();\n                        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n                        // If we bailout on this work, we'll move them back (like above).\n                        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n                        // That way we can keep the current update and future updates separate.\n                        movePendingFibersToMemoized(root, lanes);\n                    }\n                }\n                workInProgressTransitions = getTransitionsForLanes();\n                resetRenderTimer();\n                prepareFreshStack(root, lanes);\n            }\n            {\n                markRenderStarted(lanes);\n            }\n            outer: do {\n                try {\n                    if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {\n                        // The work loop is suspended. We need to either unwind the stack or\n                        // replay the suspended component.\n                        var unitOfWork = workInProgress;\n                        var thrownValue = workInProgressThrownValue;\n                        resumeOrUnwind: switch(workInProgressSuspendedReason){\n                            case SuspendedOnError:\n                                {\n                                    // Unwind then continue with the normal work loop.\n                                    workInProgressSuspendedReason = NotSuspended;\n                                    workInProgressThrownValue = null;\n                                    throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                                    break;\n                                }\n                            case SuspendedOnData:\n                                {\n                                    var thenable = thrownValue;\n                                    if (isThenableResolved(thenable)) {\n                                        // The data resolved. Try rendering the component again.\n                                        workInProgressSuspendedReason = NotSuspended;\n                                        workInProgressThrownValue = null;\n                                        replaySuspendedUnitOfWork(unitOfWork);\n                                        break;\n                                    } // The work loop is suspended on data. We should wait for it to\n                                    // resolve before continuing to render.\n                                    // TODO: Handle the case where the promise resolves synchronously.\n                                    // Usually this is handled when we instrument the promise to add a\n                                    // `status` field, but if the promise already has a status, we won't\n                                    // have added a listener until right here.\n                                    var onResolution = function() {\n                                        // Check if the root is still suspended on this promise.\n                                        if (workInProgressSuspendedReason === SuspendedOnData && workInProgressRoot === root) {\n                                            // Mark the root as ready to continue rendering.\n                                            workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                                        } // Ensure the root is scheduled. We should do this even if we're\n                                        // currently working on a different root, so that we resume\n                                        // rendering later.\n                                        ensureRootIsScheduled(root);\n                                    };\n                                    thenable.then(onResolution, onResolution);\n                                    break outer;\n                                }\n                            case SuspendedOnImmediate:\n                                {\n                                    // If this fiber just suspended, it's possible the data is already\n                                    // cached. Yield to the main thread to give it a chance to ping. If\n                                    // it does, we can retry immediately without unwinding the stack.\n                                    workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                                    break outer;\n                                }\n                            case SuspendedOnInstance:\n                                {\n                                    workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;\n                                    break outer;\n                                }\n                            case SuspendedAndReadyToContinue:\n                                {\n                                    var _thenable = thrownValue;\n                                    if (isThenableResolved(_thenable)) {\n                                        // The data resolved. Try rendering the component again.\n                                        workInProgressSuspendedReason = NotSuspended;\n                                        workInProgressThrownValue = null;\n                                        replaySuspendedUnitOfWork(unitOfWork);\n                                    } else {\n                                        // Otherwise, unwind then continue with the normal work loop.\n                                        workInProgressSuspendedReason = NotSuspended;\n                                        workInProgressThrownValue = null;\n                                        throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                                    }\n                                    break;\n                                }\n                            case SuspendedOnInstanceAndReadyToContinue:\n                                {\n                                    var resource = null;\n                                    switch(workInProgress.tag){\n                                        case HostHoistable:\n                                            {\n                                                resource = workInProgress.memoizedState;\n                                            }\n                                        // intentional fallthrough\n                                        case HostComponent:\n                                        case HostSingleton:\n                                            {\n                                                // Before unwinding the stack, check one more time if the\n                                                // instance is ready. It may have loaded when React yielded to\n                                                // the main thread.\n                                                // Assigning this to a constant so Flow knows the binding won't\n                                                // be mutated by `preloadInstance`.\n                                                var hostFiber = workInProgress;\n                                                var type = hostFiber.type;\n                                                var props = hostFiber.pendingProps;\n                                                var isReady = resource ? preloadResource(resource) : preloadInstance(type, props);\n                                                if (isReady) {\n                                                    // The data resolved. Resume the work loop as if nothing\n                                                    // suspended. Unlike when a user component suspends, we don't\n                                                    // have to replay anything because the host fiber\n                                                    // already completed.\n                                                    workInProgressSuspendedReason = NotSuspended;\n                                                    workInProgressThrownValue = null;\n                                                    var sibling = hostFiber.sibling;\n                                                    if (sibling !== null) {\n                                                        workInProgress = sibling;\n                                                    } else {\n                                                        var returnFiber = hostFiber.return;\n                                                        if (returnFiber !== null) {\n                                                            workInProgress = returnFiber;\n                                                            completeUnitOfWork(returnFiber);\n                                                        } else {\n                                                            workInProgress = null;\n                                                        }\n                                                    }\n                                                    break resumeOrUnwind;\n                                                }\n                                                break;\n                                            }\n                                        default:\n                                            {\n                                                // This will fail gracefully but it's not correct, so log a\n                                                // warning in dev.\n                                                if (true) {\n                                                    error('Unexpected type of fiber triggered a suspensey commit. ' + 'This is a bug in React.');\n                                                }\n                                                break;\n                                            }\n                                    } // Otherwise, unwind then continue with the normal work loop.\n                                    workInProgressSuspendedReason = NotSuspended;\n                                    workInProgressThrownValue = null;\n                                    throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                                    break;\n                                }\n                            case SuspendedOnDeprecatedThrowPromise:\n                                {\n                                    // Suspended by an old implementation that uses the `throw promise`\n                                    // pattern. The newer replaying behavior can cause subtle issues\n                                    // like infinite ping loops. So we maintain the old behavior and\n                                    // always unwind.\n                                    workInProgressSuspendedReason = NotSuspended;\n                                    workInProgressThrownValue = null;\n                                    throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                                    break;\n                                }\n                            case SuspendedOnHydration:\n                                {\n                                    // Selective hydration. An update flowed into a dehydrated tree.\n                                    // Interrupt the current render so the work loop can switch to the\n                                    // hydration lane.\n                                    resetWorkInProgressStack();\n                                    workInProgressRootExitStatus = RootDidNotComplete;\n                                    break outer;\n                                }\n                            default:\n                                {\n                                    throw new Error('Unexpected SuspendedReason. This is a bug in React.');\n                                }\n                        }\n                    }\n                    if ( true && ReactSharedInternals.actQueue !== null) {\n                        // `act` special case: If we're inside an `act` scope, don't consult\n                        // `shouldYield`. Always keep working until the render is complete.\n                        // This is not just an optimization: in a unit test environment, we\n                        // can't trust the result of `shouldYield`, because the host I/O is\n                        // likely mocked.\n                        workLoopSync();\n                    } else {\n                        workLoopConcurrent();\n                    }\n                    break;\n                } catch (thrownValue) {\n                    handleThrow(root, thrownValue);\n                }\n            }while (true);\n            resetContextDependencies();\n            popDispatcher(prevDispatcher);\n            popAsyncDispatcher(prevAsyncDispatcher);\n            executionContext = prevExecutionContext;\n            if (workInProgress !== null) {\n                // Still work remaining.\n                {\n                    markRenderYielded();\n                }\n                return RootInProgress;\n            } else {\n                // Completed the tree.\n                {\n                    markRenderStopped();\n                }\n                workInProgressRoot = null;\n                workInProgressRootRenderLanes = NoLanes; // It's safe to process the queue now that the render phase is complete.\n                finishQueueingConcurrentUpdates(); // Return the final exit status.\n                return workInProgressRootExitStatus;\n            }\n        }\n        /** @noinline */ function workLoopConcurrent() {\n            // Perform work until Scheduler asks us to yield\n            while(workInProgress !== null && !shouldYield()){\n                // $FlowFixMe[incompatible-call] found when upgrading Flow\n                performUnitOfWork(workInProgress);\n            }\n        }\n        function performUnitOfWork(unitOfWork) {\n            // The current, flushed, state of this fiber is the alternate. Ideally\n            // nothing should rely on this, but relying on it here means that we don't\n            // need an additional field on the work in progress.\n            var current = unitOfWork.alternate;\n            var next;\n            if ((unitOfWork.mode & ProfileMode) !== NoMode) {\n                startProfilerTimer(unitOfWork);\n                {\n                    next = runWithFiberInDEV(unitOfWork, beginWork, current, unitOfWork, entangledRenderLanes);\n                }\n                stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n            } else {\n                {\n                    next = runWithFiberInDEV(unitOfWork, beginWork, current, unitOfWork, entangledRenderLanes);\n                }\n            }\n            unitOfWork.memoizedProps = unitOfWork.pendingProps;\n            if (next === null) {\n                // If this doesn't spawn new work, complete the current work.\n                completeUnitOfWork(unitOfWork);\n            } else {\n                workInProgress = next;\n            }\n        }\n        function replaySuspendedUnitOfWork(unitOfWork) {\n            // This is a fork of performUnitOfWork specifcally for replaying a fiber that\n            // just suspended.\n            var next;\n            {\n                next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);\n            }\n            unitOfWork.memoizedProps = unitOfWork.pendingProps;\n            if (next === null) {\n                // If this doesn't spawn new work, complete the current work.\n                completeUnitOfWork(unitOfWork);\n            } else {\n                workInProgress = next;\n            }\n        }\n        function replayBeginWork(unitOfWork) {\n            // This is a fork of beginWork specifcally for replaying a fiber that\n            // just suspended.\n            var current = unitOfWork.alternate;\n            var next;\n            var isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;\n            if (isProfilingMode) {\n                startProfilerTimer(unitOfWork);\n            }\n            switch(unitOfWork.tag){\n                case SimpleMemoComponent:\n                case FunctionComponent:\n                    {\n                        // Resolve `defaultProps`. This logic is copied from `beginWork`.\n                        // TODO: Consider moving this switch statement into that module. Also,\n                        // could maybe use this as an opportunity to say `use` doesn't work with\n                        // `defaultProps` :)\n                        var Component = unitOfWork.type;\n                        var unresolvedProps = unitOfWork.pendingProps;\n                        var resolvedProps = unresolvedProps;\n                        var context;\n                        next = replayFunctionComponent(current, unitOfWork, resolvedProps, Component, context, workInProgressRootRenderLanes);\n                        break;\n                    }\n                case ForwardRef:\n                    {\n                        // Resolve `defaultProps`. This logic is copied from `beginWork`.\n                        // TODO: Consider moving this switch statement into that module. Also,\n                        // could maybe use this as an opportunity to say `use` doesn't work with\n                        // `defaultProps` :)\n                        var _Component = unitOfWork.type.render;\n                        var _unresolvedProps = unitOfWork.pendingProps;\n                        var _resolvedProps = _unresolvedProps;\n                        next = replayFunctionComponent(current, unitOfWork, _resolvedProps, _Component, unitOfWork.ref, workInProgressRootRenderLanes);\n                        break;\n                    }\n                case HostComponent:\n                    {\n                        // Some host components are stateful (that's how we implement form\n                        // actions) but we don't bother to reuse the memoized state because it's\n                        // not worth the extra code. The main reason to reuse the previous hooks\n                        // is to reuse uncached promises, but we happen to know that the only\n                        // promises that a host component might suspend on are definitely cached\n                        // because they are controlled by us. So don't bother.\n                        resetHooksOnUnwind(unitOfWork); // Fallthrough to the next branch.\n                    }\n                default:\n                    {\n                        // Other types besides function components are reset completely before\n                        // being replayed. Currently this only happens when a Usable type is\n                        // reconciled — the reconciler will suspend.\n                        //\n                        // We reset the fiber back to its original state; however, this isn't\n                        // a full \"unwind\" because we're going to reuse the promises that were\n                        // reconciled previously. So it's intentional that we don't call\n                        // resetSuspendedWorkLoopOnUnwind here.\n                        unwindInterruptedWork(current, unitOfWork);\n                        unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, entangledRenderLanes);\n                        next = beginWork(current, unitOfWork, entangledRenderLanes);\n                        break;\n                    }\n            }\n            if (isProfilingMode) {\n                stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n            }\n            return next;\n        }\n        function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue) {\n            // This is a fork of performUnitOfWork specifcally for unwinding a fiber\n            // that threw an exception.\n            //\n            // Return to the normal work loop. This will unwind the stack, and potentially\n            // result in showing a fallback.\n            resetSuspendedWorkLoopOnUnwind(unitOfWork);\n            var returnFiber = unitOfWork.return;\n            try {\n                // Find and mark the nearest Suspense or error boundary that can handle\n                // this \"exception\".\n                var didFatal = throwException(root, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes);\n                if (didFatal) {\n                    panicOnRootError(root, thrownValue);\n                    return;\n                }\n            } catch (error) {\n                // We had trouble processing the error. An example of this happening is\n                // when accessing the `componentDidCatch` property of an error boundary\n                // throws an error. A weird edge case. There's a regression test for this.\n                // To prevent an infinite loop, bubble the error up to the next parent.\n                if (returnFiber !== null) {\n                    workInProgress = returnFiber;\n                    throw error;\n                } else {\n                    panicOnRootError(root, thrownValue);\n                    return;\n                }\n            }\n            if (unitOfWork.flags & Incomplete) {\n                // Unwind the stack until we reach the nearest boundary.\n                unwindUnitOfWork(unitOfWork);\n            } else {\n                // Although the fiber suspended, we're intentionally going to commit it in\n                // an inconsistent state. We can do this safely in cases where we know the\n                // inconsistent tree will be hidden.\n                //\n                // This currently only applies to Legacy Suspense implementation, but we may\n                // port a version of this to concurrent roots, too, when performing a\n                // synchronous render. Because that will allow us to mutate the tree as we\n                // go instead of buffering mutations until the end. Though it's unclear if\n                // this particular path is how that would be implemented.\n                completeUnitOfWork(unitOfWork);\n            }\n        }\n        function panicOnRootError(root, error) {\n            // There's no ancestor that can handle this exception. This should never\n            // happen because the root is supposed to capture all errors that weren't\n            // caught by an error boundary. This is a fatal error, or panic condition,\n            // because we've run out of ways to recover.\n            workInProgressRootExitStatus = RootFatalErrored;\n            logUncaughtError(root, createCapturedValueAtFiber(error, root.current)); // Set `workInProgress` to null. This represents advancing to the next\n            // sibling, or the parent if there are no siblings. But since the root\n            // has no siblings nor a parent, we set it to null. Usually this is\n            // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n            // intentionally not calling those, we need set it here.\n            // TODO: Consider calling `unwindWork` to pop the contexts.\n            workInProgress = null;\n        }\n        function completeUnitOfWork(unitOfWork) {\n            // Attempt to complete the current unit of work, then move to the next\n            // sibling. If there are no more siblings, return to the parent fiber.\n            var completedWork = unitOfWork;\n            do {\n                {\n                    if ((completedWork.flags & Incomplete) !== NoFlags$1) {\n                        // NOTE: If we re-enable sibling prerendering in some cases, this branch\n                        // is where we would switch to the unwinding path.\n                        error('Internal React error: Expected this fiber to be complete, but ' + \"it isn't. It should have been unwound. This is a bug in React.\");\n                    }\n                }\n                // nothing should rely on this, but relying on it here means that we don't\n                // need an additional field on the work in progress.\n                var current = completedWork.alternate;\n                var returnFiber = completedWork.return;\n                var next = void 0;\n                if ((completedWork.mode & ProfileMode) === NoMode) {\n                    {\n                        next = runWithFiberInDEV(completedWork, completeWork, current, completedWork, entangledRenderLanes);\n                    }\n                } else {\n                    startProfilerTimer(completedWork);\n                    {\n                        next = runWithFiberInDEV(completedWork, completeWork, current, completedWork, entangledRenderLanes);\n                    }\n                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n                }\n                if (next !== null) {\n                    // Completing this fiber spawned new work. Work on that next.\n                    workInProgress = next;\n                    return;\n                }\n                var siblingFiber = completedWork.sibling;\n                if (siblingFiber !== null) {\n                    // If there is more work to do in this returnFiber, do that next.\n                    workInProgress = siblingFiber;\n                    return;\n                } // Otherwise, return to the parent\n                // $FlowFixMe[incompatible-type] we bail out when we get a null\n                completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n                workInProgress = completedWork;\n            }while (completedWork !== null); // We've reached the root.\n            if (workInProgressRootExitStatus === RootInProgress) {\n                workInProgressRootExitStatus = RootCompleted;\n            }\n        }\n        function unwindUnitOfWork(unitOfWork) {\n            var incompleteWork = unitOfWork;\n            do {\n                // The current, flushed, state of this fiber is the alternate. Ideally\n                // nothing should rely on this, but relying on it here means that we don't\n                // need an additional field on the work in progress.\n                var current = incompleteWork.alternate; // This fiber did not complete because something threw. Pop values off\n                // the stack without entering the complete phase. If this is a boundary,\n                // capture values if possible.\n                var next = unwindWork(current, incompleteWork); // Because this fiber did not complete, don't reset its lanes.\n                if (next !== null) {\n                    // Found a boundary that can handle this exception. Re-renter the\n                    // begin phase. This branch will return us to the normal work loop.\n                    //\n                    // Since we're restarting, remove anything that is not a host effect\n                    // from the effect tag.\n                    next.flags &= HostEffectMask;\n                    workInProgress = next;\n                    return;\n                } // Keep unwinding until we reach either a boundary or the root.\n                if ((incompleteWork.mode & ProfileMode) !== NoMode) {\n                    // Record the render duration for the fiber that errored.\n                    stopProfilerTimerIfRunningAndRecordDelta(incompleteWork, false); // Include the time spent working on failed children before continuing.\n                    var actualDuration = incompleteWork.actualDuration;\n                    var child = incompleteWork.child;\n                    while(child !== null){\n                        // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n                        actualDuration += child.actualDuration;\n                        child = child.sibling;\n                    }\n                    incompleteWork.actualDuration = actualDuration;\n                } // TODO: Once we stop prerendering siblings, instead of resetting the parent\n                // of the node being unwound, we should be able to reset node itself as we\n                // unwind the stack. Saves an additional null check.\n                var returnFiber = incompleteWork.return;\n                if (returnFiber !== null) {\n                    // Mark the parent fiber as incomplete and clear its subtree flags.\n                    // TODO: Once we stop prerendering siblings, we may be able to get rid of\n                    // the Incomplete flag because unwinding to the nearest boundary will\n                    // happen synchronously.\n                    returnFiber.flags |= Incomplete;\n                    returnFiber.subtreeFlags = NoFlags$1;\n                    returnFiber.deletions = null;\n                } // NOTE: If we re-enable sibling prerendering in some cases, here we\n                // would switch to the normal completion path: check if a sibling\n                // exists, and if so, begin work on it.\n                // Otherwise, return to the parent\n                // $FlowFixMe[incompatible-type] we bail out when we get a null\n                incompleteWork = returnFiber; // Update the next thing we're working on in case something throws.\n                workInProgress = incompleteWork;\n            }while (incompleteWork !== null); // We've unwound all the way to the root.\n            workInProgressRootExitStatus = RootDidNotComplete;\n            workInProgress = null;\n        }\n        function commitRoot(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane) {\n            // TODO: This no longer makes any sense. We already wrap the mutation and\n            // layout phases. Should be able to remove.\n            var prevTransition = ReactSharedInternals.T;\n            var previousUpdateLanePriority = getCurrentUpdatePriority();\n            try {\n                setCurrentUpdatePriority(DiscreteEventPriority);\n                ReactSharedInternals.T = null;\n                commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, previousUpdateLanePriority, spawnedLane);\n            } finally{\n                ReactSharedInternals.T = prevTransition;\n                setCurrentUpdatePriority(previousUpdateLanePriority);\n            }\n            return null;\n        }\n        function commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel, spawnedLane) {\n            do {\n                // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n                // means `flushPassiveEffects` will sometimes result in additional\n                // passive effects. So we need to keep flushing in a loop until there are\n                // no more pending effects.\n                // TODO: Might be better if `flushPassiveEffects` did not automatically\n                // flush synchronous work at the end, to avoid factoring hazards like this.\n                flushPassiveEffects();\n            }while (rootWithPendingPassiveEffects !== null);\n            flushRenderPhaseStrictModeWarningsInDEV();\n            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n                throw new Error('Should not already be working.');\n            }\n            var finishedWork = root.finishedWork;\n            var lanes = root.finishedLanes;\n            {\n                markCommitStarted(lanes);\n            }\n            if (finishedWork === null) {\n                {\n                    markCommitStopped();\n                }\n                return null;\n            } else {\n                {\n                    if (lanes === NoLanes) {\n                        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n                    }\n                }\n            }\n            root.finishedWork = null;\n            root.finishedLanes = NoLanes;\n            if (finishedWork === root.current) {\n                throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n            } // commitRoot never returns a continuation; it always finishes synchronously.\n            // So we can clear these now to allow a new callback to be scheduled.\n            root.callbackNode = null;\n            root.callbackPriority = NoLane;\n            root.cancelPendingCommit = null; // Check which lanes no longer have any work scheduled on them, and mark\n            // those as finished.\n            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes); // Make sure to account for lanes that were updated by a concurrent event\n            // during the render phase; don't mark them as finished.\n            var concurrentlyUpdatedLanes = getConcurrentlyUpdatedLanes();\n            remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes);\n            markRootFinished(root, remainingLanes, spawnedLane); // Reset this before firing side effects so we can detect recursive updates.\n            didIncludeCommitPhaseUpdate = false;\n            if (root === workInProgressRoot) {\n                // We can reset these now that they are finished.\n                workInProgressRoot = null;\n                workInProgress = null;\n                workInProgressRootRenderLanes = NoLanes;\n            } // If there are pending passive effects, schedule a callback to process them.\n            // Do this as early as possible, so it is queued before anything else that\n            // might get scheduled in the commit phase. (See #16714.)\n            // TODO: Delete all other places that schedule the passive effect callback\n            // They're redundant.\n            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1 || (finishedWork.flags & PassiveMask) !== NoFlags$1) {\n                if (!rootDoesHavePassiveEffects) {\n                    rootDoesHavePassiveEffects = true;\n                    pendingPassiveEffectsRemainingLanes = remainingLanes; // workInProgressTransitions might be overwritten, so we want\n                    // to store it in pendingPassiveTransitions until they get processed\n                    // We need to pass this through as an argument to commitRoot\n                    // because workInProgressTransitions might have changed between\n                    // the previous render and commit if we throttle the commit\n                    // with setTimeout\n                    pendingPassiveTransitions = transitions;\n                    scheduleCallback(NormalPriority$1, function() {\n                        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n                        // *after* passive effects fire to avoid freeing a cache pool that may\n                        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n                        return null;\n                    });\n                }\n            } // Check if there are any effects in the whole tree.\n            // TODO: This is left over from the effect list implementation, where we had\n            // to check for the existence of `firstEffect` to satisfy Flow. I think the\n            // only other reason this optimization exists is because it affects profiling.\n            // Reconsider whether this is necessary.\n            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;\n            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;\n            if (subtreeHasEffects || rootHasEffect) {\n                var prevTransition = ReactSharedInternals.T;\n                ReactSharedInternals.T = null;\n                var previousPriority = getCurrentUpdatePriority();\n                setCurrentUpdatePriority(DiscreteEventPriority);\n                var prevExecutionContext = executionContext;\n                executionContext |= CommitContext; // The commit phase is broken into several sub-phases. We do a separate pass\n                // of the effect list for each phase: all mutation effects come before all\n                // layout effects, and so on.\n                // The first phase a \"before mutation\" phase. We use this phase to read the\n                // state of the host tree right before we mutate it. This is where\n                // getSnapshotBeforeUpdate is called.\n                commitBeforeMutationEffects(root, finishedWork);\n                {\n                    // Mark the current commit time to be shared by all Profilers in this\n                    // batch. This enables them to be grouped later.\n                    recordCommitTime();\n                }\n                commitMutationEffects(root, finishedWork, lanes);\n                resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n                // the mutation phase, so that the previous tree is still current during\n                // componentWillUnmount, but before the layout phase, so that the finished\n                // work is current during componentDidMount/Update.\n                root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n                {\n                    markLayoutEffectsStarted(lanes);\n                }\n                commitLayoutEffects(finishedWork, root, lanes);\n                {\n                    markLayoutEffectsStopped();\n                }\n                // opportunity to paint.\n                requestPaint();\n                executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n                setCurrentUpdatePriority(previousPriority);\n                ReactSharedInternals.T = prevTransition;\n            } else {\n                // No effects.\n                root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n                // no effects.\n                // TODO: Maybe there's a better way to report this.\n                {\n                    recordCommitTime();\n                }\n            }\n            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n            if (rootDoesHavePassiveEffects) {\n                // This commit has passive effects. Stash a reference to them. But don't\n                // schedule a callback until after flushing layout work.\n                rootDoesHavePassiveEffects = false;\n                rootWithPendingPassiveEffects = root;\n                pendingPassiveEffectsLanes = lanes;\n            } else {\n                // There were no passive effects, so we can immediately release the cache\n                // pool for this render.\n                releaseRootPooledCache(root, remainingLanes);\n                {\n                    nestedPassiveUpdateCount = 0;\n                    rootWithPassiveNestedUpdates = null;\n                }\n            } // Read this again, since an effect might have updated it\n            remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n            // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n            // is to detect whether something might have called setState inside\n            // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n            // inside `componentDidCatch` is itself flawed — that's why we recommend\n            // `getDerivedStateFromError` instead. However, it could be improved by\n            // checking if remainingLanes includes Sync work, instead of whether there's\n            // any work remaining at all (which would also include stuff like Suspense\n            // retries or transitions). It's been like this for a while, though, so fixing\n            // it probably isn't that urgent.\n            if (remainingLanes === NoLanes) {\n                // If there's no remaining work, we can clear the set of already failed\n                // error boundaries.\n                legacyErrorBoundariesThatAlreadyFailed = null;\n            }\n            {\n                if (!rootDidHavePassiveEffects) {\n                    commitDoubleInvokeEffectsInDEV(root);\n                }\n            }\n            onCommitRoot$1(finishedWork.stateNode, renderPriorityLevel);\n            {\n                if (isDevToolsPresent) {\n                    root.memoizedUpdaters.clear();\n                }\n            }\n            {\n                onCommitRoot();\n            }\n            // additional work on this root is scheduled.\n            ensureRootIsScheduled(root);\n            if (recoverableErrors !== null) {\n                // There were errors during this render, but recovered from them without\n                // needing to surface it to the UI. We log them here.\n                var onRecoverableError = root.onRecoverableError;\n                for(var i = 0; i < recoverableErrors.length; i++){\n                    var recoverableError = recoverableErrors[i];\n                    var errorInfo = makeErrorInfo(recoverableError.stack);\n                    {\n                        runWithFiberInDEV(recoverableError.source, onRecoverableError, recoverableError.value, errorInfo);\n                    }\n                }\n            } // If the passive effects are the result of a discrete render, flush them\n            // synchronously at the end of the current task so that the result is\n            // immediately observable. Otherwise, we assume that they are not\n            // order-dependent and do not need to be observed by external systems, so we\n            // can wait until after paint.\n            // TODO: We can optimize this by not scheduling the callback earlier. Since we\n            // currently schedule the callback in multiple places, will wait until those\n            // are consolidated.\n            if (includesSyncLane(pendingPassiveEffectsLanes) && disableLegacyMode) {\n                flushPassiveEffects();\n            } // Read this again, since a passive effect might have updated it\n            remainingLanes = root.pendingLanes; // Check if this render scheduled a cascading synchronous update. This is a\n            // heurstic to detect infinite update loops. We are intentionally excluding\n            // hydration lanes in this check, because render triggered by selective\n            // hydration is conceptually not an update.\n            if (// the render phase or the commit phase. We track these explicitly because\n            // we can't infer from the remaining lanes alone.\n            didIncludeRenderPhaseUpdate || didIncludeCommitPhaseUpdate || // Was the finished render the result of an update (not hydration)?\n            includesSomeLane(lanes, UpdateLanes) && // Did it schedule a sync update?\n            includesSomeLane(remainingLanes, SyncUpdateLanes)) {\n                {\n                    markNestedUpdateScheduled();\n                }\n                // finishing. If there are too many, it indicates an infinite update loop.\n                if (root === rootWithNestedUpdates) {\n                    nestedUpdateCount++;\n                } else {\n                    nestedUpdateCount = 0;\n                    rootWithNestedUpdates = root;\n                }\n            } else {\n                nestedUpdateCount = 0;\n            } // If layout work was scheduled, flush it now.\n            flushSyncWorkOnAllRoots();\n            {\n                markCommitStopped();\n            }\n            return null;\n        }\n        function makeErrorInfo(componentStack) {\n            var errorInfo = {\n                componentStack: componentStack\n            };\n            {\n                Object.defineProperty(errorInfo, 'digest', {\n                    get: function() {\n                        error('You are accessing \"digest\" from the errorInfo object passed to onRecoverableError.' + ' This property is no longer provided as part of errorInfo but can be accessed as a property' + ' of the Error instance itself.');\n                    }\n                });\n            }\n            return errorInfo;\n        }\n        function releaseRootPooledCache(root, remainingLanes) {\n            {\n                var pooledCacheLanes = root.pooledCacheLanes &= remainingLanes;\n                if (pooledCacheLanes === NoLanes) {\n                    // None of the remaining work relies on the cache pool. Clear it so\n                    // subsequent requests get a new cache\n                    var pooledCache = root.pooledCache;\n                    if (pooledCache != null) {\n                        root.pooledCache = null;\n                        releaseCache(pooledCache);\n                    }\n                }\n            }\n        }\n        function flushPassiveEffects() {\n            // Returns whether passive effects were flushed.\n            // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n            // probably just combine the two functions. I believe they were only separate\n            // in the first place because we used to wrap it with\n            // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n            // priority within React itself, so we can mutate the variable directly.\n            if (rootWithPendingPassiveEffects !== null) {\n                // Cache the root since rootWithPendingPassiveEffects is cleared in\n                // flushPassiveEffectsImpl\n                var root = rootWithPendingPassiveEffects; // Cache and clear the remaining lanes flag; it must be reset since this\n                // method can be called from various places, not always from commitRoot\n                // where the remaining lanes are known\n                var remainingLanes = pendingPassiveEffectsRemainingLanes;\n                pendingPassiveEffectsRemainingLanes = NoLanes;\n                var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n                var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n                var prevTransition = ReactSharedInternals.T;\n                var previousPriority = getCurrentUpdatePriority();\n                try {\n                    setCurrentUpdatePriority(priority);\n                    ReactSharedInternals.T = null;\n                    return flushPassiveEffectsImpl();\n                } finally{\n                    setCurrentUpdatePriority(previousPriority);\n                    ReactSharedInternals.T = prevTransition; // Once passive effects have run for the tree - giving components a\n                    // chance to retain cache instances they use - release the pooled\n                    // cache at the root (if there is one)\n                    releaseRootPooledCache(root, remainingLanes);\n                }\n            }\n            return false;\n        }\n        function enqueuePendingPassiveProfilerEffect(fiber) {\n            {\n                pendingPassiveProfilerEffects.push(fiber);\n                if (!rootDoesHavePassiveEffects) {\n                    rootDoesHavePassiveEffects = true;\n                    scheduleCallback(NormalPriority$1, function() {\n                        flushPassiveEffects();\n                        return null;\n                    });\n                }\n            }\n        }\n        function flushPassiveEffectsImpl() {\n            if (rootWithPendingPassiveEffects === null) {\n                return false;\n            } // Cache and clear the transitions flag\n            var transitions = pendingPassiveTransitions;\n            pendingPassiveTransitions = null;\n            var root = rootWithPendingPassiveEffects;\n            var lanes = pendingPassiveEffectsLanes;\n            rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n            // Figure out why and fix it. It's not causing any known issues (probably\n            // because it's only used for profiling), but it's a refactor hazard.\n            pendingPassiveEffectsLanes = NoLanes;\n            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n                throw new Error('Cannot flush passive effects while already rendering.');\n            }\n            {\n                isFlushingPassiveEffects = true;\n                didScheduleUpdateDuringPassiveEffects = false;\n            }\n            {\n                markPassiveEffectsStarted(lanes);\n            }\n            var prevExecutionContext = executionContext;\n            executionContext |= CommitContext;\n            commitPassiveUnmountEffects(root.current);\n            commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects\n            {\n                var profilerEffects = pendingPassiveProfilerEffects;\n                pendingPassiveProfilerEffects = [];\n                for(var i = 0; i < profilerEffects.length; i++){\n                    var fiber = profilerEffects[i];\n                    commitPassiveEffectDurations(root, fiber);\n                }\n            }\n            {\n                markPassiveEffectsStopped();\n            }\n            {\n                commitDoubleInvokeEffectsInDEV(root);\n            }\n            executionContext = prevExecutionContext;\n            flushSyncWorkOnAllRoots();\n            {\n                // If additional passive effects were scheduled, increment a counter. If this\n                // exceeds the limit, we'll fire a warning.\n                if (didScheduleUpdateDuringPassiveEffects) {\n                    if (root === rootWithPassiveNestedUpdates) {\n                        nestedPassiveUpdateCount++;\n                    } else {\n                        nestedPassiveUpdateCount = 0;\n                        rootWithPassiveNestedUpdates = root;\n                    }\n                } else {\n                    nestedPassiveUpdateCount = 0;\n                }\n                isFlushingPassiveEffects = false;\n                didScheduleUpdateDuringPassiveEffects = false;\n            }\n            onPostCommitRoot(root);\n            {\n                var stateNode = root.current.stateNode;\n                stateNode.effectDuration = 0;\n                stateNode.passiveEffectDuration = 0;\n            }\n            return true;\n        }\n        function isAlreadyFailedLegacyErrorBoundary(instance) {\n            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n        }\n        function markLegacyErrorBoundaryAsFailed(instance) {\n            if (legacyErrorBoundariesThatAlreadyFailed === null) {\n                legacyErrorBoundariesThatAlreadyFailed = new Set([\n                    instance\n                ]);\n            } else {\n                legacyErrorBoundariesThatAlreadyFailed.add(instance);\n            }\n        }\n        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n            var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n            var update = createRootErrorUpdate(rootFiber.stateNode, errorInfo, SyncLane);\n            var root = enqueueUpdate(rootFiber, update, SyncLane);\n            if (root !== null) {\n                markRootUpdated(root, SyncLane);\n                ensureRootIsScheduled(root);\n            }\n        }\n        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n            {\n                setIsRunningInsertionEffect(false);\n            }\n            if (sourceFiber.tag === HostRoot) {\n                // Error was thrown at the root. There is no parent, so the root\n                // itself should capture it.\n                captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n                return;\n            }\n            var fiber = nearestMountedAncestor;\n            while(fiber !== null){\n                if (fiber.tag === HostRoot) {\n                    captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n                    return;\n                } else if (fiber.tag === ClassComponent) {\n                    var ctor = fiber.type;\n                    var instance = fiber.stateNode;\n                    if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n                        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n                        var update = createClassErrorUpdate(SyncLane);\n                        var root = enqueueUpdate(fiber, update, SyncLane);\n                        if (root !== null) {\n                            initializeClassErrorUpdate(update, root, fiber, errorInfo);\n                            markRootUpdated(root, SyncLane);\n                            ensureRootIsScheduled(root);\n                        }\n                        return;\n                    }\n                }\n                fiber = fiber.return;\n            }\n            {\n                error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Potential ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n            }\n        }\n        function attachPingListener(root, wakeable, lanes) {\n            // Attach a ping listener\n            //\n            // The data might resolve before we have a chance to commit the fallback. Or,\n            // in the case of a refresh, we'll never commit a fallback. So we need to\n            // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n            // try rendering the tree again.\n            //\n            // Only attach a listener if one does not already exist for the lanes\n            // we're currently rendering (which acts like a \"thread ID\" here).\n            //\n            // We only need to do this in concurrent mode. Legacy Suspense always\n            // commits fallbacks synchronously, so there are no pings.\n            var pingCache = root.pingCache;\n            var threadIDs;\n            if (pingCache === null) {\n                pingCache = root.pingCache = new PossiblyWeakMap();\n                threadIDs = new Set();\n                pingCache.set(wakeable, threadIDs);\n            } else {\n                threadIDs = pingCache.get(wakeable);\n                if (threadIDs === undefined) {\n                    threadIDs = new Set();\n                    pingCache.set(wakeable, threadIDs);\n                }\n            }\n            if (!threadIDs.has(lanes)) {\n                workInProgressRootDidAttachPingListener = true; // Memoize using the thread ID to prevent redundant listeners.\n                threadIDs.add(lanes);\n                var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n                {\n                    if (isDevToolsPresent) {\n                        // If we have pending work still, restore the original updaters\n                        restorePendingUpdaters(root, lanes);\n                    }\n                }\n                wakeable.then(ping, ping);\n            }\n        }\n        function pingSuspendedRoot(root, wakeable, pingedLanes) {\n            var pingCache = root.pingCache;\n            if (pingCache !== null) {\n                // The wakeable resolved, so we no longer need to memoize, because it will\n                // never be thrown again.\n                pingCache.delete(wakeable);\n            }\n            markRootPinged(root, pingedLanes);\n            warnIfSuspenseResolutionNotWrappedWithActDEV();\n            if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n                // Received a ping at the same priority level at which we're currently\n                // rendering. We might want to restart this render. This should mirror\n                // the logic of whether or not a root suspends once it completes.\n                // TODO: If we're rendering sync either due to Sync, Batched or expired,\n                // we should probably never restart.\n                // If we're suspended with delay, or if it's a retry, we'll always suspend\n                // so we can always restart.\n                if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n                    // Force a restart from the root by unwinding the stack. Unless this is\n                    // being called from the render phase, because that would cause a crash.\n                    if ((executionContext & RenderContext) === NoContext) {\n                        prepareFreshStack(root, NoLanes);\n                    }\n                } else {\n                    // Even though we can't restart right now, we might get an\n                    // opportunity later. So we mark this render as having a ping.\n                    workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n                }\n            }\n            ensureRootIsScheduled(root);\n        }\n        function retryTimedOutBoundary(boundaryFiber, retryLane) {\n            // The boundary fiber (a Suspense component or SuspenseList component)\n            // previously was rendered in its fallback state. One of the promises that\n            // suspended it has resolved, which means at least part of the tree was\n            // likely unblocked. Try rendering again, at a new lanes.\n            if (retryLane === NoLane) {\n                // TODO: Assign this to `suspenseState.retryLane`? to avoid\n                // unnecessary entanglement?\n                retryLane = requestRetryLane();\n            } // TODO: Special case idle priority?\n            var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n            if (root !== null) {\n                markRootUpdated(root, retryLane);\n                ensureRootIsScheduled(root);\n            }\n        }\n        function retryDehydratedSuspenseBoundary(boundaryFiber) {\n            var suspenseState = boundaryFiber.memoizedState;\n            var retryLane = NoLane;\n            if (suspenseState !== null) {\n                retryLane = suspenseState.retryLane;\n            }\n            retryTimedOutBoundary(boundaryFiber, retryLane);\n        }\n        function resolveRetryWakeable(boundaryFiber, wakeable) {\n            var retryLane = NoLane; // Default\n            var retryCache;\n            switch(boundaryFiber.tag){\n                case SuspenseComponent:\n                    retryCache = boundaryFiber.stateNode;\n                    var suspenseState = boundaryFiber.memoizedState;\n                    if (suspenseState !== null) {\n                        retryLane = suspenseState.retryLane;\n                    }\n                    break;\n                case SuspenseListComponent:\n                    retryCache = boundaryFiber.stateNode;\n                    break;\n                case OffscreenComponent:\n                    {\n                        var instance = boundaryFiber.stateNode;\n                        retryCache = instance._retryCache;\n                        break;\n                    }\n                default:\n                    throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');\n            }\n            if (retryCache !== null) {\n                // The wakeable resolved, so we no longer need to memoize, because it will\n                // never be thrown again.\n                retryCache.delete(wakeable);\n            }\n            retryTimedOutBoundary(boundaryFiber, retryLane);\n        }\n        function throwIfInfiniteUpdateLoopDetected() {\n            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n                nestedUpdateCount = 0;\n                nestedPassiveUpdateCount = 0;\n                rootWithNestedUpdates = null;\n                rootWithPassiveNestedUpdates = null;\n                {\n                    if (executionContext & RenderContext && workInProgressRoot !== null) {\n                        // We're in the render phase. Disable the concurrent error recovery\n                        // mechanism to ensure that the error we're about to throw gets handled.\n                        // We need it to trigger the nearest error boundary so that the infinite\n                        // update loop is broken.\n                        workInProgressRoot.errorRecoveryDisabledLanes = mergeLanes(workInProgressRoot.errorRecoveryDisabledLanes, workInProgressRootRenderLanes);\n                    }\n                }\n                throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n            }\n            {\n                if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n                    nestedPassiveUpdateCount = 0;\n                    rootWithPassiveNestedUpdates = null;\n                    error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n                }\n            }\n        }\n        function flushRenderPhaseStrictModeWarningsInDEV() {\n            {\n                ReactStrictModeWarnings.flushLegacyContextWarning();\n                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n            }\n        }\n        function recursivelyTraverseAndDoubleInvokeEffectsInDEV(root, parentFiber, isInStrictMode) {\n            if ((parentFiber.subtreeFlags & (PlacementDEV | Visibility)) === NoFlags$1) {\n                // Parent's descendants have already had effects double invoked.\n                // Early exit to avoid unnecessary tree traversal.\n                return;\n            }\n            var child = parentFiber.child;\n            while(child !== null){\n                doubleInvokeEffectsInDEVIfNecessary(root, child, isInStrictMode);\n                child = child.sibling;\n            }\n        } // Unconditionally disconnects and connects passive and layout effects.\n        function doubleInvokeEffectsOnFiber(root, fiber) {\n            var shouldDoubleInvokePassiveEffects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n            setIsStrictModeForDevtools(true);\n            disappearLayoutEffects(fiber);\n            if (shouldDoubleInvokePassiveEffects) {\n                disconnectPassiveEffect(fiber);\n            }\n            reappearLayoutEffects(root, fiber.alternate, fiber, false);\n            if (shouldDoubleInvokePassiveEffects) {\n                reconnectPassiveEffects(root, fiber, NoLanes, null, false);\n            }\n            setIsStrictModeForDevtools(false);\n        }\n        function doubleInvokeEffectsInDEVIfNecessary(root, fiber, parentIsInStrictMode) {\n            var isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;\n            var isInStrictMode = parentIsInStrictMode || isStrictModeFiber; // First case: the fiber **is not** of type OffscreenComponent. No\n            // special rules apply to double invoking effects.\n            if (fiber.tag !== OffscreenComponent) {\n                if (fiber.flags & PlacementDEV) {\n                    if (isInStrictMode) {\n                        runWithFiberInDEV(fiber, doubleInvokeEffectsOnFiber, root, fiber, (fiber.mode & NoStrictPassiveEffectsMode) === NoMode);\n                    }\n                } else {\n                    recursivelyTraverseAndDoubleInvokeEffectsInDEV(root, fiber, isInStrictMode);\n                }\n                return;\n            } // Second case: the fiber **is** of type OffscreenComponent.\n            // This branch contains cases specific to Offscreen.\n            if (fiber.memoizedState === null) {\n                // Only consider Offscreen that is visible.\n                // TODO (Offscreen) Handle manual mode.\n                if (isInStrictMode && fiber.flags & Visibility) {\n                    // Double invoke effects on Offscreen's subtree only\n                    // if it is visible and its visibility has changed.\n                    runWithFiberInDEV(fiber, doubleInvokeEffectsOnFiber, root, fiber);\n                } else if (fiber.subtreeFlags & PlacementDEV) {\n                    // Something in the subtree could have been suspended.\n                    // We need to continue traversal and find newly inserted fibers.\n                    runWithFiberInDEV(fiber, recursivelyTraverseAndDoubleInvokeEffectsInDEV, root, fiber, isInStrictMode);\n                }\n            }\n        }\n        function commitDoubleInvokeEffectsInDEV(root, hasPassiveEffects) {\n            {\n                {\n                    var doubleInvokeEffects = true;\n                    if (!(root.current.mode & (StrictLegacyMode | StrictEffectsMode))) {\n                        doubleInvokeEffects = false;\n                    }\n                    recursivelyTraverseAndDoubleInvokeEffectsInDEV(root, root.current, doubleInvokeEffects);\n                }\n            }\n        }\n        var didWarnStateUpdateForNotYetMountedComponent = null;\n        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n            {\n                if ((executionContext & RenderContext) !== NoContext) {\n                    // We let the other warning about render phase updates deal with this one.\n                    return;\n                }\n                var tag = fiber.tag;\n                if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n                    // Only warn for user-defined components, not internal ones like Suspense.\n                    return;\n                } // We show the whole stack but dedupe on the top component's name because\n                // the problematic code almost always lies inside that component.\n                var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n                if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n                    if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n                        return;\n                    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n                } else {\n                    didWarnStateUpdateForNotYetMountedComponent = new Set([\n                        componentName\n                    ]);\n                }\n                runWithFiberInDEV(fiber, function() {\n                    error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n                });\n            }\n        }\n        var didWarnAboutUpdateInRender = false;\n        var didWarnAboutUpdateInRenderForAnotherComponent;\n        {\n            didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n        }\n        function warnAboutRenderPhaseUpdatesInDEV(fiber) {\n            {\n                if (isRendering) {\n                    switch(fiber.tag){\n                        case FunctionComponent:\n                        case ForwardRef:\n                        case SimpleMemoComponent:\n                            {\n                                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n                                var dedupeKey = renderingComponentName;\n                                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n                                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n                                    var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n                                    error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://react.dev/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n                                }\n                                break;\n                            }\n                        case ClassComponent:\n                            {\n                                if (!didWarnAboutUpdateInRender) {\n                                    error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n                                    didWarnAboutUpdateInRender = true;\n                                }\n                                break;\n                            }\n                    }\n                }\n            }\n        }\n        function restorePendingUpdaters(root, lanes) {\n            {\n                if (isDevToolsPresent) {\n                    var memoizedUpdaters = root.memoizedUpdaters;\n                    memoizedUpdaters.forEach(function(schedulingFiber) {\n                        addFiberToLanesMap(root, schedulingFiber, lanes);\n                    }); // This function intentionally does not clear memoized updaters.\n                // Those may still be relevant to the current commit\n                // and a future one (e.g. Suspense).\n                }\n            }\n        }\n        var fakeActCallbackNode = {}; // $FlowFixMe[missing-local-annot]\n        function scheduleCallback(priorityLevel, callback) {\n            {\n                // If we're currently inside an `act` scope, bypass Scheduler and push to\n                // the `act` queue instead.\n                var actQueue = ReactSharedInternals.actQueue;\n                if (actQueue !== null) {\n                    actQueue.push(callback);\n                    return fakeActCallbackNode;\n                } else {\n                    return scheduleCallback$3(priorityLevel, callback);\n                }\n            }\n        }\n        function shouldForceFlushFallbacksInDEV() {\n            // Never force flush in production. This function should get stripped out.\n            return ReactSharedInternals.actQueue !== null;\n        }\n        function warnIfUpdatesNotWrappedWithActDEV(fiber) {\n            {\n                {\n                    if (!isConcurrentActEnvironment()) {\n                        // Not in an act environment. No need to warn.\n                        return;\n                    }\n                }\n                if (ReactSharedInternals.actQueue === null) {\n                    runWithFiberInDEV(fiber, function() {\n                        error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://react.dev/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n                    });\n                }\n            }\n        }\n        function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n            {\n                if (isConcurrentActEnvironment() && ReactSharedInternals.actQueue === null) {\n                    error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://react.dev/link/wrap-tests-with-act');\n                }\n            }\n        }\n        function setIsRunningInsertionEffect(isRunning) {\n            {\n                isRunningInsertionEffect = isRunning;\n            }\n        }\n        /* eslint-disable react-internal/prod-error-codes */ // Used by React Refresh runtime through DevTools Global Hook.\n        var resolveFamily = null;\n        var failedBoundaries = null;\n        var setRefreshHandler = function(handler) {\n            {\n                resolveFamily = handler;\n            }\n        };\n        function resolveFunctionForHotReloading(type) {\n            {\n                if (resolveFamily === null) {\n                    // Hot reloading is disabled.\n                    return type;\n                }\n                var family = resolveFamily(type);\n                if (family === undefined) {\n                    return type;\n                } // Use the latest known implementation.\n                return family.current;\n            }\n        }\n        function resolveClassForHotReloading(type) {\n            // No implementation differences.\n            return resolveFunctionForHotReloading(type);\n        }\n        function resolveForwardRefForHotReloading(type) {\n            {\n                if (resolveFamily === null) {\n                    // Hot reloading is disabled.\n                    return type;\n                }\n                var family = resolveFamily(type);\n                if (family === undefined) {\n                    // Check if we're dealing with a real forwardRef. Don't want to crash early.\n                    if (type !== null && type !== undefined && typeof type.render === 'function') {\n                        // ForwardRef is special because its resolved .type is an object,\n                        // but it's possible that we only have its inner render function in the map.\n                        // If that inner render function is different, we'll build a new forwardRef type.\n                        var currentRender = resolveFunctionForHotReloading(type.render);\n                        if (type.render !== currentRender) {\n                            var syntheticType = {\n                                $$typeof: REACT_FORWARD_REF_TYPE,\n                                render: currentRender\n                            };\n                            if (type.displayName !== undefined) {\n                                syntheticType.displayName = type.displayName;\n                            }\n                            return syntheticType;\n                        }\n                    }\n                    return type;\n                } // Use the latest known implementation.\n                return family.current;\n            }\n        }\n        function isCompatibleFamilyForHotReloading(fiber, element) {\n            {\n                if (resolveFamily === null) {\n                    // Hot reloading is disabled.\n                    return false;\n                }\n                var prevType = fiber.elementType;\n                var nextType = element.type; // If we got here, we know types aren't === equal.\n                var needsCompareFamilies = false;\n                var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n                switch(fiber.tag){\n                    case ClassComponent:\n                        {\n                            if (typeof nextType === 'function') {\n                                needsCompareFamilies = true;\n                            }\n                            break;\n                        }\n                    case FunctionComponent:\n                        {\n                            if (typeof nextType === 'function') {\n                                needsCompareFamilies = true;\n                            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                                // We don't know the inner type yet.\n                                // We're going to assume that the lazy inner type is stable,\n                                // and so it is sufficient to avoid reconciling it away.\n                                // We're not going to unwrap or actually use the new lazy type.\n                                needsCompareFamilies = true;\n                            }\n                            break;\n                        }\n                    case ForwardRef:\n                        {\n                            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n                                needsCompareFamilies = true;\n                            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                                needsCompareFamilies = true;\n                            }\n                            break;\n                        }\n                    case MemoComponent:\n                    case SimpleMemoComponent:\n                        {\n                            if ($$typeofNextType === REACT_MEMO_TYPE) {\n                                // TODO: if it was but can no longer be simple,\n                                // we shouldn't set this.\n                                needsCompareFamilies = true;\n                            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                                needsCompareFamilies = true;\n                            }\n                            break;\n                        }\n                    default:\n                        return false;\n                } // Check if both types have a family and it's the same one.\n                if (needsCompareFamilies) {\n                    // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n                    // This means both of them need to be registered to preserve state.\n                    // If we unwrapped and compared the inner types for wrappers instead,\n                    // then we would risk falsely saying two separate memo(Foo)\n                    // calls are equivalent because they wrap the same Foo function.\n                    var prevFamily = resolveFamily(prevType); // $FlowFixMe[not-a-function] found when upgrading Flow\n                    if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        }\n        function markFailedErrorBoundaryForHotReloading(fiber) {\n            {\n                if (resolveFamily === null) {\n                    // Hot reloading is disabled.\n                    return;\n                }\n                if (typeof WeakSet !== 'function') {\n                    return;\n                }\n                if (failedBoundaries === null) {\n                    failedBoundaries = new WeakSet();\n                }\n                failedBoundaries.add(fiber);\n            }\n        }\n        var scheduleRefresh = function(root, update) {\n            {\n                if (resolveFamily === null) {\n                    // Hot reloading is disabled.\n                    return;\n                }\n                var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;\n                flushPassiveEffects();\n                scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n                flushSyncWork();\n            }\n        };\n        var scheduleRoot = function(root, element) {\n            {\n                if (root.context !== emptyContextObject) {\n                    // Super edge case: root has a legacy _renderSubtree context\n                    // but we don't know the parentComponent so we can't pass it.\n                    // Just ignore. We'll delete this with _renderSubtree code path later.\n                    return;\n                }\n                updateContainerSync(element, root, null, null);\n                flushSyncWork();\n            }\n        };\n        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n            {\n                var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;\n                var candidateType = null;\n                switch(tag){\n                    case FunctionComponent:\n                    case SimpleMemoComponent:\n                    case ClassComponent:\n                        candidateType = type;\n                        break;\n                    case ForwardRef:\n                        candidateType = type.render;\n                        break;\n                }\n                if (resolveFamily === null) {\n                    throw new Error('Expected resolveFamily to be set during hot reload.');\n                }\n                var needsRender = false;\n                var needsRemount = false;\n                if (candidateType !== null) {\n                    var family = resolveFamily(candidateType);\n                    if (family !== undefined) {\n                        if (staleFamilies.has(family)) {\n                            needsRemount = true;\n                        } else if (updatedFamilies.has(family)) {\n                            if (tag === ClassComponent) {\n                                needsRemount = true;\n                            } else {\n                                needsRender = true;\n                            }\n                        }\n                    }\n                }\n                if (failedBoundaries !== null) {\n                    if (failedBoundaries.has(fiber) || // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    alternate !== null && failedBoundaries.has(alternate)) {\n                        needsRemount = true;\n                    }\n                }\n                if (needsRemount) {\n                    fiber._debugNeedsRemount = true;\n                }\n                if (needsRemount || needsRender) {\n                    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n                    if (root !== null) {\n                        scheduleUpdateOnFiber(root, fiber, SyncLane);\n                    }\n                }\n                if (child !== null && !needsRemount) {\n                    scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n                }\n                if (sibling !== null) {\n                    scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n                }\n            }\n        }\n        var findHostInstancesForRefresh = function(root, families) {\n            {\n                var hostInstances = new Set();\n                var types = new Set(families.map(function(family) {\n                    return family.current;\n                }));\n                findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n                return hostInstances;\n            }\n        };\n        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n            {\n                var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;\n                var candidateType = null;\n                switch(tag){\n                    case FunctionComponent:\n                    case SimpleMemoComponent:\n                    case ClassComponent:\n                        candidateType = type;\n                        break;\n                    case ForwardRef:\n                        candidateType = type.render;\n                        break;\n                }\n                var didMatch = false;\n                if (candidateType !== null) {\n                    if (types.has(candidateType)) {\n                        didMatch = true;\n                    }\n                }\n                if (didMatch) {\n                    // We have a match. This only drills down to the closest host components.\n                    // There's no need to search deeper because for the purpose of giving\n                    // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n                    findHostInstancesForFiberShallowly(fiber, hostInstances);\n                } else {\n                    // If there's no match, maybe there will be one further down in the child tree.\n                    if (child !== null) {\n                        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n                    }\n                }\n                if (sibling !== null) {\n                    findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n                }\n            }\n        }\n        function findHostInstancesForFiberShallowly(fiber, hostInstances) {\n            {\n                var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n                if (foundHostInstances) {\n                    return;\n                } // If we didn't find any host children, fallback to closest host parent.\n                var node = fiber;\n                while(true){\n                    switch(node.tag){\n                        case HostSingleton:\n                        case HostComponent:\n                            hostInstances.add(node.stateNode);\n                            return;\n                        case HostPortal:\n                            hostInstances.add(node.stateNode.containerInfo);\n                            return;\n                        case HostRoot:\n                            hostInstances.add(node.stateNode.containerInfo);\n                            return;\n                    }\n                    if (node.return === null) {\n                        throw new Error('Expected to reach root first.');\n                    }\n                    node = node.return;\n                }\n            }\n        }\n        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n            {\n                var node = fiber;\n                var foundHostInstances = false;\n                while(true){\n                    if (node.tag === HostComponent || node.tag === HostHoistable || (supportsSingletons ? node.tag === HostSingleton : false)) {\n                        // We got a match.\n                        foundHostInstances = true;\n                        hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n                    } else if (node.child !== null) {\n                        node.child.return = node;\n                        node = node.child;\n                        continue;\n                    }\n                    if (node === fiber) {\n                        return foundHostInstances;\n                    }\n                    while(node.sibling === null){\n                        if (node.return === null || node.return === fiber) {\n                            return foundHostInstances;\n                        }\n                        node = node.return;\n                    }\n                    node.sibling.return = node.return;\n                    node = node.sibling;\n                }\n            }\n            return false;\n        }\n        var hasBadMapPolyfill;\n        {\n            hasBadMapPolyfill = false;\n            try {\n                var nonExtensibleObject = Object.preventExtensions({});\n                /* eslint-disable no-new */ new Map([\n                    [\n                        nonExtensibleObject,\n                        null\n                    ]\n                ]);\n                new Set([\n                    nonExtensibleObject\n                ]);\n            /* eslint-enable no-new */ } catch (e) {\n                // TODO: Consider warning about bad polyfills\n                hasBadMapPolyfill = true;\n            }\n        }\n        function FiberNode(tag, pendingProps, key, mode) {\n            // Instance\n            this.tag = tag;\n            this.key = key;\n            this.elementType = null;\n            this.type = null;\n            this.stateNode = null; // Fiber\n            this.return = null;\n            this.child = null;\n            this.sibling = null;\n            this.index = 0;\n            this.ref = null;\n            this.refCleanup = null;\n            this.pendingProps = pendingProps;\n            this.memoizedProps = null;\n            this.updateQueue = null;\n            this.memoizedState = null;\n            this.dependencies = null;\n            this.mode = mode; // Effects\n            this.flags = NoFlags$1;\n            this.subtreeFlags = NoFlags$1;\n            this.deletions = null;\n            this.lanes = NoLanes;\n            this.childLanes = NoLanes;\n            this.alternate = null;\n            {\n                // Note: The following is done to avoid a v8 performance cliff.\n                //\n                // Initializing the fields below to smis and later updating them with\n                // double values will cause Fibers to end up having separate shapes.\n                // This behavior/bug has something to do with Object.preventExtension().\n                // Fortunately this only impacts DEV builds.\n                // Unfortunately it makes React unusably slow for some applications.\n                // To work around this, initialize the fields below with doubles.\n                //\n                // Learn more about this here:\n                // https://github.com/facebook/react/issues/14365\n                // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n                this.actualDuration = Number.NaN;\n                this.actualStartTime = Number.NaN;\n                this.selfBaseDuration = Number.NaN;\n                this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n                // This won't trigger the performance cliff mentioned above,\n                // and it simplifies other profiler code (including DevTools).\n                this.actualDuration = 0;\n                this.actualStartTime = -1;\n                this.selfBaseDuration = 0;\n                this.treeBaseDuration = 0;\n            }\n            {\n                // This isn't directly used but is handy for debugging internals:\n                this._debugInfo = null;\n                this._debugOwner = null;\n                this._debugNeedsRemount = false;\n                this._debugHookTypes = null;\n                if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n                    Object.preventExtensions(this);\n                }\n            }\n        } // This is a constructor function, rather than a POJO constructor, still\n        // please ensure we do the following:\n        // 1) Nobody should add any instance methods on this. Instance methods can be\n        //    more difficult to predict when they get optimized and they are almost\n        //    never inlined properly in static compilers.\n        // 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n        //    always know when it is a fiber.\n        // 3) We might want to experiment with using numeric keys since they are easier\n        //    to optimize in a non-JIT environment.\n        // 4) We can easily go from a constructor to a createFiber object literal if that\n        //    is faster.\n        // 5) It should be easy to port this to a C struct and keep a C implementation\n        //    compatible.\n        function createFiber(tag, pendingProps, key, mode) {\n            // $FlowFixMe[invalid-constructor]: the shapes are exact here but Flow doesn't like constructors\n            return new FiberNode(tag, pendingProps, key, mode);\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function isSimpleFunctionComponent(type) {\n            return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;\n        }\n        function isFunctionClassComponent(type) {\n            return shouldConstruct(type);\n        } // This is used to create an alternate fiber to do work on.\n        function createWorkInProgress(current, pendingProps) {\n            var workInProgress = current.alternate;\n            if (workInProgress === null) {\n                // We use a double buffering pooling technique because we know that we'll\n                // only ever need at most two versions of a tree. We pool the \"other\" unused\n                // node that we're free to reuse. This is lazily created to avoid allocating\n                // extra objects for things that are never updated. It also allow us to\n                // reclaim the extra memory if needed.\n                workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n                workInProgress.elementType = current.elementType;\n                workInProgress.type = current.type;\n                workInProgress.stateNode = current.stateNode;\n                {\n                    // DEV-only fields\n                    workInProgress._debugOwner = current._debugOwner;\n                    workInProgress._debugHookTypes = current._debugHookTypes;\n                }\n                workInProgress.alternate = current;\n                current.alternate = workInProgress;\n            } else {\n                workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n                workInProgress.type = current.type; // We already have an alternate.\n                // Reset the effect tag.\n                workInProgress.flags = NoFlags$1; // The effects are no longer valid.\n                workInProgress.subtreeFlags = NoFlags$1;\n                workInProgress.deletions = null;\n                {\n                    // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n                    // This prevents time from endlessly accumulating in new commits.\n                    // This has the downside of resetting values for different priority renders,\n                    // But works for yielding (the common case) and should support resuming.\n                    workInProgress.actualDuration = 0;\n                    workInProgress.actualStartTime = -1;\n                }\n            } // Reset all effects except static ones.\n            // Static effects are not specific to a render.\n            workInProgress.flags = current.flags & StaticMask;\n            workInProgress.childLanes = current.childLanes;\n            workInProgress.lanes = current.lanes;\n            workInProgress.child = current.child;\n            workInProgress.memoizedProps = current.memoizedProps;\n            workInProgress.memoizedState = current.memoizedState;\n            workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n            // it cannot be shared with the current fiber.\n            var currentDependencies = current.dependencies;\n            workInProgress.dependencies = currentDependencies === null ? null : {\n                lanes: currentDependencies.lanes,\n                firstContext: currentDependencies.firstContext\n            }; // These will be overridden during the parent's reconciliation\n            workInProgress.sibling = current.sibling;\n            workInProgress.index = current.index;\n            workInProgress.ref = current.ref;\n            workInProgress.refCleanup = current.refCleanup;\n            {\n                workInProgress.selfBaseDuration = current.selfBaseDuration;\n                workInProgress.treeBaseDuration = current.treeBaseDuration;\n            }\n            {\n                workInProgress._debugInfo = current._debugInfo;\n                workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n                switch(workInProgress.tag){\n                    case FunctionComponent:\n                    case SimpleMemoComponent:\n                        workInProgress.type = resolveFunctionForHotReloading(current.type);\n                        break;\n                    case ClassComponent:\n                        workInProgress.type = resolveClassForHotReloading(current.type);\n                        break;\n                    case ForwardRef:\n                        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n                        break;\n                }\n            }\n            return workInProgress;\n        } // Used to reuse a Fiber for a second pass.\n        function resetWorkInProgress(workInProgress, renderLanes) {\n            // This resets the Fiber to what createFiber or createWorkInProgress would\n            // have set the values to before during the first pass. Ideally this wouldn't\n            // be necessary but unfortunately many code paths reads from the workInProgress\n            // when they should be reading from current and writing to workInProgress.\n            // We assume pendingProps, index, key, ref, return are still untouched to\n            // avoid doing another reconciliation.\n            // Reset the effect flags but keep any Placement tags, since that's something\n            // that child fiber is setting, not the reconciliation.\n            workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n            var current = workInProgress.alternate;\n            if (current === null) {\n                // Reset to createFiber's initial values.\n                workInProgress.childLanes = NoLanes;\n                workInProgress.lanes = renderLanes;\n                workInProgress.child = null;\n                workInProgress.subtreeFlags = NoFlags$1;\n                workInProgress.memoizedProps = null;\n                workInProgress.memoizedState = null;\n                workInProgress.updateQueue = null;\n                workInProgress.dependencies = null;\n                workInProgress.stateNode = null;\n                {\n                    // Note: We don't reset the actualTime counts. It's useful to accumulate\n                    // actual time across multiple render passes.\n                    workInProgress.selfBaseDuration = 0;\n                    workInProgress.treeBaseDuration = 0;\n                }\n            } else {\n                // Reset to the cloned values that createWorkInProgress would've.\n                workInProgress.childLanes = current.childLanes;\n                workInProgress.lanes = current.lanes;\n                workInProgress.child = current.child;\n                workInProgress.subtreeFlags = NoFlags$1;\n                workInProgress.deletions = null;\n                workInProgress.memoizedProps = current.memoizedProps;\n                workInProgress.memoizedState = current.memoizedState;\n                workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n                workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n                // it cannot be shared with the current fiber.\n                var currentDependencies = current.dependencies;\n                workInProgress.dependencies = currentDependencies === null ? null : {\n                    lanes: currentDependencies.lanes,\n                    firstContext: currentDependencies.firstContext\n                };\n                {\n                    // Note: We don't reset the actualTime counts. It's useful to accumulate\n                    // actual time across multiple render passes.\n                    workInProgress.selfBaseDuration = current.selfBaseDuration;\n                    workInProgress.treeBaseDuration = current.treeBaseDuration;\n                }\n            }\n            return workInProgress;\n        }\n        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n            var mode;\n            {\n                mode = ConcurrentMode;\n                if (isStrictMode === true) {\n                    mode |= StrictLegacyMode | StrictEffectsMode;\n                }\n            }\n            if (isDevToolsPresent) {\n                // Always collect profile timings when DevTools are present.\n                // This enables DevTools to start capturing timing at any point–\n                // Without some nodes in the tree having empty base times.\n                mode |= ProfileMode;\n            }\n            return createFiber(HostRoot, null, null, mode);\n        }\n        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {\n            var fiberTag = FunctionComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n            var resolvedType = type;\n            if (typeof type === 'function') {\n                if (shouldConstruct(type)) {\n                    fiberTag = ClassComponent;\n                    {\n                        resolvedType = resolveClassForHotReloading(resolvedType);\n                    }\n                } else {\n                    {\n                        resolvedType = resolveFunctionForHotReloading(resolvedType);\n                    }\n                }\n            } else if (typeof type === 'string') {\n                if (supportsResources && supportsSingletons) {\n                    var hostContext = getHostContext();\n                    fiberTag = isHostHoistableType(type, pendingProps, hostContext) ? HostHoistable : isHostSingletonType(type) ? HostSingleton : HostComponent;\n                } else if (supportsResources) {\n                    var _hostContext = getHostContext();\n                    fiberTag = isHostHoistableType(type, pendingProps, _hostContext) ? HostHoistable : HostComponent;\n                } else if (supportsSingletons) {\n                    fiberTag = isHostSingletonType(type) ? HostSingleton : HostComponent;\n                } else {\n                    fiberTag = HostComponent;\n                }\n            } else {\n                getTag: switch(type){\n                    case REACT_FRAGMENT_TYPE:\n                        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n                    case REACT_STRICT_MODE_TYPE:\n                        fiberTag = Mode;\n                        mode |= StrictLegacyMode;\n                        {\n                            // Strict effects should never run on legacy roots\n                            mode |= StrictEffectsMode;\n                        }\n                        break;\n                    case REACT_PROFILER_TYPE:\n                        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n                    case REACT_SUSPENSE_TYPE:\n                        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n                    case REACT_SUSPENSE_LIST_TYPE:\n                        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n                    case REACT_OFFSCREEN_TYPE:\n                        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n                    case REACT_LEGACY_HIDDEN_TYPE:\n                    // Fall through\n                    case REACT_SCOPE_TYPE:\n                    // Fall through\n                    case REACT_TRACING_MARKER_TYPE:\n                    // Fall through\n                    case REACT_DEBUG_TRACING_MODE_TYPE:\n                    // Fall through\n                    default:\n                        {\n                            if (typeof type === 'object' && type !== null) {\n                                switch(type.$$typeof){\n                                    case REACT_PROVIDER_TYPE:\n                                    // Fall through\n                                    case REACT_CONTEXT_TYPE:\n                                        {\n                                            fiberTag = ContextProvider;\n                                            break getTag;\n                                        }\n                                    case REACT_CONSUMER_TYPE:\n                                        {\n                                            fiberTag = ContextConsumer;\n                                            break getTag;\n                                        }\n                                    // Fall through\n                                    case REACT_FORWARD_REF_TYPE:\n                                        fiberTag = ForwardRef;\n                                        {\n                                            resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                                        }\n                                        break getTag;\n                                    case REACT_MEMO_TYPE:\n                                        fiberTag = MemoComponent;\n                                        break getTag;\n                                    case REACT_LAZY_TYPE:\n                                        fiberTag = LazyComponent;\n                                        resolvedType = null;\n                                        break getTag;\n                                }\n                            }\n                            var info = '';\n                            var typeString;\n                            {\n                                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n                                    info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n                                }\n                                if (type === null) {\n                                    typeString = 'null';\n                                } else if (isArray(type)) {\n                                    typeString = 'array';\n                                } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                                    typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n                                    info = ' Did you accidentally export a JSX literal instead of a component?';\n                                } else {\n                                    typeString = typeof type;\n                                }\n                                var ownerName = owner ? getComponentNameFromOwner(owner) : null;\n                                if (ownerName) {\n                                    info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n                                }\n                            }\n                            throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + typeString + \".\" + info));\n                        }\n                }\n            }\n            var fiber = createFiber(fiberTag, pendingProps, key, mode);\n            fiber.elementType = type;\n            fiber.type = resolvedType;\n            fiber.lanes = lanes;\n            {\n                fiber._debugOwner = owner;\n            }\n            return fiber;\n        }\n        function createFiberFromElement(element, mode, lanes) {\n            var owner = null;\n            {\n                owner = element._owner;\n            }\n            var type = element.type;\n            var key = element.key;\n            var pendingProps = element.props;\n            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n            {\n                fiber._debugOwner = element._owner;\n            }\n            return fiber;\n        }\n        function createFiberFromFragment(elements, mode, lanes, key) {\n            var fiber = createFiber(Fragment, elements, key, mode);\n            fiber.lanes = lanes;\n            return fiber;\n        }\n        function createFiberFromProfiler(pendingProps, mode, lanes, key) {\n            {\n                if (typeof pendingProps.id !== 'string') {\n                    error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n                }\n            }\n            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n            fiber.elementType = REACT_PROFILER_TYPE;\n            fiber.lanes = lanes;\n            {\n                fiber.stateNode = {\n                    effectDuration: 0,\n                    passiveEffectDuration: 0\n                };\n            }\n            return fiber;\n        }\n        function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n            fiber.elementType = REACT_SUSPENSE_TYPE;\n            fiber.lanes = lanes;\n            return fiber;\n        }\n        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n            fiber.lanes = lanes;\n            return fiber;\n        }\n        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n            fiber.elementType = REACT_OFFSCREEN_TYPE;\n            fiber.lanes = lanes;\n            var primaryChildInstance = {\n                _visibility: OffscreenVisible,\n                _pendingVisibility: OffscreenVisible,\n                _pendingMarkers: null,\n                _retryCache: null,\n                _transitions: null,\n                _current: null,\n                detach: function() {\n                    return detachOffscreenInstance(primaryChildInstance);\n                },\n                attach: function() {\n                    return attachOffscreenInstance(primaryChildInstance);\n                }\n            };\n            fiber.stateNode = primaryChildInstance;\n            return fiber;\n        }\n        function createFiberFromText(content, mode, lanes) {\n            var fiber = createFiber(HostText, content, null, mode);\n            fiber.lanes = lanes;\n            return fiber;\n        }\n        function createFiberFromDehydratedFragment(dehydratedNode) {\n            var fiber = createFiber(DehydratedFragment, null, null, NoMode);\n            fiber.stateNode = dehydratedNode;\n            return fiber;\n        }\n        function createFiberFromPortal(portal, mode, lanes) {\n            var pendingProps = portal.children !== null ? portal.children : [];\n            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n            fiber.lanes = lanes;\n            fiber.stateNode = {\n                containerInfo: portal.containerInfo,\n                pendingChildren: null,\n                // Used by persistent updates\n                implementation: portal.implementation\n            };\n            return fiber;\n        }\n        function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {\n            this.tag = ConcurrentRoot;\n            this.containerInfo = containerInfo;\n            this.pendingChildren = null;\n            this.current = null;\n            this.pingCache = null;\n            this.finishedWork = null;\n            this.timeoutHandle = noTimeout;\n            this.cancelPendingCommit = null;\n            this.context = null;\n            this.pendingContext = null;\n            this.next = null;\n            this.callbackNode = null;\n            this.callbackPriority = NoLane;\n            this.expirationTimes = createLaneMap(NoTimestamp);\n            this.pendingLanes = NoLanes;\n            this.suspendedLanes = NoLanes;\n            this.pingedLanes = NoLanes;\n            this.expiredLanes = NoLanes;\n            this.finishedLanes = NoLanes;\n            this.errorRecoveryDisabledLanes = NoLanes;\n            this.shellSuspendCounter = 0;\n            this.entangledLanes = NoLanes;\n            this.entanglements = createLaneMap(NoLanes);\n            this.hiddenUpdates = createLaneMap(null);\n            this.identifierPrefix = identifierPrefix;\n            this.onUncaughtError = onUncaughtError;\n            this.onCaughtError = onCaughtError;\n            this.onRecoverableError = onRecoverableError;\n            {\n                this.pooledCache = null;\n                this.pooledCacheLanes = NoLanes;\n            }\n            this.formState = formState;\n            this.incompleteTransitions = new Map();\n            {\n                this.effectDuration = 0;\n                this.passiveEffectDuration = 0;\n            }\n            {\n                this.memoizedUpdaters = new Set();\n                var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n                for(var _i = 0; _i < TotalLanes; _i++){\n                    pendingUpdatersLaneMap.push(new Set());\n                }\n            }\n            {\n                {\n                    // TODO: This varies by each renderer.\n                    this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n                }\n            }\n        }\n        function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // host config, but because they are passed in at runtime, we have to thread\n        // them through the root constructor. Perhaps we should put them all into a\n        // single type, like a DynamicHostConfig that is defined by the renderer.\n        identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {\n            // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions\n            var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState);\n            // stateNode is any.\n            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n            root.current = uninitializedFiber;\n            uninitializedFiber.stateNode = root;\n            {\n                var initialCache = createCache();\n                retainCache(initialCache); // The pooledCache is a fresh cache instance that is used temporarily\n                // for newly mounted boundaries during a render. In general, the\n                // pooledCache is always cleared from the root at the end of a render:\n                // it is either released when render commits, or moved to an Offscreen\n                // component if rendering suspends. Because the lifetime of the pooled\n                // cache is distinct from the main memoizedState.cache, it must be\n                // retained separately.\n                root.pooledCache = initialCache;\n                retainCache(initialCache);\n                var initialState = {\n                    element: initialChildren,\n                    isDehydrated: hydrate,\n                    cache: initialCache\n                };\n                uninitializedFiber.memoizedState = initialState;\n            }\n            initializeUpdateQueue(uninitializedFiber);\n            return root;\n        }\n        var ReactVersion = '19.0.0';\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return '' + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function createPortal(children, containerInfo, implementation) {\n            var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            {\n                checkKeyStringCoercion(key);\n            }\n            return {\n                // This tag allow us to uniquely identify this as a React Portal\n                $$typeof: REACT_PORTAL_TYPE,\n                key: key == null ? null : '' + key,\n                children: children,\n                containerInfo: containerInfo,\n                implementation: implementation\n            };\n        }\n        // Might add PROFILE later.\n        var didWarnAboutNestedUpdates;\n        var didWarnAboutFindNodeInStrictMode;\n        {\n            didWarnAboutNestedUpdates = false;\n            didWarnAboutFindNodeInStrictMode = {};\n        }\n        function getContextForSubtree(parentComponent) {\n            if (!parentComponent) {\n                return emptyContextObject;\n            }\n            var fiber = get(parentComponent);\n            var parentContext = findCurrentUnmaskedContext();\n            if (fiber.tag === ClassComponent) {\n                var Component = fiber.type;\n                if (isContextProvider()) {\n                    return processChildContext(fiber, Component, parentContext);\n                }\n            }\n            return parentContext;\n        }\n        function findHostInstance(component) {\n            var fiber = get(component);\n            if (fiber === undefined) {\n                if (typeof component.render === 'function') {\n                    throw new Error('Unable to find node on an unmounted component.');\n                } else {\n                    var keys = Object.keys(component).join(',');\n                    throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n                }\n            }\n            var hostFiber = findCurrentHostFiber(fiber);\n            if (hostFiber === null) {\n                return null;\n            }\n            return getPublicInstance(hostFiber.stateNode);\n        }\n        function findHostInstanceWithWarning(component, methodName) {\n            {\n                var fiber = get(component);\n                if (fiber === undefined) {\n                    if (typeof component.render === 'function') {\n                        throw new Error('Unable to find node on an unmounted component.');\n                    } else {\n                        var keys = Object.keys(component).join(',');\n                        throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n                    }\n                }\n                var hostFiber = findCurrentHostFiber(fiber);\n                if (hostFiber === null) {\n                    return null;\n                }\n                if (hostFiber.mode & StrictLegacyMode) {\n                    var componentName = getComponentNameFromFiber(fiber) || 'Component';\n                    if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n                        didWarnAboutFindNodeInStrictMode[componentName] = true;\n                        runWithFiberInDEV(hostFiber, function() {\n                            if (fiber.mode & StrictLegacyMode) {\n                                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://react.dev/link/strict-mode-find-node', methodName, methodName, componentName);\n                            } else {\n                                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://react.dev/link/strict-mode-find-node', methodName, methodName, componentName);\n                            }\n                        });\n                    }\n                }\n                return getPublicInstance(hostFiber.stateNode);\n            }\n        }\n        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks) {\n            var hydrate = false;\n            var initialChildren = null;\n            return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, null);\n        }\n        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {\n            var hydrate = true;\n            var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState); // TODO: Move this to FiberRoot constructor\n            root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n            // a regular update because the initial render must match was was rendered\n            // on the server.\n            // NOTE: This update intentionally doesn't have a payload. We're only using\n            // the update to schedule work on the root fiber (and, for legacy roots, to\n            // enqueue the callback if one is provided).\n            var current = root.current;\n            var lane = requestUpdateLane(current);\n            var update = createUpdate(lane);\n            update.callback = callback !== undefined && callback !== null ? callback : null;\n            enqueueUpdate(current, update, lane);\n            scheduleInitialHydrationOnRoot(root, lane);\n            return root;\n        }\n        function updateContainer(element, container, parentComponent, callback) {\n            var current = container.current;\n            var lane = requestUpdateLane(current);\n            updateContainerImpl(current, lane, element, container, parentComponent, callback);\n            return lane;\n        }\n        function updateContainerSync(element, container, parentComponent, callback) {\n            if (container.tag === LegacyRoot) {\n                flushPassiveEffects();\n            }\n            var current = container.current;\n            updateContainerImpl(current, SyncLane, element, container, parentComponent, callback);\n            return SyncLane;\n        }\n        function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {\n            {\n                onScheduleRoot(container, element);\n            }\n            {\n                markRenderScheduled(lane);\n            }\n            var context = getContextForSubtree(parentComponent);\n            if (container.context === null) {\n                container.context = context;\n            } else {\n                container.pendingContext = context;\n            }\n            {\n                if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n                    didWarnAboutNestedUpdates = true;\n                    error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n                }\n            }\n            var update = createUpdate(lane); // Caution: React DevTools currently depends on this property\n            // being called \"element\".\n            update.payload = {\n                element: element\n            };\n            callback = callback === undefined ? null : callback;\n            if (callback !== null) {\n                {\n                    if (typeof callback !== 'function') {\n                        error('Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n                    }\n                }\n                update.callback = callback;\n            }\n            var root = enqueueUpdate(rootFiber, update, lane);\n            if (root !== null) {\n                scheduleUpdateOnFiber(root, rootFiber, lane);\n                entangleTransitions(root, rootFiber, lane);\n            }\n        }\n        function getPublicRootInstance(container) {\n            var containerFiber = container.current;\n            if (!containerFiber.child) {\n                return null;\n            }\n            switch(containerFiber.child.tag){\n                case HostSingleton:\n                case HostComponent:\n                    return getPublicInstance(containerFiber.child.stateNode);\n                default:\n                    return containerFiber.child.stateNode;\n            }\n        }\n        function attemptSynchronousHydration(fiber) {\n            switch(fiber.tag){\n                case HostRoot:\n                    {\n                        var root = fiber.stateNode;\n                        if (isRootDehydrated(root)) {\n                            // Flush the first scheduled \"update\".\n                            var lanes = getHighestPriorityPendingLanes(root);\n                            flushRoot(root, lanes);\n                        }\n                        break;\n                    }\n                case SuspenseComponent:\n                    {\n                        var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n                        if (_root !== null) {\n                            scheduleUpdateOnFiber(_root, fiber, SyncLane);\n                        }\n                        flushSyncWork(); // If we're still blocked after this, we need to increase\n                        // the priority of any promises resolving within this\n                        // boundary so that they next attempt also has higher pri.\n                        var retryLane = SyncLane;\n                        markRetryLaneIfNotHydrated(fiber, retryLane);\n                        break;\n                    }\n            }\n        }\n        function markRetryLaneImpl(fiber, retryLane) {\n            var suspenseState = fiber.memoizedState;\n            if (suspenseState !== null && suspenseState.dehydrated !== null) {\n                suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n            }\n        } // Increases the priority of thenables when they resolve within this boundary.\n        function markRetryLaneIfNotHydrated(fiber, retryLane) {\n            markRetryLaneImpl(fiber, retryLane);\n            var alternate = fiber.alternate;\n            if (alternate) {\n                markRetryLaneImpl(alternate, retryLane);\n            }\n        }\n        function attemptContinuousHydration(fiber) {\n            if (fiber.tag !== SuspenseComponent) {\n                // We ignore HostRoots here because we can't increase\n                // their priority and they should not suspend on I/O,\n                // since you have to wrap anything that might suspend in\n                // Suspense.\n                return;\n            }\n            var lane = SelectiveHydrationLane;\n            var root = enqueueConcurrentRenderForLane(fiber, lane);\n            if (root !== null) {\n                scheduleUpdateOnFiber(root, fiber, lane);\n            }\n            markRetryLaneIfNotHydrated(fiber, lane);\n        }\n        function attemptHydrationAtCurrentPriority(fiber) {\n            if (fiber.tag !== SuspenseComponent) {\n                // We ignore HostRoots here because we can't increase\n                // their priority other than synchronously flush it.\n                return;\n            }\n            var lane = requestUpdateLane(fiber);\n            var root = enqueueConcurrentRenderForLane(fiber, lane);\n            if (root !== null) {\n                scheduleUpdateOnFiber(root, fiber, lane);\n            }\n            markRetryLaneIfNotHydrated(fiber, lane);\n        }\n        function findHostInstanceWithNoPortals(fiber) {\n            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n            if (hostFiber === null) {\n                return null;\n            }\n            return getPublicInstance(hostFiber.stateNode);\n        }\n        var shouldErrorImpl = function(fiber) {\n            return null;\n        };\n        function shouldError(fiber) {\n            return shouldErrorImpl(fiber);\n        }\n        var shouldSuspendImpl = function(fiber) {\n            return false;\n        };\n        function shouldSuspend(fiber) {\n            return shouldSuspendImpl(fiber);\n        }\n        var overrideHookState = null;\n        var overrideHookStateDeletePath = null;\n        var overrideHookStateRenamePath = null;\n        var overrideProps = null;\n        var overridePropsDeletePath = null;\n        var overridePropsRenamePath = null;\n        var scheduleUpdate = null;\n        var setErrorHandler = null;\n        var setSuspenseHandler = null;\n        {\n            var copyWithDeleteImpl = function(obj, path, index) {\n                var key = path[index];\n                var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n                if (index + 1 === path.length) {\n                    if (isArray(updated)) {\n                        updated.splice(key, 1);\n                    } else {\n                        delete updated[key];\n                    }\n                    return updated;\n                } // $FlowFixMe[incompatible-use] number or string is fine here\n                updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n                return updated;\n            };\n            var copyWithDelete = function(obj, path) {\n                return copyWithDeleteImpl(obj, path, 0);\n            };\n            var copyWithRenameImpl = function(obj, oldPath, newPath, index) {\n                var oldKey = oldPath[index];\n                var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n                if (index + 1 === oldPath.length) {\n                    var newKey = newPath[index]; // $FlowFixMe[incompatible-use] number or string is fine here\n                    updated[newKey] = updated[oldKey];\n                    if (isArray(updated)) {\n                        updated.splice(oldKey, 1);\n                    } else {\n                        delete updated[oldKey];\n                    }\n                } else {\n                    // $FlowFixMe[incompatible-use] number or string is fine here\n                    updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);\n                }\n                return updated;\n            };\n            var copyWithRename = function(obj, oldPath, newPath) {\n                if (oldPath.length !== newPath.length) {\n                    warn('copyWithRename() expects paths of the same length');\n                    return;\n                } else {\n                    for(var i = 0; i < newPath.length - 1; i++){\n                        if (oldPath[i] !== newPath[i]) {\n                            warn('copyWithRename() expects paths to be the same except for the deepest key');\n                            return;\n                        }\n                    }\n                }\n                return copyWithRenameImpl(obj, oldPath, newPath, 0);\n            };\n            var copyWithSetImpl = function(obj, path, index, value) {\n                if (index >= path.length) {\n                    return value;\n                }\n                var key = path[index];\n                var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe[incompatible-use] number or string is fine here\n                updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n                return updated;\n            };\n            var copyWithSet = function(obj, path, value) {\n                return copyWithSetImpl(obj, path, 0, value);\n            };\n            var findHook = function(fiber, id) {\n                // For now, the \"id\" of stateful hooks is just the stateful hook index.\n                // This may change in the future with e.g. nested hooks.\n                var currentHook = fiber.memoizedState;\n                while(currentHook !== null && id > 0){\n                    currentHook = currentHook.next;\n                    id--;\n                }\n                return currentHook;\n            }; // Support DevTools editable values for useState and useReducer.\n            overrideHookState = function(fiber, id, path, value) {\n                var hook = findHook(fiber, id);\n                if (hook !== null) {\n                    var newState = copyWithSet(hook.memoizedState, path, value);\n                    hook.memoizedState = newState;\n                    hook.baseState = newState; // We aren't actually adding an update to the queue,\n                    // because there is no update we can add for useReducer hooks that won't trigger an error.\n                    // (There's no appropriate action type for DevTools overrides.)\n                    // As a result though, React will see the scheduled update as a noop and bailout.\n                    // Shallow cloning props works as a workaround for now to bypass the bailout check.\n                    fiber.memoizedProps = assign({}, fiber.memoizedProps);\n                    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n                    if (root !== null) {\n                        scheduleUpdateOnFiber(root, fiber, SyncLane);\n                    }\n                }\n            };\n            overrideHookStateDeletePath = function(fiber, id, path) {\n                var hook = findHook(fiber, id);\n                if (hook !== null) {\n                    var newState = copyWithDelete(hook.memoizedState, path);\n                    hook.memoizedState = newState;\n                    hook.baseState = newState; // We aren't actually adding an update to the queue,\n                    // because there is no update we can add for useReducer hooks that won't trigger an error.\n                    // (There's no appropriate action type for DevTools overrides.)\n                    // As a result though, React will see the scheduled update as a noop and bailout.\n                    // Shallow cloning props works as a workaround for now to bypass the bailout check.\n                    fiber.memoizedProps = assign({}, fiber.memoizedProps);\n                    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n                    if (root !== null) {\n                        scheduleUpdateOnFiber(root, fiber, SyncLane);\n                    }\n                }\n            };\n            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {\n                var hook = findHook(fiber, id);\n                if (hook !== null) {\n                    var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n                    hook.memoizedState = newState;\n                    hook.baseState = newState; // We aren't actually adding an update to the queue,\n                    // because there is no update we can add for useReducer hooks that won't trigger an error.\n                    // (There's no appropriate action type for DevTools overrides.)\n                    // As a result though, React will see the scheduled update as a noop and bailout.\n                    // Shallow cloning props works as a workaround for now to bypass the bailout check.\n                    fiber.memoizedProps = assign({}, fiber.memoizedProps);\n                    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n                    if (root !== null) {\n                        scheduleUpdateOnFiber(root, fiber, SyncLane);\n                    }\n                }\n            }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n            overrideProps = function(fiber, path, value) {\n                fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n                if (fiber.alternate) {\n                    fiber.alternate.pendingProps = fiber.pendingProps;\n                }\n                var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n                if (root !== null) {\n                    scheduleUpdateOnFiber(root, fiber, SyncLane);\n                }\n            };\n            overridePropsDeletePath = function(fiber, path) {\n                fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n                if (fiber.alternate) {\n                    fiber.alternate.pendingProps = fiber.pendingProps;\n                }\n                var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n                if (root !== null) {\n                    scheduleUpdateOnFiber(root, fiber, SyncLane);\n                }\n            };\n            overridePropsRenamePath = function(fiber, oldPath, newPath) {\n                fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n                if (fiber.alternate) {\n                    fiber.alternate.pendingProps = fiber.pendingProps;\n                }\n                var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n                if (root !== null) {\n                    scheduleUpdateOnFiber(root, fiber, SyncLane);\n                }\n            };\n            scheduleUpdate = function(fiber) {\n                var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n                if (root !== null) {\n                    scheduleUpdateOnFiber(root, fiber, SyncLane);\n                }\n            };\n            setErrorHandler = function(newShouldErrorImpl) {\n                shouldErrorImpl = newShouldErrorImpl;\n            };\n            setSuspenseHandler = function(newShouldSuspendImpl) {\n                shouldSuspendImpl = newShouldSuspendImpl;\n            };\n        }\n        function findHostInstanceByFiber(fiber) {\n            var hostFiber = findCurrentHostFiber(fiber);\n            if (hostFiber === null) {\n                return null;\n            }\n            return hostFiber.stateNode;\n        }\n        function emptyFindFiberByHostInstance(instance) {\n            return null;\n        }\n        function getCurrentFiberForDevTools() {\n            return current;\n        }\n        function injectIntoDevTools(devToolsConfig) {\n            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n            return injectInternals({\n                bundleType: devToolsConfig.bundleType,\n                version: devToolsConfig.version,\n                rendererPackageName: devToolsConfig.rendererPackageName,\n                rendererConfig: devToolsConfig.rendererConfig,\n                overrideHookState: overrideHookState,\n                overrideHookStateDeletePath: overrideHookStateDeletePath,\n                overrideHookStateRenamePath: overrideHookStateRenamePath,\n                overrideProps: overrideProps,\n                overridePropsDeletePath: overridePropsDeletePath,\n                overridePropsRenamePath: overridePropsRenamePath,\n                setErrorHandler: setErrorHandler,\n                setSuspenseHandler: setSuspenseHandler,\n                scheduleUpdate: scheduleUpdate,\n                currentDispatcherRef: ReactSharedInternals,\n                findHostInstanceByFiber: findHostInstanceByFiber,\n                findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n                // React Refresh\n                findHostInstancesForRefresh: findHostInstancesForRefresh,\n                scheduleRefresh: scheduleRefresh,\n                scheduleRoot: scheduleRoot,\n                setRefreshHandler: setRefreshHandler,\n                // Enables DevTools to append owner stacks to error messages in DEV mode.\n                getCurrentFiber: getCurrentFiberForDevTools,\n                // Enables DevTools to detect reconciler version rather than renderer version\n                // which may not match for third party renderers.\n                reconcilerVersion: ReactVersion\n            });\n        }\n        exports.attemptContinuousHydration = attemptContinuousHydration;\n        exports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;\n        exports.attemptSynchronousHydration = attemptSynchronousHydration;\n        exports.batchedUpdates = batchedUpdates;\n        exports.createComponentSelector = createComponentSelector;\n        exports.createContainer = createContainer;\n        exports.createHasPseudoClassSelector = createHasPseudoClassSelector;\n        exports.createHydrationContainer = createHydrationContainer;\n        exports.createPortal = createPortal;\n        exports.createRoleSelector = createRoleSelector;\n        exports.createTestNameSelector = createTestNameSelector;\n        exports.createTextSelector = createTextSelector;\n        exports.defaultOnCaughtError = defaultOnCaughtError;\n        exports.defaultOnRecoverableError = defaultOnRecoverableError;\n        exports.defaultOnUncaughtError = defaultOnUncaughtError;\n        exports.deferredUpdates = deferredUpdates;\n        exports.discreteUpdates = discreteUpdates;\n        exports.findAllNodes = findAllNodes;\n        exports.findBoundingRects = findBoundingRects;\n        exports.findHostInstance = findHostInstance;\n        exports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;\n        exports.findHostInstanceWithWarning = findHostInstanceWithWarning;\n        exports.flushPassiveEffects = flushPassiveEffects;\n        exports.flushSyncFromReconciler = flushSyncFromReconciler;\n        exports.flushSyncWork = flushSyncWork;\n        exports.focusWithin = focusWithin;\n        exports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;\n        exports.getPublicRootInstance = getPublicRootInstance;\n        exports.injectIntoDevTools = injectIntoDevTools;\n        exports.isAlreadyRendering = isAlreadyRendering;\n        exports.observeVisibleRects = observeVisibleRects;\n        exports.shouldError = shouldError;\n        exports.shouldSuspend = shouldSuspend;\n        exports.startHostTransition = startHostTransition;\n        exports.updateContainer = updateContainer;\n        exports.updateContainerSync = updateContainerSync;\n        return exports;\n    };\n    module.exports[\"default\"] = module.exports;\n    Object.defineProperty(module.exports, \"__esModule\", ({\n        value: true\n    }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-reconciler/cjs/react-reconciler.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-reconciler/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/react-reconciler/constants.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-reconciler-constants.development.js */ \"(ssr)/./node_modules/react-reconciler/cjs/react-reconciler-constants.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVjb25jaWxlci9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLGtMQUEyRTtBQUM3RSIsInNvdXJjZXMiOlsiL1VzZXJzL3NvdWxlbWFuZXNvdy9Eb3dubG9hZHMvQ29kZS8zZCBHbGFzc2VzL25vZGVfbW9kdWxlcy9yZWFjdC1yZWNvbmNpbGVyL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtcmVjb25jaWxlci1jb25zdGFudHMucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1yZWNvbmNpbGVyLWNvbnN0YW50cy5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-reconciler/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-reconciler/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-reconciler/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-reconciler.development.js */ \"(ssr)/./node_modules/react-reconciler/cjs/react-reconciler.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVjb25jaWxlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsOEpBQWlFO0FBQ25FIiwic291cmNlcyI6WyIvVXNlcnMvc291bGVtYW5lc293L0Rvd25sb2Fkcy9Db2RlLzNkIEdsYXNzZXMvbm9kZV9tb2R1bGVzL3JlYWN0LXJlY29uY2lsZXIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LXJlY29uY2lsZXIucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1yZWNvbmNpbGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-reconciler/index.js\n");

/***/ })

};
;